function Modelica.Blocks.Tables.Internal.getDerTable2DValue "Derivative of interpolated 2-dim. table defined by matrix"
  input Modelica.Blocks.Types.ExternalCombiTable2D tableID;
  input Real u1;
  input Real u2;
  input Real der_u1;
  input Real der_u2;
  output Real der_y;

  external "C" der_y = ModelicaStandardTables_CombiTable2D_getDerValue(tableID, u1, u2, der_u1, der_u2);
end Modelica.Blocks.Tables.Internal.getDerTable2DValue;

function Modelica.Blocks.Tables.Internal.getTable2DAbscissaUmax "Return maximum abscissa value of 2-dim. table defined by matrix"
  input Modelica.Blocks.Types.ExternalCombiTable2D tableID;
  output Real[2] uMax "Maximum abscissa value in table";

  external "C" ModelicaStandardTables_CombiTable2D_maximumAbscissa(tableID, uMax);
end Modelica.Blocks.Tables.Internal.getTable2DAbscissaUmax;

function Modelica.Blocks.Tables.Internal.getTable2DAbscissaUmin "Return minimum abscissa value of 2-dim. table defined by matrix"
  input Modelica.Blocks.Types.ExternalCombiTable2D tableID;
  output Real[2] uMin "Minimum abscissa value in table";

  external "C" ModelicaStandardTables_CombiTable2D_minimumAbscissa(tableID, uMin);
end Modelica.Blocks.Tables.Internal.getTable2DAbscissaUmin;

function Modelica.Blocks.Tables.Internal.getTable2DValue "Interpolate 2-dim. table defined by matrix"
  input Modelica.Blocks.Types.ExternalCombiTable2D tableID;
  input Real u1;
  input Real u2;
  output Real y;

  external "C" y = ModelicaStandardTables_CombiTable2D_getValue(tableID, u1, u2);
end Modelica.Blocks.Tables.Internal.getTable2DValue;

function Modelica.Blocks.Types.ExternalCombiTable2D.constructor "Initialize 2-dim. table defined by matrix"
  input String tableName "Table name";
  input String fileName "File name";
  input Real[:, :] table;
  input enumeration(LinearSegments, ContinuousDerivative, ConstantSegments, MonotoneContinuousDerivative1, MonotoneContinuousDerivative2) smoothness;
  input enumeration(HoldLastPoint, LastTwoPoints, Periodic, NoExtrapolation) extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints;
  input Boolean verboseRead = true "= true: Print info message; = false: No info message";
  output Modelica.Blocks.Types.ExternalCombiTable2D externalCombiTable2D;

  external "C" externalCombiTable2D = ModelicaStandardTables_CombiTable2D_init2(fileName, tableName, table, size(table, 1), size(table, 2), smoothness, extrapolation, verboseRead);
end Modelica.Blocks.Types.ExternalCombiTable2D.constructor;

impure function Modelica.Blocks.Types.ExternalCombiTable2D.destructor "Terminate 2-dim. table defined by matrix"
  input Modelica.Blocks.Types.ExternalCombiTable2D externalCombiTable2D;

  external "C" ModelicaStandardTables_CombiTable2D_close(externalCombiTable2D);
end Modelica.Blocks.Types.ExternalCombiTable2D.destructor;

function Modelica.Media.IdealGases.Common.DataRecord "Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord"
  input String name;
  input Real MM;
  input Real Hf;
  input Real H0;
  input Real Tlimit;
  input Real[7] alow;
  input Real[2] blow;
  input Real[7] ahigh;
  input Real[2] bhigh;
  input Real R;
  output DataRecord res;
end Modelica.Media.IdealGases.Common.DataRecord;

function Modelica.Media.IdealGases.Common.Functions.cp_T "Compute specific heat capacity at constant pressure from temperature and gas data"
  input Modelica.Media.IdealGases.Common.DataRecord data "Ideal gas data";
  input Real T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature";
  output Real cp(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)") "Specific heat capacity at temperature T";
algorithm
  cp := smooth(0, if T < data.Tlimit then data.R * 1.0 / (T * T) * (data.alow[1] + T * (data.alow[2] + T * (data.alow[3] + T * (data.alow[4] + T * (data.alow[5] + T * (data.alow[6] + data.alow[7] * T)))))) else data.R * 1.0 / (T * T) * (data.ahigh[1] + T * (data.ahigh[2] + T * (data.ahigh[3] + T * (data.ahigh[4] + T * (data.ahigh[5] + T * (data.ahigh[6] + data.ahigh[7] * T)))))));
end Modelica.Media.IdealGases.Common.Functions.cp_T;

function Modelica.Media.IdealGases.Common.Functions.h_T "Compute specific enthalpy from temperature and gas data; reference is decided by the
    refChoice input, or by the referenceChoice package constant by default"
  input Modelica.Media.IdealGases.Common.DataRecord data "Ideal gas data";
  input Real T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature";
  input Boolean exclEnthForm = true "If true, enthalpy of formation Hf is not included in specific enthalpy h";
  input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K "Choice of reference enthalpy";
  input Real h_off(quantity = "SpecificEnergy", unit = "J/kg") = 0.0 "User defined offset for reference enthalpy, if referenceChoice = UserDefined";
  output Real h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy at temperature T";
algorithm
  h := smooth(0, (if T < data.Tlimit then data.R * ((-data.alow[1]) + T * (data.blow[1] + data.alow[2] * log(T) + T * (data.alow[3] + T * (0.5 * data.alow[4] + T * (0.3333333333333333 * data.alow[5] + T * (0.25 * data.alow[6] + 0.2 * data.alow[7] * T)))))) / T else data.R * ((-data.ahigh[1]) + T * (data.bhigh[1] + data.ahigh[2] * log(T) + T * (data.ahigh[3] + T * (0.5 * data.ahigh[4] + T * (0.3333333333333333 * data.ahigh[5] + T * (0.25 * data.ahigh[6] + 0.2 * data.ahigh[7] * T)))))) / T) + (if exclEnthForm then -data.Hf else 0.0) + (if refChoice == Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K then data.H0 else 0.0) + (if refChoice == Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined then h_off else 0.0));
end Modelica.Media.IdealGases.Common.Functions.h_T;

function Modelica.SIunits.Conversions.to_bar "Convert from Pascal to bar"
  input Real Pa(quantity = "Pressure", unit = "Pa", displayUnit = "bar") "Pascal value";
  output Real bar(quantity = "Pressure", unit = "bar") "bar value";
algorithm
  bar := Pa / 100000.0;
end Modelica.SIunits.Conversions.to_bar;

function Modelica.SIunits.Conversions.to_degC "Convert from Kelvin to degCelsius"
  input Real Kelvin(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Kelvin value";
  output Real Celsius(quantity = "ThermodynamicTemperature", unit = "degC") "Celsius value";
algorithm
  Celsius := Kelvin - 273.15;
end Modelica.SIunits.Conversions.to_degC;

function PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.ThermodynamicState "Automatically generated record constructor for PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.ThermodynamicState"
  input Real p;
  input Real T;
  output ThermodynamicState res;
end PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.ThermodynamicState;

function PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derT_p "Returns the partial derivative of density with respect to temperature at constant pressure"
  input PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.ThermodynamicState state "Thermodynamic state record";
  output Real ddTp(unit = "kg/(m3.K)") "Density derivative w.r.t. temperature";
algorithm
  ddTp := -state.p / (state.T * state.T * 287.0512249529787);
end PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derT_p;

function PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derX "Returns the partial derivative of density with respect to mass fractions at constant pressure and temperature"
  input PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.ThermodynamicState state "Thermodynamic state record";
  output Real[1] dddX(quantity = {"Density"}, unit = {"kg/m3"}, displayUnit = {"g/cm3"}, min = {0.0}, max = {100000.0}, start = {10.0}, nominal = {10.0}) "Derivative of density w.r.t. mass fraction";
algorithm
  dddX := {0.0};
end PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derX;

function PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derp_T "Returns the partial derivative of density with respect to pressure at constant temperature"
  input PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.ThermodynamicState state "Thermodynamic state record";
  output Real ddpT(unit = "s2/m2") "Density derivative w.r.t. pressure";
algorithm
  ddpT := 1.0 / (state.T * 287.0512249529787);
end PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derp_T;

function PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.heatCapacity_cv "Alias for deprecated name"
  input PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.ThermodynamicState state "Thermodynamic state record";
  output Real cv(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Specific heat capacity at constant volume";
algorithm
  cv := Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), state.T) - 287.0512249529787;
end PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.heatCapacity_cv;

function PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.ThermodynamicState "Automatically generated record constructor for PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.ThermodynamicState"
  input Real p;
  input Real T;
  output ThermodynamicState res;
end PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.ThermodynamicState;

function PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.temperature "Return temperature of ideal gas"
  input PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.ThermodynamicState state "Thermodynamic state record";
  output Real T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature";
algorithm
  T := state.T;
end PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.temperature;

function PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.squareReg
  input Real x;
  input Real delta = 0.01 "Range of significant deviation from x^2*sgn(x)";
  output Real y;
algorithm
  y := x * sqrt(x * x + delta * delta);
end PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.squareReg;

function PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.ThermodynamicState "Automatically generated record constructor for PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.ThermodynamicState"
  input Real p;
  input Real T;
  output ThermodynamicState res;
end PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.ThermodynamicState;

function PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derT_p "Returns the partial derivative of density with respect to temperature at constant pressure"
  input PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.ThermodynamicState state "Thermodynamic state record";
  output Real ddTp(unit = "kg/(m3.K)") "Density derivative w.r.t. temperature";
algorithm
  ddTp := -state.p / (state.T * state.T * 287.0512249529787);
end PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derT_p;

function PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derX "Returns the partial derivative of density with respect to mass fractions at constant pressure and temperature"
  input PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.ThermodynamicState state "Thermodynamic state record";
  output Real[1] dddX(quantity = {"Density"}, unit = {"kg/m3"}, displayUnit = {"g/cm3"}, min = {0.0}, max = {100000.0}, start = {10.0}, nominal = {10.0}) "Derivative of density w.r.t. mass fraction";
algorithm
  dddX := {0.0};
end PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derX;

function PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derp_T "Returns the partial derivative of density with respect to pressure at constant temperature"
  input PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.ThermodynamicState state "Thermodynamic state record";
  output Real ddpT(unit = "s2/m2") "Density derivative w.r.t. pressure";
algorithm
  ddpT := 1.0 / (state.T * 287.0512249529787);
end PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derp_T;

function PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.heatCapacity_cv "Alias for deprecated name"
  input PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.ThermodynamicState state "Thermodynamic state record";
  output Real cv(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Specific heat capacity at constant volume";
algorithm
  cv := Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), state.T) - 287.0512249529787;
end PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.heatCapacity_cv;

function PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.ThermodynamicState "Automatically generated record constructor for PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.ThermodynamicState"
  input Real p;
  input Real T;
  output ThermodynamicState res;
end PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.ThermodynamicState;

function PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.temperature "Return temperature of ideal gas"
  input PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.ThermodynamicState state "Thermodynamic state record";
  output Real T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature";
algorithm
  T := state.T;
end PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.temperature;

function PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.squareReg
  input Real x;
  input Real delta = 0.01 "Range of significant deviation from x^2*sgn(x)";
  output Real y;
algorithm
  y := x * sqrt(x * x + delta * delta);
end PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.squareReg;

function PL_Lib.Experiments.SimplePack.compressor.Medium.ThermodynamicState "Automatically generated record constructor for PL_Lib.Experiments.SimplePack.compressor.Medium.ThermodynamicState"
  input Real p;
  input Real T;
  output ThermodynamicState res;
end PL_Lib.Experiments.SimplePack.compressor.Medium.ThermodynamicState;

function PL_Lib.Experiments.SimplePack.compressor.Medium.density "Return density of ideal gas"
  input PL_Lib.Experiments.SimplePack.compressor.Medium.ThermodynamicState state "Thermodynamic state record";
  output Real d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density";
algorithm
  d := state.p / (287.0512249529787 * state.T);
end PL_Lib.Experiments.SimplePack.compressor.Medium.density;

function PL_Lib.Experiments.SimplePack.compressor.Medium.isentropicEnthalpy "Return isentropic enthalpy"
  input Real p_downstream(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Downstream pressure";
  input PL_Lib.Experiments.SimplePack.compressor.Medium.ThermodynamicState refState "Reference state for entropy";
  input Boolean exclEnthForm = true "If true, enthalpy of formation Hf is not included in specific enthalpy h";
  input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K "Choice of reference enthalpy";
  input Real h_off(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) = 0.0 "User defined offset for reference enthalpy, if referenceChoice = UserDefined";
  output Real h_is(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Isentropic enthalpy";
algorithm
  h_is := PL_Lib.Experiments.SimplePack.compressor.Medium.isentropicEnthalpyApproximation(p_downstream, refState, exclEnthForm, refChoice, h_off);
end PL_Lib.Experiments.SimplePack.compressor.Medium.isentropicEnthalpy;

function PL_Lib.Experiments.SimplePack.compressor.Medium.isentropicEnthalpyApproximation "Approximate method of calculating h_is from upstream properties and downstream pressure"
  input Real p2(quantity = "Pressure", unit = "Pa", displayUnit = "bar") "Downstream pressure";
  input PL_Lib.Experiments.SimplePack.compressor.Medium.ThermodynamicState state "Properties at upstream location";
  input Boolean exclEnthForm = true "If true, enthalpy of formation Hf is not included in specific enthalpy h";
  input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K "Choice of reference enthalpy";
  input Real h_off(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) = 0.0 "User defined offset for reference enthalpy, if referenceChoice = UserDefined";
  output Real h_is(quantity = "SpecificEnergy", unit = "J/kg") "Isentropic enthalpy";
  protected Real gamma(quantity = "RatioOfSpecificHeatCapacities", unit = "1", min = 1.0, max = 500000.0, start = 1.2, nominal = 1.2) = PL_Lib.Experiments.SimplePack.compressor.Medium.isentropicExponent(state) "Isentropic exponent";
algorithm
  h_is := Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), state.T, exclEnthForm, refChoice, h_off) + gamma / (gamma - 1.0) * state.p / PL_Lib.Experiments.SimplePack.compressor.Medium.density(state) * ((p2 / state.p) ^ ((gamma - 1.0) / gamma) - 1.0);
end PL_Lib.Experiments.SimplePack.compressor.Medium.isentropicEnthalpyApproximation;

function PL_Lib.Experiments.SimplePack.compressor.Medium.isentropicExponent "Return isentropic exponent"
  input PL_Lib.Experiments.SimplePack.compressor.Medium.ThermodynamicState state "Thermodynamic state record";
  output Real gamma(quantity = "RatioOfSpecificHeatCapacities", unit = "1", min = 1.0, max = 500000.0, start = 1.2, nominal = 1.2) "Isentropic exponent";
algorithm
  gamma := PL_Lib.Experiments.SimplePack.compressor.Medium.specificHeatCapacityCp(state) / PL_Lib.Experiments.SimplePack.compressor.Medium.specificHeatCapacityCv(state);
end PL_Lib.Experiments.SimplePack.compressor.Medium.isentropicExponent;

function PL_Lib.Experiments.SimplePack.compressor.Medium.specificHeatCapacityCp "Return specific heat capacity at constant pressure"
  input PL_Lib.Experiments.SimplePack.compressor.Medium.ThermodynamicState state "Thermodynamic state record";
  output Real cp(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Specific heat capacity at constant pressure";
algorithm
  cp := Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), state.T);
end PL_Lib.Experiments.SimplePack.compressor.Medium.specificHeatCapacityCp;

function PL_Lib.Experiments.SimplePack.compressor.Medium.specificHeatCapacityCv "Compute specific heat capacity at constant volume from temperature and gas data"
  input PL_Lib.Experiments.SimplePack.compressor.Medium.ThermodynamicState state "Thermodynamic state record";
  output Real cv(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Specific heat capacity at constant volume";
algorithm
  cv := Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), state.T) - 287.0512249529787;
end PL_Lib.Experiments.SimplePack.compressor.Medium.specificHeatCapacityCv;

function ThermoPower.Functions.linspaceExt "Extended linspace function handling also the N=1 case"
  input Real x1;
  input Real x2;
  input Integer N;
  output Real[N] vec;
algorithm
  vec := if N == 1 then {x1} else array(x1 + (x2 - x1) * /*Real*/(i - 1) / /*Real*/(N - 1) for i in 1:N);
end ThermoPower.Functions.linspaceExt;

class PL_Lib.Experiments.SimplePack
  final parameter Boolean system.allowFlowReversal = true "= false to restrict to design flow direction (flangeA -> flangeB)";
  parameter enumeration(noInit, fixedState, steadyState, steadyStateNoP, steadyStateNoT, steadyStateNoPT) system.initOpt = ThermoPower.Choices.Init.Options.fixedState;
  parameter Real system.p_amb(quantity = "Pressure", unit = "Pa", displayUnit = "bar") = 101325.0 "Ambient pressure";
  parameter Real system.T_amb(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 293.15 "Ambient Temperature (dry bulb)";
  parameter Real system.T_wb(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 288.15 "Ambient temperature (wet bulb)";
  parameter Real system.fnom(quantity = "Frequency", unit = "Hz") = 50.0 "Nominal grid frequency";
  parameter Real whex_cold(quantity = "MassFlowRate", unit = "kg/s") "nominal (and initial) mass flow rate";
  parameter Real whex_hot(quantity = "MassFlowRate", unit = "kg/s") "nominal (and initial) mass flow rate";
  final parameter Boolean compressor.explicitIsentropicEnthalpy = true "isentropicEnthalpy function used";
  parameter Real compressor.eta_mech(unit = "1") = 0.98 "mechanical efficiency";
  parameter Real compressor.pstart_in(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = 100000.0 "inlet start pressure";
  parameter Real compressor.pstart_out(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = 100000.0 "outlet start pressure";
  parameter Real compressor.Tdes_in(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = 573.15 "inlet design temperature";
  final parameter Boolean compressor.allowFlowReversal = true "= true to allow flow reversal, false restricts to design direction";
  parameter Real compressor.Tstart_in(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = compressor.Tdes_in "inlet start temperature";
  parameter Real compressor.Tstart_out(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = 573.15 "outlet start temperature";
  parameter Real compressor.Xstart[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, nominal = 0.1) = 1.0 "start gas composition";
  Real compressor.gas_in.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, start = compressor.pstart_in, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real compressor.gas_in.h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real compressor.gas_in.d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real compressor.gas_in.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = compressor.Tstart_in, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real compressor.gas_in.X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real compressor.gas_in.u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real compressor.gas_in.R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real compressor.gas_in.MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real compressor.gas_in.state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real compressor.gas_in.state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean compressor.gas_in.preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean compressor.gas_in.standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real compressor.gas_in.T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(compressor.gas_in.T) "Temperature of medium in [degC]";
  Real compressor.gas_in.p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(compressor.gas_in.p) "Absolute pressure of medium in [bar]";
  Real compressor.gas_iso.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, start = compressor.pstart_out, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real compressor.gas_iso.h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real compressor.gas_iso.d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real compressor.gas_iso.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = compressor.Tstart_out, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real compressor.gas_iso.X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real compressor.gas_iso.u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real compressor.gas_iso.R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real compressor.gas_iso.MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real compressor.gas_iso.state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real compressor.gas_iso.state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean compressor.gas_iso.preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean compressor.gas_iso.standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real compressor.gas_iso.T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(compressor.gas_iso.T) "Temperature of medium in [degC]";
  Real compressor.gas_iso.p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(compressor.gas_iso.p) "Absolute pressure of medium in [bar]";
  Real compressor.hout_iso(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Outlet isentropic enthalpy";
  Real compressor.hout(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Outlet enthaply";
  Real compressor.s_in(quantity = "SpecificEntropy", unit = "J/(kg.K)", min = -10000000.0, max = 10000000.0, nominal = 1000.0) "Inlet specific entropy";
  Real compressor.pout(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = compressor.pstart_out, nominal = 1000000.0) "Outlet pressure";
  Real compressor.w(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0) "Gas flow rate";
  Real compressor.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "shaft rotation angle";
  Real compressor.omega(quantity = "AngularVelocity", unit = "rad/s") "shaft angular velocity";
  Real compressor.tau(quantity = "Torque", unit = "N.m") "net torque acting on the compressor";
  Real compressor.eta(unit = "1") "isentropic efficiency";
  Real compressor.PR(unit = "1") "pressure ratio";
  Real compressor.inlet.m_flow(quantity = "MassFlowRate.Air", unit = "kg/s", min = -9.999999999999999e+59, max = 100000.0) "Mass flow rate from the connection point into the component";
  Real compressor.inlet.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Thermodynamic pressure in the connection point";
  Real compressor.inlet.h_outflow(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
  Real compressor.outlet.m_flow(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 9.999999999999999e+59) "Mass flow rate from the connection point into the component";
  Real compressor.outlet.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Thermodynamic pressure in the connection point";
  Real compressor.outlet.h_outflow(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
  Real compressor.shaft_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
  Real compressor.shaft_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
  Real compressor.shaft_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
  Real compressor.shaft_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
  parameter Real compressor.Ndesign(quantity = "AngularVelocity", unit = "rad/s") = 523.3 "Design velocity";
  parameter Real compressor.tablePhic[1,1] = compressor.tablePhicC[1,1] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[1,2] = compressor.tablePhicC[1,2] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[1,3] = compressor.tablePhicC[1,3] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[1,4] = compressor.tablePhicC[1,4] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[2,1] = compressor.tablePhicC[2,1] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[2,2] = compressor.tablePhicC[2,2] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[2,3] = compressor.tablePhicC[2,3] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[2,4] = compressor.tablePhicC[2,4] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[3,1] = compressor.tablePhicC[3,1] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[3,2] = compressor.tablePhicC[3,2] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[3,3] = compressor.tablePhicC[3,3] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[3,4] = compressor.tablePhicC[3,4] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[4,1] = compressor.tablePhicC[4,1] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[4,2] = compressor.tablePhicC[4,2] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[4,3] = compressor.tablePhicC[4,3] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[4,4] = compressor.tablePhicC[4,4] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[5,1] = compressor.tablePhicC[5,1] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[5,2] = compressor.tablePhicC[5,2] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[5,3] = compressor.tablePhicC[5,3] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[5,4] = compressor.tablePhicC[5,4] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[6,1] = compressor.tablePhicC[6,1] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[6,2] = compressor.tablePhicC[6,2] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[6,3] = compressor.tablePhicC[6,3] "Table for phic(N_T,beta)";
  parameter Real compressor.tablePhic[6,4] = compressor.tablePhicC[6,4] "Table for phic(N_T,beta)";
  parameter Real compressor.tableEta[1,1] = compressor.tableEtaC[1,1] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[1,2] = compressor.tableEtaC[1,2] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[1,3] = compressor.tableEtaC[1,3] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[1,4] = compressor.tableEtaC[1,4] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[2,1] = compressor.tableEtaC[2,1] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[2,2] = compressor.tableEtaC[2,2] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[2,3] = compressor.tableEtaC[2,3] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[2,4] = compressor.tableEtaC[2,4] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[3,1] = compressor.tableEtaC[3,1] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[3,2] = compressor.tableEtaC[3,2] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[3,3] = compressor.tableEtaC[3,3] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[3,4] = compressor.tableEtaC[3,4] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[4,1] = compressor.tableEtaC[4,1] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[4,2] = compressor.tableEtaC[4,2] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[4,3] = compressor.tableEtaC[4,3] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[4,4] = compressor.tableEtaC[4,4] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[5,1] = compressor.tableEtaC[5,1] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[5,2] = compressor.tableEtaC[5,2] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[5,3] = compressor.tableEtaC[5,3] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[5,4] = compressor.tableEtaC[5,4] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[6,1] = compressor.tableEtaC[6,1] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[6,2] = compressor.tableEtaC[6,2] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[6,3] = compressor.tableEtaC[6,3] "Table for eta(N_T,beta)";
  parameter Real compressor.tableEta[6,4] = compressor.tableEtaC[6,4] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[1,1] = compressor.tablePRC[1,1] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[1,2] = compressor.tablePRC[1,2] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[1,3] = compressor.tablePRC[1,3] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[1,4] = compressor.tablePRC[1,4] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[2,1] = compressor.tablePRC[2,1] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[2,2] = compressor.tablePRC[2,2] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[2,3] = compressor.tablePRC[2,3] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[2,4] = compressor.tablePRC[2,4] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[3,1] = compressor.tablePRC[3,1] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[3,2] = compressor.tablePRC[3,2] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[3,3] = compressor.tablePRC[3,3] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[3,4] = compressor.tablePRC[3,4] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[4,1] = compressor.tablePRC[4,1] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[4,2] = compressor.tablePRC[4,2] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[4,3] = compressor.tablePRC[4,3] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[4,4] = compressor.tablePRC[4,4] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[5,1] = compressor.tablePRC[5,1] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[5,2] = compressor.tablePRC[5,2] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[5,3] = compressor.tablePRC[5,3] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[5,4] = compressor.tablePRC[5,4] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[6,1] = compressor.tablePRC[6,1] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[6,2] = compressor.tablePRC[6,2] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[6,3] = compressor.tablePRC[6,3] "Table for eta(N_T,beta)";
  parameter Real compressor.tablePR[6,4] = compressor.tablePRC[6,4] "Table for eta(N_T,beta)";
  parameter String compressor.fileName = "noName" "File where matrix is stored";
  parameter enumeration(matrix, file) compressor.Table = ThermoPower.Choices.TurboMachinery.TableTypes.matrix "Selection of the way of definition of table matrix";
  parameter Real compressor.eta_set = 0.95;
  parameter Real compressor.PR_set = 2.5;
  parameter Real compressor.mass(quantity = "Mass", unit = "kg", min = 0.0) = 20.0 "Compressor mass";
  Real compressor.Eta.u1 "Connector of Real input signal 1";
  Real compressor.Eta.u2 "Connector of Real input signal 2";
  Real compressor.Eta.y "Connector of Real output signal";
  final parameter Boolean compressor.Eta.tableOnFile = false "= true, if table is defined on file or in function usertab";
  parameter Real compressor.Eta.table[1,1] = compressor.tableEta[1,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[1,2] = compressor.tableEta[1,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[1,3] = compressor.tableEta[1,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[1,4] = compressor.tableEta[1,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[2,1] = compressor.tableEta[2,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[2,2] = compressor.tableEta[2,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[2,3] = compressor.tableEta[2,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[2,4] = compressor.tableEta[2,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[3,1] = compressor.tableEta[3,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[3,2] = compressor.tableEta[3,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[3,3] = compressor.tableEta[3,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[3,4] = compressor.tableEta[3,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[4,1] = compressor.tableEta[4,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[4,2] = compressor.tableEta[4,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[4,3] = compressor.tableEta[4,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[4,4] = compressor.tableEta[4,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[5,1] = compressor.tableEta[5,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[5,2] = compressor.tableEta[5,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[5,3] = compressor.tableEta[5,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[5,4] = compressor.tableEta[5,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[6,1] = compressor.tableEta[6,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[6,2] = compressor.tableEta[6,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[6,3] = compressor.tableEta[6,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Eta.table[6,4] = compressor.tableEta[6,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter String compressor.Eta.tableName = if compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then "NoName" else "tabEta" "Table name on file or in function usertab (see docu)";
  parameter String compressor.Eta.fileName = if compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then "NoName" else compressor.fileName "File where matrix is stored";
  parameter Boolean compressor.Eta.verboseRead = true "= true, if info message that file is loading is to be printed";
  final parameter enumeration(LinearSegments, ContinuousDerivative, ConstantSegments, MonotoneContinuousDerivative1, MonotoneContinuousDerivative2) compressor.Eta.smoothness = Modelica.Blocks.Types.Smoothness.ContinuousDerivative "Smoothness of table interpolation";
  final parameter enumeration(HoldLastPoint, LastTwoPoints, Periodic, NoExtrapolation) compressor.Eta.extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
  final parameter Boolean compressor.Eta.verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
  final parameter Real[2] compressor.Eta.u_min = Modelica.Blocks.Tables.Internal.getTable2DAbscissaUmin(compressor.Eta.tableID) "Minimum abscissa value defined in table";
  final parameter Real[2] compressor.Eta.u_max = Modelica.Blocks.Tables.Internal.getTable2DAbscissaUmax(compressor.Eta.tableID) "Maximum abscissa value defined in table";
  protected parameter Modelica.Blocks.Types.ExternalCombiTable2D compressor.Eta.tableID = Modelica.Blocks.Types.ExternalCombiTable2D.constructor("NoName", "NoName", compressor.Eta.table, Modelica.Blocks.Types.Smoothness.ContinuousDerivative, Modelica.Blocks.Types.Extrapolation.LastTwoPoints, false) "External table object";
  Real compressor.PressRatio.u1 "Connector of Real input signal 1";
  Real compressor.PressRatio.u2 "Connector of Real input signal 2";
  Real compressor.PressRatio.y "Connector of Real output signal";
  final parameter Boolean compressor.PressRatio.tableOnFile = false "= true, if table is defined on file or in function usertab";
  parameter Real compressor.PressRatio.table[1,1] = compressor.tablePR[1,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[1,2] = compressor.tablePR[1,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[1,3] = compressor.tablePR[1,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[1,4] = compressor.tablePR[1,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[2,1] = compressor.tablePR[2,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[2,2] = compressor.tablePR[2,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[2,3] = compressor.tablePR[2,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[2,4] = compressor.tablePR[2,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[3,1] = compressor.tablePR[3,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[3,2] = compressor.tablePR[3,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[3,3] = compressor.tablePR[3,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[3,4] = compressor.tablePR[3,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[4,1] = compressor.tablePR[4,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[4,2] = compressor.tablePR[4,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[4,3] = compressor.tablePR[4,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[4,4] = compressor.tablePR[4,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[5,1] = compressor.tablePR[5,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[5,2] = compressor.tablePR[5,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[5,3] = compressor.tablePR[5,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[5,4] = compressor.tablePR[5,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[6,1] = compressor.tablePR[6,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[6,2] = compressor.tablePR[6,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[6,3] = compressor.tablePR[6,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.PressRatio.table[6,4] = compressor.tablePR[6,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter String compressor.PressRatio.tableName = if compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then "NoName" else "tabPR" "Table name on file or in function usertab (see docu)";
  parameter String compressor.PressRatio.fileName = if compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then "NoName" else compressor.fileName "File where matrix is stored";
  parameter Boolean compressor.PressRatio.verboseRead = true "= true, if info message that file is loading is to be printed";
  final parameter enumeration(LinearSegments, ContinuousDerivative, ConstantSegments, MonotoneContinuousDerivative1, MonotoneContinuousDerivative2) compressor.PressRatio.smoothness = Modelica.Blocks.Types.Smoothness.ContinuousDerivative "Smoothness of table interpolation";
  final parameter enumeration(HoldLastPoint, LastTwoPoints, Periodic, NoExtrapolation) compressor.PressRatio.extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
  final parameter Boolean compressor.PressRatio.verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
  final parameter Real[2] compressor.PressRatio.u_min = Modelica.Blocks.Tables.Internal.getTable2DAbscissaUmin(compressor.PressRatio.tableID) "Minimum abscissa value defined in table";
  final parameter Real[2] compressor.PressRatio.u_max = Modelica.Blocks.Tables.Internal.getTable2DAbscissaUmax(compressor.PressRatio.tableID) "Maximum abscissa value defined in table";
  protected parameter Modelica.Blocks.Types.ExternalCombiTable2D compressor.PressRatio.tableID = Modelica.Blocks.Types.ExternalCombiTable2D.constructor("NoName", "NoName", compressor.PressRatio.table, Modelica.Blocks.Types.Smoothness.ContinuousDerivative, Modelica.Blocks.Types.Extrapolation.LastTwoPoints, false) "External table object";
  Real compressor.Phic.u1 "Connector of Real input signal 1";
  Real compressor.Phic.u2 "Connector of Real input signal 2";
  Real compressor.Phic.y "Connector of Real output signal";
  final parameter Boolean compressor.Phic.tableOnFile = false "= true, if table is defined on file or in function usertab";
  parameter Real compressor.Phic.table[1,1] = compressor.tablePhic[1,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[1,2] = compressor.tablePhic[1,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[1,3] = compressor.tablePhic[1,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[1,4] = compressor.tablePhic[1,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[2,1] = compressor.tablePhic[2,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[2,2] = compressor.tablePhic[2,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[2,3] = compressor.tablePhic[2,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[2,4] = compressor.tablePhic[2,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[3,1] = compressor.tablePhic[3,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[3,2] = compressor.tablePhic[3,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[3,3] = compressor.tablePhic[3,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[3,4] = compressor.tablePhic[3,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[4,1] = compressor.tablePhic[4,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[4,2] = compressor.tablePhic[4,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[4,3] = compressor.tablePhic[4,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[4,4] = compressor.tablePhic[4,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[5,1] = compressor.tablePhic[5,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[5,2] = compressor.tablePhic[5,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[5,3] = compressor.tablePhic[5,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[5,4] = compressor.tablePhic[5,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[6,1] = compressor.tablePhic[6,1] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[6,2] = compressor.tablePhic[6,2] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[6,3] = compressor.tablePhic[6,3] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter Real compressor.Phic.table[6,4] = compressor.tablePhic[6,4] "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0, 0; 0, 1])";
  parameter String compressor.Phic.tableName = if compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then "NoName" else "tabPhic" "Table name on file or in function usertab (see docu)";
  parameter String compressor.Phic.fileName = if compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then "NoName" else compressor.fileName "File where matrix is stored";
  parameter Boolean compressor.Phic.verboseRead = true "= true, if info message that file is loading is to be printed";
  final parameter enumeration(LinearSegments, ContinuousDerivative, ConstantSegments, MonotoneContinuousDerivative1, MonotoneContinuousDerivative2) compressor.Phic.smoothness = Modelica.Blocks.Types.Smoothness.ContinuousDerivative "Smoothness of table interpolation";
  final parameter enumeration(HoldLastPoint, LastTwoPoints, Periodic, NoExtrapolation) compressor.Phic.extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
  final parameter Boolean compressor.Phic.verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
  final parameter Real[2] compressor.Phic.u_min = Modelica.Blocks.Tables.Internal.getTable2DAbscissaUmin(compressor.Phic.tableID) "Minimum abscissa value defined in table";
  final parameter Real[2] compressor.Phic.u_max = Modelica.Blocks.Tables.Internal.getTable2DAbscissaUmax(compressor.Phic.tableID) "Maximum abscissa value defined in table";
  protected parameter Modelica.Blocks.Types.ExternalCombiTable2D compressor.Phic.tableID = Modelica.Blocks.Types.ExternalCombiTable2D.constructor("NoName", "NoName", compressor.Phic.table, Modelica.Blocks.Types.Smoothness.ContinuousDerivative, Modelica.Blocks.Types.Extrapolation.LastTwoPoints, false) "External table object";
  Real compressor.N_T "Referred speed ";
  Real compressor.N_T_design "Referred design velocity";
  Real compressor.phic "Flow number ";
  Real compressor.beta(start = 3.0) "Number of beta line";
  protected parameter Real compressor.tableEtaC[1,1] = 0.0;
  protected parameter Real compressor.tableEtaC[1,2] = 95.0;
  protected parameter Real compressor.tableEtaC[1,3] = 100.0;
  protected parameter Real compressor.tableEtaC[1,4] = 105.0;
  protected parameter Real compressor.tableEtaC[2,1] = 1.0;
  protected parameter Real compressor.tableEtaC[2,2] = 0.825;
  protected parameter Real compressor.tableEtaC[2,3] = 0.8100000000000001;
  protected parameter Real compressor.tableEtaC[2,4] = 0.805;
  protected parameter Real compressor.tableEtaC[3,1] = 2.0;
  protected parameter Real compressor.tableEtaC[3,2] = 0.84;
  protected parameter Real compressor.tableEtaC[3,3] = 0.829;
  protected parameter Real compressor.tableEtaC[3,4] = 0.82;
  protected parameter Real compressor.tableEtaC[4,1] = 3.0;
  protected parameter Real compressor.tableEtaC[4,2] = 0.832;
  protected parameter Real compressor.tableEtaC[4,3] = 0.822;
  protected parameter Real compressor.tableEtaC[4,4] = 0.8149999999999999;
  protected parameter Real compressor.tableEtaC[5,1] = 4.0;
  protected parameter Real compressor.tableEtaC[5,2] = 0.825;
  protected parameter Real compressor.tableEtaC[5,3] = 0.8120000000000001;
  protected parameter Real compressor.tableEtaC[5,4] = 0.79;
  protected parameter Real compressor.tableEtaC[6,1] = 5.0;
  protected parameter Real compressor.tableEtaC[6,2] = 0.795;
  protected parameter Real compressor.tableEtaC[6,3] = 0.78;
  protected parameter Real compressor.tableEtaC[6,4] = 0.765;
  protected parameter Real compressor.tablePhicC[1,1] = 0.0;
  protected parameter Real compressor.tablePhicC[1,2] = 95.0;
  protected parameter Real compressor.tablePhicC[1,3] = 100.0;
  protected parameter Real compressor.tablePhicC[1,4] = 105.0;
  protected parameter Real compressor.tablePhicC[2,1] = 1.0;
  protected parameter Real compressor.tablePhicC[2,2] = 0.0383;
  protected parameter Real compressor.tablePhicC[2,3] = 0.043;
  protected parameter Real compressor.tablePhicC[2,4] = 0.0468;
  protected parameter Real compressor.tablePhicC[3,1] = 2.0;
  protected parameter Real compressor.tablePhicC[3,2] = 0.0393;
  protected parameter Real compressor.tablePhicC[3,3] = 0.0438;
  protected parameter Real compressor.tablePhicC[3,4] = 0.0479;
  protected parameter Real compressor.tablePhicC[4,1] = 3.0;
  protected parameter Real compressor.tablePhicC[4,2] = 0.0406;
  protected parameter Real compressor.tablePhicC[4,3] = 0.0452;
  protected parameter Real compressor.tablePhicC[4,4] = 0.0484;
  protected parameter Real compressor.tablePhicC[5,1] = 4.0;
  protected parameter Real compressor.tablePhicC[5,2] = 0.0416;
  protected parameter Real compressor.tablePhicC[5,3] = 0.0461;
  protected parameter Real compressor.tablePhicC[5,4] = 0.0489;
  protected parameter Real compressor.tablePhicC[6,1] = 5.0;
  protected parameter Real compressor.tablePhicC[6,2] = 0.0423;
  protected parameter Real compressor.tablePhicC[6,3] = 0.0466;
  protected parameter Real compressor.tablePhicC[6,4] = 0.0493;
  protected parameter Real compressor.tablePRC[1,1] = 0.0;
  protected parameter Real compressor.tablePRC[1,2] = 95.0;
  protected parameter Real compressor.tablePRC[1,3] = 100.0;
  protected parameter Real compressor.tablePRC[1,4] = 105.0;
  protected parameter Real compressor.tablePRC[2,1] = 1.0;
  protected parameter Real compressor.tablePRC[2,2] = 22.6;
  protected parameter Real compressor.tablePRC[2,3] = 27.0;
  protected parameter Real compressor.tablePRC[2,4] = 32.0;
  protected parameter Real compressor.tablePRC[3,1] = 2.0;
  protected parameter Real compressor.tablePRC[3,2] = 22.0;
  protected parameter Real compressor.tablePRC[3,3] = 26.6;
  protected parameter Real compressor.tablePRC[3,4] = 30.8;
  protected parameter Real compressor.tablePRC[4,1] = 3.0;
  protected parameter Real compressor.tablePRC[4,2] = 20.8;
  protected parameter Real compressor.tablePRC[4,3] = 25.5;
  protected parameter Real compressor.tablePRC[4,4] = 29.0;
  protected parameter Real compressor.tablePRC[5,1] = 4.0;
  protected parameter Real compressor.tablePRC[5,2] = 19.0;
  protected parameter Real compressor.tablePRC[5,3] = 24.3;
  protected parameter Real compressor.tablePRC[5,4] = 27.1;
  protected parameter Real compressor.tablePRC[6,1] = 5.0;
  protected parameter Real compressor.tablePRC[6,2] = 17.0;
  protected parameter Real compressor.tablePRC[6,3] = 21.5;
  protected parameter Real compressor.tablePRC[6,4] = 24.2;
  Real PHX.infl_1.m_flow(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0) "Mass flow rate from the connection point into the component";
  Real PHX.infl_1.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Thermodynamic pressure in the connection point";
  Real PHX.infl_1.h_outflow(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
  Real PHX.infl_2.m_flow(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0) "Mass flow rate from the connection point into the component";
  Real PHX.infl_2.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Thermodynamic pressure in the connection point";
  Real PHX.infl_2.h_outflow(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
  Real PHX.outfl_1.m_flow(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0) "Mass flow rate from the connection point into the component";
  Real PHX.outfl_1.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Thermodynamic pressure in the connection point";
  Real PHX.outfl_1.h_outflow(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
  Real PHX.outfl_2.m_flow(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0) "Mass flow rate from the connection point into the component";
  Real PHX.outfl_2.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Thermodynamic pressure in the connection point";
  Real PHX.outfl_2.h_outflow(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
  final parameter Integer PHX.Nnodes = 10 "number of Nodes";
  parameter Integer PHX.Nt = 20 "Number of tubes in parallel";
  parameter Real PHX.Cfhex = 0.005 "friction coefficient";
  parameter Real PHX.Lhex(quantity = "Length", unit = "m") = 10.0 "total length";
  parameter Real PHX.Dihex(quantity = "Length", unit = "m", min = 0.0) = 0.02 "internal diameter";
  parameter Real PHX.rhex(quantity = "Length", unit = "m", min = 0.0) = PHX.Dihex / 2.0 "internal radius";
  parameter Real PHX.omegahex(quantity = "Length", unit = "m") = 3.141592653589793 * PHX.Dihex "internal perimeter";
  parameter Real PHX.Ahex(quantity = "Area", unit = "m2") = 3.141592653589793 * PHX.rhex ^ 2.0 "internal cross section";
  parameter enumeration(noInit, fixedState, steadyState, steadyStateNoP, steadyStateNoT, steadyStateNoPT) PHX.initOpt = ThermoPower.Choices.Init.Options.steadyState "Initialisation option";
  parameter Real PHX.pstart_c(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0) = 100000.0 "Pressure start value - cold side";
  parameter Real PHX.Tstartbar_c(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 300.0 "Avarage temperature start value - cold side";
  parameter Real PHX.Tstartin_c(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = PHX.HX_coldSide.Tstartbar "Inlet temperature start value - cold side";
  parameter Real PHX.Tstartout_c(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = PHX.HX_coldSide.Tstartbar "Outlet temperature start value - cold side";
  parameter Real PHX.pstart_h(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0) = 100000.0 "Pressure start value - hot side";
  parameter Real PHX.Tstartbar_h(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 300.0 "Avarage temperature start value - hot side";
  parameter Real PHX.Tstartin_h(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = PHX.HX_hotSide.Tstartbar "Inlet temperature start value - hot side";
  parameter Real PHX.Tstartout_h(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = PHX.HX_hotSide.Tstartbar "Outlet temperature start value - hot side";
  parameter Real PHX.rint(quantity = "Length", unit = "m") = 0.005 "Internal radius (single tube)";
  parameter Real PHX.rext(quantity = "Length", unit = "m") = 0.006 "External radius (single tube)";
  parameter Real PHX.rhomcm(quantity = "HeatCapacity", unit = "J/K") = 5070000.0 "Metal heat capacity per unit volume [J/m^3.K]";
  parameter Real PHX.lambda(quantity = "ThermalConductivity", unit = "W/(m.K)") = 20.0 "Thermal conductivity";
  parameter Real PHX.wnom_c(quantity = "MassFlowRate", unit = "kg/s") = 0.1 "Nominal mass flowrate (total) - cold side";
  parameter Real PHX.wnom_h(quantity = "MassFlowRate", unit = "kg/s") = 0.1 "Nominal mass flowrate (total) - hot side";
  parameter Real PHX.Tstartbar_wall(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 300.0 "Avarage temperature - wall";
  parameter Real PHX.Tstart1_w(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = PHX.metalTubeFV.Tstartbar "Temperature start value - first volume - wall";
  parameter Real PHX.TstartN_w(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = PHX.metalTubeFV.Tstartbar "Temperature start value - last volume - wall";
  parameter Real PHX.rhohex(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 1000.0 "Density of the material";
  parameter Real PHX.mhex(quantity = "Mass", unit = "kg", min = 0.0) = 1.0 "Compressor mass calculated from material properties and sizing";
  final parameter Integer PHX.HX_hotSide.N(min = 2) = 10 "Number of nodes for thermal variables";
  final parameter Integer PHX.HX_hotSide.Nw = 9 "Number of volumes on the wall interface";
  parameter Integer PHX.HX_hotSide.Nt = 1 "Number of tubes in parallel";
  parameter Real PHX.HX_hotSide.L(quantity = "Length", unit = "m", min = 0.0) = PHX.Lhex "Tube length";
  parameter Real PHX.HX_hotSide.H(quantity = "Length", unit = "m") = 0.0 "Elevation of outlet over inlet";
  parameter Real PHX.HX_hotSide.A(quantity = "Area", unit = "m2") = PHX.Ahex "Cross-sectional area (single tube)";
  parameter Real PHX.HX_hotSide.omega(quantity = "Length", unit = "m") = PHX.omegahex "Perimeter of heat transfer surface (single tube)";
  parameter Real PHX.HX_hotSide.Dhyd(quantity = "Length", unit = "m") = PHX.Dihex "Hydraulic Diameter (single tube)";
  parameter Real PHX.HX_hotSide.wnom(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0) = 0.1 "Nominal mass flowrate (total)";
  final parameter enumeration(Kfnom, OpPoint, Cfnom, Colebrook, NoFriction) PHX.HX_hotSide.FFtype = ThermoPower.Choices.Flow1D.FFtypes.Cfnom "Friction Factor Type";
  parameter Real PHX.HX_hotSide.dpnom(quantity = "Pressure", unit = "Pa", displayUnit = "bar") = 1000.0 "Nominal pressure drop";
  parameter Real PHX.HX_hotSide.Kfnom = 0.0 "Nominal hydraulic resistance coefficient";
  parameter Real PHX.HX_hotSide.rhonom(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) = 0.0 "Nominal inlet density";
  parameter Real PHX.HX_hotSide.Cfnom(unit = "1") = PHX.Cfhex "Nominal Fanning friction factor";
  parameter Real PHX.HX_hotSide.e(unit = "1") = 0.0 "Relative roughness (ratio roughness/diameter)";
  parameter Real PHX.HX_hotSide.Kfc = 1.0 "Friction factor correction coefficient";
  final parameter Boolean PHX.HX_hotSide.DynamicMomentum = false "Inertial phenomena accounted for";
  final parameter Boolean PHX.HX_hotSide.UniformComposition = true "Uniform gas composition is assumed";
  final parameter Boolean PHX.HX_hotSide.QuasiStatic = false "Quasi-static model (mass, energy and momentum static balances";
  final parameter enumeration(Middle, Upstream, Downstream) PHX.HX_hotSide.HydraulicCapacitance = ThermoPower.Choices.Flow1D.HCtypes.Downstream "1: Upstream, 2: Downstream";
  final parameter Boolean PHX.HX_hotSide.avoidInletEnthalpyDerivative = true "Avoid inlet enthalpy derivative";
  final parameter Boolean PHX.HX_hotSide.allowFlowReversal = true "= true to allow flow reversal, false restricts to design direction";
  parameter Real PHX.HX_hotSide.pstart(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.pstart_h "Pressure start value";
  parameter Real PHX.HX_hotSide.Tstartbar(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.Tstartbar_h "Avarage temperature start value";
  parameter Real PHX.HX_hotSide.Tstartin(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.Tstartin_h "Inlet temperature start value";
  parameter Real PHX.HX_hotSide.Tstartout(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.Tstartout_h "Outlet temperature start value";
  parameter Real PHX.HX_hotSide.Tstart[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.Tstartin "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_hotSide.Tstart[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.Tstartin + (PHX.HX_hotSide.Tstartout - PHX.HX_hotSide.Tstartin) / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_hotSide.Tstart[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.Tstartin + (PHX.HX_hotSide.Tstartout - PHX.HX_hotSide.Tstartin) * 2.0 / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_hotSide.Tstart[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.Tstartin + (PHX.HX_hotSide.Tstartout - PHX.HX_hotSide.Tstartin) * 3.0 / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_hotSide.Tstart[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.Tstartin + (PHX.HX_hotSide.Tstartout - PHX.HX_hotSide.Tstartin) * 4.0 / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_hotSide.Tstart[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.Tstartin + (PHX.HX_hotSide.Tstartout - PHX.HX_hotSide.Tstartin) * 5.0 / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_hotSide.Tstart[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.Tstartin + (PHX.HX_hotSide.Tstartout - PHX.HX_hotSide.Tstartin) * 6.0 / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_hotSide.Tstart[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.Tstartin + (PHX.HX_hotSide.Tstartout - PHX.HX_hotSide.Tstartin) * 7.0 / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_hotSide.Tstart[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.Tstartin + (PHX.HX_hotSide.Tstartout - PHX.HX_hotSide.Tstartin) * 8.0 / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_hotSide.Tstart[10](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.Tstartin + (PHX.HX_hotSide.Tstartout - PHX.HX_hotSide.Tstartin) * 9.0 / 9.0 "Start value of temperature vector (initialized by default)";
  final parameter Real PHX.HX_hotSide.unom(quantity = "Velocity", unit = "m/s") = 10.0 "Nominal velocity for simplified equation";
  parameter Real PHX.HX_hotSide.wnf = 0.01 "Fraction of nominal flow rate at which linear friction equals turbulent friction";
  parameter Real PHX.HX_hotSide.Xstart[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, nominal = 0.1) = 1.0 "Start gas composition";
  final parameter enumeration(noInit, fixedState, steadyState, steadyStateNoP, steadyStateNoT, steadyStateNoPT) PHX.HX_hotSide.initOpt = ThermoPower.Choices.Init.Options.steadyState "Initialisation option";
  final parameter Boolean PHX.HX_hotSide.noInitialPressure = false "Remove initial equation on pressure";
  protected final parameter Integer PHX.HX_hotSide.nXi = 0 "number of independent mass fractions";
  protected final parameter Integer PHX.HX_hotSide.nX = 1 "total number of mass fractions";
  Real PHX.HX_hotSide.infl.m_flow(quantity = "MassFlowRate.Air", unit = "kg/s", min = -9.999999999999999e+59, max = 100000.0, start = PHX.HX_hotSide.wnom) "Mass flow rate from the connection point into the component";
  Real PHX.HX_hotSide.infl.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Thermodynamic pressure in the connection point";
  Real PHX.HX_hotSide.infl.h_outflow(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
  Real PHX.HX_hotSide.outfl.m_flow(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 9.999999999999999e+59, start = -PHX.HX_hotSide.wnom) "Mass flow rate from the connection point into the component";
  Real PHX.HX_hotSide.outfl.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Thermodynamic pressure in the connection point";
  Real PHX.HX_hotSide.outfl.h_outflow(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
  final parameter Integer PHX.HX_hotSide.wall.N = 9 "Number of volumes";
  Real PHX.HX_hotSide.wall.T[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.wall.T[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.wall.T[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.wall.T[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.wall.T[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.wall.T[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.wall.T[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.wall.T[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.wall.T[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.wall.Q[1](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.wall.Q[2](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.wall.Q[3](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.wall.Q[4](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.wall.Q[5](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.wall.Q[6](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.wall.Q[7](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.wall.Q[8](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.wall.Q[9](quantity = "Power", unit = "W") "Heat flow at the volumes";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[1].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_hotSide.gas[1].state.p "Absolute pressure of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[1].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.gas[1].state.T "Temperature of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[2].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_hotSide.gas[2].state.p "Absolute pressure of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[2].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.gas[2].state.T "Temperature of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[3].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_hotSide.gas[3].state.p "Absolute pressure of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[3].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.gas[3].state.T "Temperature of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[4].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_hotSide.gas[4].state.p "Absolute pressure of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[4].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.gas[4].state.T "Temperature of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[5].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_hotSide.gas[5].state.p "Absolute pressure of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[5].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.gas[5].state.T "Temperature of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[6].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_hotSide.gas[6].state.p "Absolute pressure of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[6].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.gas[6].state.T "Temperature of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[7].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_hotSide.gas[7].state.p "Absolute pressure of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[7].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.gas[7].state.T "Temperature of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[8].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_hotSide.gas[8].state.p "Absolute pressure of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[8].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.gas[8].state.T "Temperature of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[9].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_hotSide.gas[9].state.p "Absolute pressure of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[9].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.gas[9].state.T "Temperature of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[10].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_hotSide.gas[10].state.p "Absolute pressure of medium";
  final Real PHX.HX_hotSide.heatTransfer.fluidState[10].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_hotSide.gas[10].state.T "Temperature of medium";
  final Real PHX.HX_hotSide.heatTransfer.w[1](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_hotSide.heatTransfer.w[2](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_hotSide.heatTransfer.w[3](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_hotSide.heatTransfer.w[4](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_hotSide.heatTransfer.w[5](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_hotSide.heatTransfer.w[6](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_hotSide.heatTransfer.w[7](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_hotSide.heatTransfer.w[8](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_hotSide.heatTransfer.w[9](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_hotSide.heatTransfer.w[10](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final parameter Boolean PHX.HX_hotSide.heatTransfer.useAverageTemperature = false "= true to use average temperature for heat transfer";
  final parameter Integer PHX.HX_hotSide.heatTransfer.wall.N = 9 "Number of volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.T[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.T[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.T[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.T[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.T[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.T[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.T[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.T[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.T[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.Q[1](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.Q[2](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.Q[3](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.Q[4](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.Q[5](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.Q[6](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.Q[7](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.Q[8](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_hotSide.heatTransfer.wall.Q[9](quantity = "Power", unit = "W") "Heat flow at the volumes";
  final parameter Integer PHX.HX_hotSide.heatTransfer.Nf(min = 2) = 10 "Number of nodes on the fluid side";
  final parameter Integer PHX.HX_hotSide.heatTransfer.Nw = 9 "Number of volumes on the wall side";
  final parameter Integer PHX.HX_hotSide.heatTransfer.Nt(min = 1) = PHX.HX_hotSide.Nt "Number of tubes in parallel";
  final parameter Real PHX.HX_hotSide.heatTransfer.L(quantity = "Length", unit = "m", min = 0.0) = PHX.HX_hotSide.L "Tube length";
  final parameter Real PHX.HX_hotSide.heatTransfer.A(quantity = "Area", unit = "m2") = PHX.HX_hotSide.A "Cross-sectional area (single tube)";
  final parameter Real PHX.HX_hotSide.heatTransfer.omega(quantity = "Length", unit = "m") = PHX.HX_hotSide.omega "Wet perimeter of heat transfer surface (single tube)";
  final parameter Real PHX.HX_hotSide.heatTransfer.Dhyd(quantity = "Length", unit = "m") = PHX.HX_hotSide.Dhyd "Hydraulic Diameter (single tube)";
  final parameter Real PHX.HX_hotSide.heatTransfer.wnom(quantity = "MassFlowRate", unit = "kg/s") = PHX.HX_hotSide.wnom / /*Real*/(PHX.HX_hotSide.Nt) "Nominal mass flow rate (single tube)";
  final parameter Real PHX.HX_hotSide.heatTransfer.l(quantity = "Length", unit = "m") = PHX.HX_hotSide.heatTransfer.L / 9.0 "Length of a single volume";
  parameter Real PHX.HX_hotSide.heatTransfer.kc(unit = "1") = 1.0 "Correction factor for heat transfer";
  Real PHX.HX_hotSide.heatTransfer.T[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_hotSide.heatTransfer.T[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_hotSide.heatTransfer.T[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_hotSide.heatTransfer.T[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_hotSide.heatTransfer.T[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_hotSide.heatTransfer.T[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_hotSide.heatTransfer.T[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_hotSide.heatTransfer.T[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_hotSide.heatTransfer.T[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_hotSide.heatTransfer.T[10](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_hotSide.heatTransfer.Tw[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Tw[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Tw[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Tw[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Tw[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Tw[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Tw[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Tw[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Tw[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Qw[1](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Qw[2](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Qw[3](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Qw[4](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Qw[5](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Qw[6](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Qw[7](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Qw[8](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Qw[9](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_hotSide.heatTransfer.Qvol[1](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_hotSide.heatTransfer.Qvol[2](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_hotSide.heatTransfer.Qvol[3](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_hotSide.heatTransfer.Qvol[4](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_hotSide.heatTransfer.Qvol[5](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_hotSide.heatTransfer.Qvol[6](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_hotSide.heatTransfer.Qvol[7](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_hotSide.heatTransfer.Qvol[8](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_hotSide.heatTransfer.Qvol[9](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_hotSide.heatTransfer.Q(quantity = "Power", unit = "W") "Total heat flow through lateral boundary";
  parameter Real PHX.HX_hotSide.wnm(unit = "1") = 0.01 "Maximum fraction of the nominal flow rate allowed as reverse flow";
  final parameter Boolean PHX.HX_hotSide.fixedMassFlowSimplified = false "Fix flow rate = wnom for simplified homotopy model";
  Real PHX.HX_hotSide.gas[1].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[1].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_hotSide.gas[1].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_hotSide.gas[1].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_hotSide.gas[1].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_hotSide.gas[1].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_hotSide.gas[1].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_hotSide.gas[1].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_hotSide.gas[1].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[1].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_hotSide.gas[1].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_hotSide.gas[1].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_hotSide.gas[1].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_hotSide.gas[1].T) "Temperature of medium in [degC]";
  Real PHX.HX_hotSide.gas[1].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_hotSide.gas[1].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_hotSide.gas[2].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[2].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_hotSide.gas[2].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_hotSide.gas[2].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_hotSide.gas[2].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_hotSide.gas[2].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_hotSide.gas[2].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_hotSide.gas[2].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_hotSide.gas[2].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[2].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_hotSide.gas[2].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_hotSide.gas[2].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_hotSide.gas[2].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_hotSide.gas[2].T) "Temperature of medium in [degC]";
  Real PHX.HX_hotSide.gas[2].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_hotSide.gas[2].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_hotSide.gas[3].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[3].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_hotSide.gas[3].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_hotSide.gas[3].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_hotSide.gas[3].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_hotSide.gas[3].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_hotSide.gas[3].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_hotSide.gas[3].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_hotSide.gas[3].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[3].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_hotSide.gas[3].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_hotSide.gas[3].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_hotSide.gas[3].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_hotSide.gas[3].T) "Temperature of medium in [degC]";
  Real PHX.HX_hotSide.gas[3].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_hotSide.gas[3].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_hotSide.gas[4].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[4].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_hotSide.gas[4].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_hotSide.gas[4].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_hotSide.gas[4].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_hotSide.gas[4].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_hotSide.gas[4].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_hotSide.gas[4].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_hotSide.gas[4].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[4].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_hotSide.gas[4].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_hotSide.gas[4].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_hotSide.gas[4].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_hotSide.gas[4].T) "Temperature of medium in [degC]";
  Real PHX.HX_hotSide.gas[4].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_hotSide.gas[4].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_hotSide.gas[5].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[5].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_hotSide.gas[5].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_hotSide.gas[5].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_hotSide.gas[5].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_hotSide.gas[5].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_hotSide.gas[5].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_hotSide.gas[5].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_hotSide.gas[5].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[5].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_hotSide.gas[5].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_hotSide.gas[5].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_hotSide.gas[5].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_hotSide.gas[5].T) "Temperature of medium in [degC]";
  Real PHX.HX_hotSide.gas[5].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_hotSide.gas[5].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_hotSide.gas[6].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[6].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_hotSide.gas[6].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_hotSide.gas[6].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_hotSide.gas[6].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_hotSide.gas[6].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_hotSide.gas[6].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_hotSide.gas[6].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_hotSide.gas[6].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[6].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_hotSide.gas[6].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_hotSide.gas[6].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_hotSide.gas[6].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_hotSide.gas[6].T) "Temperature of medium in [degC]";
  Real PHX.HX_hotSide.gas[6].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_hotSide.gas[6].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_hotSide.gas[7].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[7].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_hotSide.gas[7].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_hotSide.gas[7].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_hotSide.gas[7].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_hotSide.gas[7].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_hotSide.gas[7].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_hotSide.gas[7].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_hotSide.gas[7].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[7].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_hotSide.gas[7].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_hotSide.gas[7].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_hotSide.gas[7].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_hotSide.gas[7].T) "Temperature of medium in [degC]";
  Real PHX.HX_hotSide.gas[7].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_hotSide.gas[7].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_hotSide.gas[8].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[8].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_hotSide.gas[8].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_hotSide.gas[8].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_hotSide.gas[8].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_hotSide.gas[8].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_hotSide.gas[8].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_hotSide.gas[8].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_hotSide.gas[8].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[8].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_hotSide.gas[8].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_hotSide.gas[8].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_hotSide.gas[8].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_hotSide.gas[8].T) "Temperature of medium in [degC]";
  Real PHX.HX_hotSide.gas[8].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_hotSide.gas[8].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_hotSide.gas[9].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[9].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_hotSide.gas[9].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_hotSide.gas[9].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_hotSide.gas[9].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_hotSide.gas[9].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_hotSide.gas[9].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_hotSide.gas[9].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_hotSide.gas[9].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[9].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_hotSide.gas[9].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_hotSide.gas[9].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_hotSide.gas[9].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_hotSide.gas[9].T) "Temperature of medium in [degC]";
  Real PHX.HX_hotSide.gas[9].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_hotSide.gas[9].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_hotSide.gas[10].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[10].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_hotSide.gas[10].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_hotSide.gas[10].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_hotSide.gas[10].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_hotSide.gas[10].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_hotSide.gas[10].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_hotSide.gas[10].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_hotSide.gas[10].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_hotSide.gas[10].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_hotSide.gas[10].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_hotSide.gas[10].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_hotSide.gas[10].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_hotSide.gas[10].T) "Temperature of medium in [degC]";
  Real PHX.HX_hotSide.gas[10].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_hotSide.gas[10].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_hotSide.Dpfric(quantity = "Pressure", unit = "Pa", displayUnit = "bar") "Pressure drop due to friction";
  Real PHX.HX_hotSide.omega_hyd(quantity = "Length", unit = "m") "Wet perimeter (single tube)";
  Real PHX.HX_hotSide.Kf "Friction factor";
  Real PHX.HX_hotSide.Kfl "Linear friction factor";
  Real PHX.HX_hotSide.dwdt "Time derivative of mass flow rate";
  Real PHX.HX_hotSide.Cf(unit = "1") "Fanning friction factor";
  Real PHX.HX_hotSide.w(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_hotSide.wnom / /*Real*/(PHX.HX_hotSide.Nt)) "Mass flowrate (single tube)";
  Real PHX.HX_hotSide.Ttilde[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_hotSide.Tstart[2], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_hotSide.Ttilde[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_hotSide.Tstart[3], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_hotSide.Ttilde[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_hotSide.Tstart[4], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_hotSide.Ttilde[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_hotSide.Tstart[5], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_hotSide.Ttilde[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_hotSide.Tstart[6], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_hotSide.Ttilde[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_hotSide.Tstart[7], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_hotSide.Ttilde[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_hotSide.Tstart[8], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_hotSide.Ttilde[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_hotSide.Tstart[9], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_hotSide.Ttilde[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_hotSide.Tstart[10], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_hotSide.T[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_hotSide.Tstart[1], nominal = 500.0) "Node temperatures";
  Real PHX.HX_hotSide.T[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_hotSide.Tstart[2], nominal = 500.0) "Node temperatures";
  Real PHX.HX_hotSide.T[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_hotSide.Tstart[3], nominal = 500.0) "Node temperatures";
  Real PHX.HX_hotSide.T[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_hotSide.Tstart[4], nominal = 500.0) "Node temperatures";
  Real PHX.HX_hotSide.T[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_hotSide.Tstart[5], nominal = 500.0) "Node temperatures";
  Real PHX.HX_hotSide.T[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_hotSide.Tstart[6], nominal = 500.0) "Node temperatures";
  Real PHX.HX_hotSide.T[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_hotSide.Tstart[7], nominal = 500.0) "Node temperatures";
  Real PHX.HX_hotSide.T[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_hotSide.Tstart[8], nominal = 500.0) "Node temperatures";
  Real PHX.HX_hotSide.T[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_hotSide.Tstart[9], nominal = 500.0) "Node temperatures";
  Real PHX.HX_hotSide.T[10](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_hotSide.Tstart[10], nominal = 500.0) "Node temperatures";
  Real PHX.HX_hotSide.h[1](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_hotSide.h[2](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_hotSide.h[3](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_hotSide.h[4](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_hotSide.h[5](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_hotSide.h[6](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_hotSide.h[7](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_hotSide.h[8](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_hotSide.h[9](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_hotSide.h[10](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_hotSide.Tin(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_hotSide.Tstartin, nominal = 500.0);
  Real PHX.HX_hotSide.Xtilde[1,1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = PHX.HX_hotSide.Xstart[1], nominal = 0.1, stateSelect = StateSelect.prefer) "Composition state variables";
  Real PHX.HX_hotSide.wbar[1](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_hotSide.wnom / /*Real*/(PHX.HX_hotSide.Nt));
  Real PHX.HX_hotSide.wbar[2](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_hotSide.wnom / /*Real*/(PHX.HX_hotSide.Nt));
  Real PHX.HX_hotSide.wbar[3](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_hotSide.wnom / /*Real*/(PHX.HX_hotSide.Nt));
  Real PHX.HX_hotSide.wbar[4](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_hotSide.wnom / /*Real*/(PHX.HX_hotSide.Nt));
  Real PHX.HX_hotSide.wbar[5](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_hotSide.wnom / /*Real*/(PHX.HX_hotSide.Nt));
  Real PHX.HX_hotSide.wbar[6](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_hotSide.wnom / /*Real*/(PHX.HX_hotSide.Nt));
  Real PHX.HX_hotSide.wbar[7](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_hotSide.wnom / /*Real*/(PHX.HX_hotSide.Nt));
  Real PHX.HX_hotSide.wbar[8](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_hotSide.wnom / /*Real*/(PHX.HX_hotSide.Nt));
  Real PHX.HX_hotSide.wbar[9](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_hotSide.wnom / /*Real*/(PHX.HX_hotSide.Nt));
  Real PHX.HX_hotSide.Q_single[1](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_hotSide.Q_single[2](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_hotSide.Q_single[3](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_hotSide.Q_single[4](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_hotSide.Q_single[5](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_hotSide.Q_single[6](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_hotSide.Q_single[7](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_hotSide.Q_single[8](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_hotSide.Q_single[9](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_hotSide.u[1](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_hotSide.u[2](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_hotSide.u[3](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_hotSide.u[4](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_hotSide.u[5](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_hotSide.u[6](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_hotSide.u[7](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_hotSide.u[8](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_hotSide.u[9](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_hotSide.u[10](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_hotSide.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = PHX.HX_hotSide.pstart, nominal = 1000000.0, stateSelect = StateSelect.prefer);
  Real PHX.HX_hotSide.Tr(quantity = "Time", unit = "s") "Residence time";
  Real PHX.HX_hotSide.M(quantity = "Mass", unit = "kg", min = 0.0) "Gas Mass (single tube)";
  Real PHX.HX_hotSide.Mtot(quantity = "Mass", unit = "kg", min = 0.0) "Gas Mass (total)";
  Real PHX.HX_hotSide.Q(quantity = "Power", unit = "W") "Total heat flow through the wall (all Nt tubes)";
  protected parameter Real PHX.HX_hotSide.l(quantity = "Length", unit = "m") = PHX.HX_hotSide.L / 9.0 "Length of a single volume";
  protected Real PHX.HX_hotSide.rhobar[1](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_hotSide.rhobar[2](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_hotSide.rhobar[3](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_hotSide.rhobar[4](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_hotSide.rhobar[5](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_hotSide.rhobar[6](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_hotSide.rhobar[7](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_hotSide.rhobar[8](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_hotSide.rhobar[9](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_hotSide.vbar[1](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_hotSide.vbar[2](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_hotSide.vbar[3](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_hotSide.vbar[4](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_hotSide.vbar[5](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_hotSide.vbar[6](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_hotSide.vbar[7](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_hotSide.vbar[8](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_hotSide.vbar[9](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_hotSide.drbdp[1](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_hotSide.drbdp[2](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_hotSide.drbdp[3](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_hotSide.drbdp[4](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_hotSide.drbdp[5](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_hotSide.drbdp[6](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_hotSide.drbdp[7](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_hotSide.drbdp[8](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_hotSide.drbdp[9](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_hotSide.drbdT1[1](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_hotSide.drbdT1[2](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_hotSide.drbdT1[3](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_hotSide.drbdT1[4](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_hotSide.drbdT1[5](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_hotSide.drbdT1[6](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_hotSide.drbdT1[7](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_hotSide.drbdT1[8](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_hotSide.drbdT1[9](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_hotSide.drbdT2[1](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_hotSide.drbdT2[2](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_hotSide.drbdT2[3](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_hotSide.drbdT2[4](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_hotSide.drbdT2[5](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_hotSide.drbdT2[6](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_hotSide.drbdT2[7](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_hotSide.drbdT2[8](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_hotSide.drbdT2[9](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_hotSide.drbdX1[1,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_hotSide.drbdX1[2,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_hotSide.drbdX1[3,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_hotSide.drbdX1[4,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_hotSide.drbdX1[5,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_hotSide.drbdX1[6,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_hotSide.drbdX1[7,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_hotSide.drbdX1[8,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_hotSide.drbdX1[9,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_hotSide.drbdX2[1,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_hotSide.drbdX2[2,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_hotSide.drbdX2[3,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_hotSide.drbdX2[4,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_hotSide.drbdX2[5,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_hotSide.drbdX2[6,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_hotSide.drbdX2[7,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_hotSide.drbdX2[8,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_hotSide.drbdX2[9,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_hotSide.cvbar[1](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_hotSide.cvbar[2](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_hotSide.cvbar[3](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_hotSide.cvbar[4](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_hotSide.cvbar[5](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_hotSide.cvbar[6](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_hotSide.cvbar[7](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_hotSide.cvbar[8](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_hotSide.cvbar[9](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_hotSide.dMdt[1](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_hotSide.dMdt[2](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_hotSide.dMdt[3](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_hotSide.dMdt[4](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_hotSide.dMdt[5](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_hotSide.dMdt[6](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_hotSide.dMdt[7](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_hotSide.dMdt[8](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_hotSide.dMdt[9](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_hotSide.cv[1](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_hotSide.cv[2](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_hotSide.cv[3](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_hotSide.cv[4](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_hotSide.cv[5](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_hotSide.cv[6](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_hotSide.cv[7](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_hotSide.cv[8](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_hotSide.cv[9](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_hotSide.cv[10](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_hotSide.dddT[1](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_hotSide.dddT[2](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_hotSide.dddT[3](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_hotSide.dddT[4](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_hotSide.dddT[5](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_hotSide.dddT[6](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_hotSide.dddT[7](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_hotSide.dddT[8](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_hotSide.dddT[9](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_hotSide.dddT[10](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_hotSide.dddp[1](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_hotSide.dddp[2](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_hotSide.dddp[3](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_hotSide.dddp[4](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_hotSide.dddp[5](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_hotSide.dddp[6](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_hotSide.dddp[7](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_hotSide.dddp[8](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_hotSide.dddp[9](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_hotSide.dddp[10](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_hotSide.dddX[1,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_hotSide.dddX[2,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_hotSide.dddX[3,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_hotSide.dddX[4,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_hotSide.dddX[5,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_hotSide.dddX[6,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_hotSide.dddX[7,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_hotSide.dddX[8,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_hotSide.dddX[9,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_hotSide.dddX[10,1](unit = "kg/m3") "Derivative of density by composition";
  final parameter Integer PHX.HX_coldSide.N(min = 2) = 10 "Number of nodes for thermal variables";
  final parameter Integer PHX.HX_coldSide.Nw = 9 "Number of volumes on the wall interface";
  parameter Integer PHX.HX_coldSide.Nt = 1 "Number of tubes in parallel";
  parameter Real PHX.HX_coldSide.L(quantity = "Length", unit = "m", min = 0.0) = PHX.Lhex "Tube length";
  parameter Real PHX.HX_coldSide.H(quantity = "Length", unit = "m") = 0.0 "Elevation of outlet over inlet";
  parameter Real PHX.HX_coldSide.A(quantity = "Area", unit = "m2") = PHX.Ahex "Cross-sectional area (single tube)";
  parameter Real PHX.HX_coldSide.omega(quantity = "Length", unit = "m") = PHX.omegahex "Perimeter of heat transfer surface (single tube)";
  parameter Real PHX.HX_coldSide.Dhyd(quantity = "Length", unit = "m") = PHX.Dihex "Hydraulic Diameter (single tube)";
  parameter Real PHX.HX_coldSide.wnom(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0) = 0.1 "Nominal mass flowrate (total)";
  final parameter enumeration(Kfnom, OpPoint, Cfnom, Colebrook, NoFriction) PHX.HX_coldSide.FFtype = ThermoPower.Choices.Flow1D.FFtypes.Cfnom "Friction Factor Type";
  parameter Real PHX.HX_coldSide.dpnom(quantity = "Pressure", unit = "Pa", displayUnit = "bar") = 1000.0 "Nominal pressure drop";
  parameter Real PHX.HX_coldSide.Kfnom = 0.0 "Nominal hydraulic resistance coefficient";
  parameter Real PHX.HX_coldSide.rhonom(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) = 0.0 "Nominal inlet density";
  parameter Real PHX.HX_coldSide.Cfnom(unit = "1") = PHX.Cfhex "Nominal Fanning friction factor";
  parameter Real PHX.HX_coldSide.e(unit = "1") = 0.0 "Relative roughness (ratio roughness/diameter)";
  parameter Real PHX.HX_coldSide.Kfc = 1.0 "Friction factor correction coefficient";
  final parameter Boolean PHX.HX_coldSide.DynamicMomentum = false "Inertial phenomena accounted for";
  final parameter Boolean PHX.HX_coldSide.UniformComposition = true "Uniform gas composition is assumed";
  final parameter Boolean PHX.HX_coldSide.QuasiStatic = false "Quasi-static model (mass, energy and momentum static balances";
  final parameter enumeration(Middle, Upstream, Downstream) PHX.HX_coldSide.HydraulicCapacitance = ThermoPower.Choices.Flow1D.HCtypes.Downstream "1: Upstream, 2: Downstream";
  final parameter Boolean PHX.HX_coldSide.avoidInletEnthalpyDerivative = true "Avoid inlet enthalpy derivative";
  final parameter Boolean PHX.HX_coldSide.allowFlowReversal = true "= true to allow flow reversal, false restricts to design direction";
  parameter Real PHX.HX_coldSide.pstart(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.pstart_c "Pressure start value";
  parameter Real PHX.HX_coldSide.Tstartbar(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.Tstartbar_c "Avarage temperature start value";
  parameter Real PHX.HX_coldSide.Tstartin(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.Tstartin_c "Inlet temperature start value";
  parameter Real PHX.HX_coldSide.Tstartout(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.Tstartout_c "Outlet temperature start value";
  parameter Real PHX.HX_coldSide.Tstart[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.Tstartin "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_coldSide.Tstart[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.Tstartin + (PHX.HX_coldSide.Tstartout - PHX.HX_coldSide.Tstartin) / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_coldSide.Tstart[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.Tstartin + (PHX.HX_coldSide.Tstartout - PHX.HX_coldSide.Tstartin) * 2.0 / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_coldSide.Tstart[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.Tstartin + (PHX.HX_coldSide.Tstartout - PHX.HX_coldSide.Tstartin) * 3.0 / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_coldSide.Tstart[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.Tstartin + (PHX.HX_coldSide.Tstartout - PHX.HX_coldSide.Tstartin) * 4.0 / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_coldSide.Tstart[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.Tstartin + (PHX.HX_coldSide.Tstartout - PHX.HX_coldSide.Tstartin) * 5.0 / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_coldSide.Tstart[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.Tstartin + (PHX.HX_coldSide.Tstartout - PHX.HX_coldSide.Tstartin) * 6.0 / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_coldSide.Tstart[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.Tstartin + (PHX.HX_coldSide.Tstartout - PHX.HX_coldSide.Tstartin) * 7.0 / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_coldSide.Tstart[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.Tstartin + (PHX.HX_coldSide.Tstartout - PHX.HX_coldSide.Tstartin) * 8.0 / 9.0 "Start value of temperature vector (initialized by default)";
  parameter Real PHX.HX_coldSide.Tstart[10](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.Tstartin + (PHX.HX_coldSide.Tstartout - PHX.HX_coldSide.Tstartin) * 9.0 / 9.0 "Start value of temperature vector (initialized by default)";
  final parameter Real PHX.HX_coldSide.unom(quantity = "Velocity", unit = "m/s") = 10.0 "Nominal velocity for simplified equation";
  parameter Real PHX.HX_coldSide.wnf = 0.01 "Fraction of nominal flow rate at which linear friction equals turbulent friction";
  parameter Real PHX.HX_coldSide.Xstart[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, nominal = 0.1) = 1.0 "Start gas composition";
  final parameter enumeration(noInit, fixedState, steadyState, steadyStateNoP, steadyStateNoT, steadyStateNoPT) PHX.HX_coldSide.initOpt = ThermoPower.Choices.Init.Options.steadyState "Initialisation option";
  final parameter Boolean PHX.HX_coldSide.noInitialPressure = false "Remove initial equation on pressure";
  protected final parameter Integer PHX.HX_coldSide.nXi = 0 "number of independent mass fractions";
  protected final parameter Integer PHX.HX_coldSide.nX = 1 "total number of mass fractions";
  Real PHX.HX_coldSide.infl.m_flow(quantity = "MassFlowRate.Air", unit = "kg/s", min = -9.999999999999999e+59, max = 100000.0, start = PHX.HX_coldSide.wnom) "Mass flow rate from the connection point into the component";
  Real PHX.HX_coldSide.infl.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Thermodynamic pressure in the connection point";
  Real PHX.HX_coldSide.infl.h_outflow(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
  Real PHX.HX_coldSide.outfl.m_flow(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 9.999999999999999e+59, start = -PHX.HX_coldSide.wnom) "Mass flow rate from the connection point into the component";
  Real PHX.HX_coldSide.outfl.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Thermodynamic pressure in the connection point";
  Real PHX.HX_coldSide.outfl.h_outflow(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
  final parameter Integer PHX.HX_coldSide.wall.N = 9 "Number of volumes";
  Real PHX.HX_coldSide.wall.T[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.wall.T[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.wall.T[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.wall.T[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.wall.T[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.wall.T[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.wall.T[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.wall.T[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.wall.T[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.wall.Q[1](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.wall.Q[2](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.wall.Q[3](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.wall.Q[4](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.wall.Q[5](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.wall.Q[6](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.wall.Q[7](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.wall.Q[8](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.wall.Q[9](quantity = "Power", unit = "W") "Heat flow at the volumes";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[1].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_coldSide.gas[1].state.p "Absolute pressure of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[1].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.gas[1].state.T "Temperature of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[2].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_coldSide.gas[2].state.p "Absolute pressure of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[2].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.gas[2].state.T "Temperature of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[3].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_coldSide.gas[3].state.p "Absolute pressure of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[3].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.gas[3].state.T "Temperature of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[4].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_coldSide.gas[4].state.p "Absolute pressure of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[4].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.gas[4].state.T "Temperature of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[5].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_coldSide.gas[5].state.p "Absolute pressure of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[5].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.gas[5].state.T "Temperature of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[6].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_coldSide.gas[6].state.p "Absolute pressure of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[6].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.gas[6].state.T "Temperature of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[7].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_coldSide.gas[7].state.p "Absolute pressure of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[7].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.gas[7].state.T "Temperature of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[8].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_coldSide.gas[8].state.p "Absolute pressure of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[8].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.gas[8].state.T "Temperature of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[9].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_coldSide.gas[9].state.p "Absolute pressure of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[9].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.gas[9].state.T "Temperature of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[10].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = PHX.HX_coldSide.gas[10].state.p "Absolute pressure of medium";
  final Real PHX.HX_coldSide.heatTransfer.fluidState[10].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = PHX.HX_coldSide.gas[10].state.T "Temperature of medium";
  final Real PHX.HX_coldSide.heatTransfer.w[1](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_coldSide.heatTransfer.w[2](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_coldSide.heatTransfer.w[3](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_coldSide.heatTransfer.w[4](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_coldSide.heatTransfer.w[5](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_coldSide.heatTransfer.w[6](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_coldSide.heatTransfer.w[7](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_coldSide.heatTransfer.w[8](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_coldSide.heatTransfer.w[9](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final Real PHX.HX_coldSide.heatTransfer.w[10](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0);
  final parameter Boolean PHX.HX_coldSide.heatTransfer.useAverageTemperature = false "= true to use average temperature for heat transfer";
  final parameter Integer PHX.HX_coldSide.heatTransfer.wall.N = 9 "Number of volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.T[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.T[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.T[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.T[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.T[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.T[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.T[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.T[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.T[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.Q[1](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.Q[2](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.Q[3](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.Q[4](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.Q[5](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.Q[6](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.Q[7](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.Q[8](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.HX_coldSide.heatTransfer.wall.Q[9](quantity = "Power", unit = "W") "Heat flow at the volumes";
  final parameter Integer PHX.HX_coldSide.heatTransfer.Nf(min = 2) = 10 "Number of nodes on the fluid side";
  final parameter Integer PHX.HX_coldSide.heatTransfer.Nw = 9 "Number of volumes on the wall side";
  final parameter Integer PHX.HX_coldSide.heatTransfer.Nt(min = 1) = PHX.HX_coldSide.Nt "Number of tubes in parallel";
  final parameter Real PHX.HX_coldSide.heatTransfer.L(quantity = "Length", unit = "m", min = 0.0) = PHX.HX_coldSide.L "Tube length";
  final parameter Real PHX.HX_coldSide.heatTransfer.A(quantity = "Area", unit = "m2") = PHX.HX_coldSide.A "Cross-sectional area (single tube)";
  final parameter Real PHX.HX_coldSide.heatTransfer.omega(quantity = "Length", unit = "m") = PHX.HX_coldSide.omega "Wet perimeter of heat transfer surface (single tube)";
  final parameter Real PHX.HX_coldSide.heatTransfer.Dhyd(quantity = "Length", unit = "m") = PHX.HX_coldSide.Dhyd "Hydraulic Diameter (single tube)";
  final parameter Real PHX.HX_coldSide.heatTransfer.wnom(quantity = "MassFlowRate", unit = "kg/s") = PHX.HX_coldSide.wnom / /*Real*/(PHX.HX_coldSide.Nt) "Nominal mass flow rate (single tube)";
  final parameter Real PHX.HX_coldSide.heatTransfer.l(quantity = "Length", unit = "m") = PHX.HX_coldSide.heatTransfer.L / 9.0 "Length of a single volume";
  parameter Real PHX.HX_coldSide.heatTransfer.kc(unit = "1") = 1.0 "Correction factor for heat transfer";
  Real PHX.HX_coldSide.heatTransfer.T[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_coldSide.heatTransfer.T[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_coldSide.heatTransfer.T[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_coldSide.heatTransfer.T[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_coldSide.heatTransfer.T[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_coldSide.heatTransfer.T[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_coldSide.heatTransfer.T[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_coldSide.heatTransfer.T[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_coldSide.heatTransfer.T[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_coldSide.heatTransfer.T[10](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures at the fluid side nodes";
  Real PHX.HX_coldSide.heatTransfer.Tw[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Tw[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Tw[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Tw[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Tw[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Tw[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Tw[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Tw[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Tw[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperatures of the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Qw[1](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Qw[2](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Qw[3](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Qw[4](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Qw[5](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Qw[6](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Qw[7](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Qw[8](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Qw[9](quantity = "Power", unit = "W") "Heat flows entering from the wall volumes";
  Real PHX.HX_coldSide.heatTransfer.Qvol[1](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_coldSide.heatTransfer.Qvol[2](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_coldSide.heatTransfer.Qvol[3](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_coldSide.heatTransfer.Qvol[4](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_coldSide.heatTransfer.Qvol[5](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_coldSide.heatTransfer.Qvol[6](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_coldSide.heatTransfer.Qvol[7](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_coldSide.heatTransfer.Qvol[8](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_coldSide.heatTransfer.Qvol[9](quantity = "Power", unit = "W") "Heat flows going to the fluid volumes";
  Real PHX.HX_coldSide.heatTransfer.Q(quantity = "Power", unit = "W") "Total heat flow through lateral boundary";
  parameter Real PHX.HX_coldSide.wnm(unit = "1") = 0.01 "Maximum fraction of the nominal flow rate allowed as reverse flow";
  final parameter Boolean PHX.HX_coldSide.fixedMassFlowSimplified = false "Fix flow rate = wnom for simplified homotopy model";
  Real PHX.HX_coldSide.gas[1].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[1].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_coldSide.gas[1].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_coldSide.gas[1].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_coldSide.gas[1].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_coldSide.gas[1].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_coldSide.gas[1].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_coldSide.gas[1].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_coldSide.gas[1].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[1].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_coldSide.gas[1].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_coldSide.gas[1].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_coldSide.gas[1].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_coldSide.gas[1].T) "Temperature of medium in [degC]";
  Real PHX.HX_coldSide.gas[1].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_coldSide.gas[1].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_coldSide.gas[2].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[2].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_coldSide.gas[2].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_coldSide.gas[2].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_coldSide.gas[2].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_coldSide.gas[2].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_coldSide.gas[2].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_coldSide.gas[2].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_coldSide.gas[2].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[2].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_coldSide.gas[2].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_coldSide.gas[2].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_coldSide.gas[2].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_coldSide.gas[2].T) "Temperature of medium in [degC]";
  Real PHX.HX_coldSide.gas[2].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_coldSide.gas[2].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_coldSide.gas[3].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[3].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_coldSide.gas[3].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_coldSide.gas[3].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_coldSide.gas[3].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_coldSide.gas[3].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_coldSide.gas[3].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_coldSide.gas[3].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_coldSide.gas[3].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[3].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_coldSide.gas[3].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_coldSide.gas[3].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_coldSide.gas[3].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_coldSide.gas[3].T) "Temperature of medium in [degC]";
  Real PHX.HX_coldSide.gas[3].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_coldSide.gas[3].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_coldSide.gas[4].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[4].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_coldSide.gas[4].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_coldSide.gas[4].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_coldSide.gas[4].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_coldSide.gas[4].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_coldSide.gas[4].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_coldSide.gas[4].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_coldSide.gas[4].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[4].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_coldSide.gas[4].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_coldSide.gas[4].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_coldSide.gas[4].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_coldSide.gas[4].T) "Temperature of medium in [degC]";
  Real PHX.HX_coldSide.gas[4].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_coldSide.gas[4].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_coldSide.gas[5].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[5].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_coldSide.gas[5].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_coldSide.gas[5].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_coldSide.gas[5].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_coldSide.gas[5].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_coldSide.gas[5].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_coldSide.gas[5].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_coldSide.gas[5].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[5].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_coldSide.gas[5].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_coldSide.gas[5].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_coldSide.gas[5].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_coldSide.gas[5].T) "Temperature of medium in [degC]";
  Real PHX.HX_coldSide.gas[5].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_coldSide.gas[5].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_coldSide.gas[6].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[6].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_coldSide.gas[6].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_coldSide.gas[6].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_coldSide.gas[6].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_coldSide.gas[6].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_coldSide.gas[6].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_coldSide.gas[6].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_coldSide.gas[6].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[6].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_coldSide.gas[6].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_coldSide.gas[6].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_coldSide.gas[6].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_coldSide.gas[6].T) "Temperature of medium in [degC]";
  Real PHX.HX_coldSide.gas[6].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_coldSide.gas[6].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_coldSide.gas[7].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[7].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_coldSide.gas[7].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_coldSide.gas[7].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_coldSide.gas[7].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_coldSide.gas[7].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_coldSide.gas[7].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_coldSide.gas[7].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_coldSide.gas[7].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[7].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_coldSide.gas[7].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_coldSide.gas[7].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_coldSide.gas[7].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_coldSide.gas[7].T) "Temperature of medium in [degC]";
  Real PHX.HX_coldSide.gas[7].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_coldSide.gas[7].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_coldSide.gas[8].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[8].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_coldSide.gas[8].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_coldSide.gas[8].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_coldSide.gas[8].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_coldSide.gas[8].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_coldSide.gas[8].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_coldSide.gas[8].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_coldSide.gas[8].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[8].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_coldSide.gas[8].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_coldSide.gas[8].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_coldSide.gas[8].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_coldSide.gas[8].T) "Temperature of medium in [degC]";
  Real PHX.HX_coldSide.gas[8].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_coldSide.gas[8].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_coldSide.gas[9].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[9].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_coldSide.gas[9].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_coldSide.gas[9].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_coldSide.gas[9].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_coldSide.gas[9].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_coldSide.gas[9].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_coldSide.gas[9].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_coldSide.gas[9].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[9].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_coldSide.gas[9].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_coldSide.gas[9].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_coldSide.gas[9].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_coldSide.gas[9].T) "Temperature of medium in [degC]";
  Real PHX.HX_coldSide.gas[9].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_coldSide.gas[9].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_coldSide.gas[10].p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[10].h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real PHX.HX_coldSide.gas[10].d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real PHX.HX_coldSide.gas[10].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real PHX.HX_coldSide.gas[10].X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real PHX.HX_coldSide.gas[10].u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real PHX.HX_coldSide.gas[10].R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real PHX.HX_coldSide.gas[10].MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real PHX.HX_coldSide.gas[10].state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real PHX.HX_coldSide.gas[10].state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean PHX.HX_coldSide.gas[10].preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean PHX.HX_coldSide.gas[10].standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real PHX.HX_coldSide.gas[10].T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(PHX.HX_coldSide.gas[10].T) "Temperature of medium in [degC]";
  Real PHX.HX_coldSide.gas[10].p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(PHX.HX_coldSide.gas[10].p) "Absolute pressure of medium in [bar]";
  Real PHX.HX_coldSide.Dpfric(quantity = "Pressure", unit = "Pa", displayUnit = "bar") "Pressure drop due to friction";
  Real PHX.HX_coldSide.omega_hyd(quantity = "Length", unit = "m") "Wet perimeter (single tube)";
  Real PHX.HX_coldSide.Kf "Friction factor";
  Real PHX.HX_coldSide.Kfl "Linear friction factor";
  Real PHX.HX_coldSide.dwdt "Time derivative of mass flow rate";
  Real PHX.HX_coldSide.Cf(unit = "1") "Fanning friction factor";
  Real PHX.HX_coldSide.w(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_coldSide.wnom / /*Real*/(PHX.HX_coldSide.Nt)) "Mass flowrate (single tube)";
  Real PHX.HX_coldSide.Ttilde[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_coldSide.Tstart[2], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_coldSide.Ttilde[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_coldSide.Tstart[3], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_coldSide.Ttilde[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_coldSide.Tstart[4], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_coldSide.Ttilde[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_coldSide.Tstart[5], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_coldSide.Ttilde[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_coldSide.Tstart[6], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_coldSide.Ttilde[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_coldSide.Tstart[7], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_coldSide.Ttilde[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_coldSide.Tstart[8], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_coldSide.Ttilde[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_coldSide.Tstart[9], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_coldSide.Ttilde[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.HX_coldSide.Tstart[10], nominal = 300.0, stateSelect = StateSelect.prefer) "Temperature state variables";
  Real PHX.HX_coldSide.T[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_coldSide.Tstart[1], nominal = 500.0) "Node temperatures";
  Real PHX.HX_coldSide.T[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_coldSide.Tstart[2], nominal = 500.0) "Node temperatures";
  Real PHX.HX_coldSide.T[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_coldSide.Tstart[3], nominal = 500.0) "Node temperatures";
  Real PHX.HX_coldSide.T[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_coldSide.Tstart[4], nominal = 500.0) "Node temperatures";
  Real PHX.HX_coldSide.T[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_coldSide.Tstart[5], nominal = 500.0) "Node temperatures";
  Real PHX.HX_coldSide.T[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_coldSide.Tstart[6], nominal = 500.0) "Node temperatures";
  Real PHX.HX_coldSide.T[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_coldSide.Tstart[7], nominal = 500.0) "Node temperatures";
  Real PHX.HX_coldSide.T[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_coldSide.Tstart[8], nominal = 500.0) "Node temperatures";
  Real PHX.HX_coldSide.T[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_coldSide.Tstart[9], nominal = 500.0) "Node temperatures";
  Real PHX.HX_coldSide.T[10](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_coldSide.Tstart[10], nominal = 500.0) "Node temperatures";
  Real PHX.HX_coldSide.h[1](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_coldSide.h[2](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_coldSide.h[3](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_coldSide.h[4](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_coldSide.h[5](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_coldSide.h[6](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_coldSide.h[7](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_coldSide.h[8](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_coldSide.h[9](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_coldSide.h[10](quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Node specific enthalpies";
  Real PHX.HX_coldSide.Tin(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = PHX.HX_coldSide.Tstartin, nominal = 500.0);
  Real PHX.HX_coldSide.Xtilde[1,1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = PHX.HX_coldSide.Xstart[1], nominal = 0.1, stateSelect = StateSelect.prefer) "Composition state variables";
  Real PHX.HX_coldSide.wbar[1](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_coldSide.wnom / /*Real*/(PHX.HX_coldSide.Nt));
  Real PHX.HX_coldSide.wbar[2](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_coldSide.wnom / /*Real*/(PHX.HX_coldSide.Nt));
  Real PHX.HX_coldSide.wbar[3](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_coldSide.wnom / /*Real*/(PHX.HX_coldSide.Nt));
  Real PHX.HX_coldSide.wbar[4](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_coldSide.wnom / /*Real*/(PHX.HX_coldSide.Nt));
  Real PHX.HX_coldSide.wbar[5](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_coldSide.wnom / /*Real*/(PHX.HX_coldSide.Nt));
  Real PHX.HX_coldSide.wbar[6](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_coldSide.wnom / /*Real*/(PHX.HX_coldSide.Nt));
  Real PHX.HX_coldSide.wbar[7](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_coldSide.wnom / /*Real*/(PHX.HX_coldSide.Nt));
  Real PHX.HX_coldSide.wbar[8](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_coldSide.wnom / /*Real*/(PHX.HX_coldSide.Nt));
  Real PHX.HX_coldSide.wbar[9](quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0, start = PHX.HX_coldSide.wnom / /*Real*/(PHX.HX_coldSide.Nt));
  Real PHX.HX_coldSide.Q_single[1](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_coldSide.Q_single[2](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_coldSide.Q_single[3](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_coldSide.Q_single[4](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_coldSide.Q_single[5](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_coldSide.Q_single[6](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_coldSide.Q_single[7](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_coldSide.Q_single[8](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_coldSide.Q_single[9](quantity = "Power", unit = "W") "Heat flows entering the volumes from the lateral boundary (single tube)";
  Real PHX.HX_coldSide.u[1](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_coldSide.u[2](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_coldSide.u[3](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_coldSide.u[4](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_coldSide.u[5](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_coldSide.u[6](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_coldSide.u[7](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_coldSide.u[8](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_coldSide.u[9](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_coldSide.u[10](quantity = "Velocity", unit = "m/s") "Fluid velocity";
  Real PHX.HX_coldSide.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = PHX.HX_coldSide.pstart, nominal = 1000000.0, stateSelect = StateSelect.prefer);
  Real PHX.HX_coldSide.Tr(quantity = "Time", unit = "s") "Residence time";
  Real PHX.HX_coldSide.M(quantity = "Mass", unit = "kg", min = 0.0) "Gas Mass (single tube)";
  Real PHX.HX_coldSide.Mtot(quantity = "Mass", unit = "kg", min = 0.0) "Gas Mass (total)";
  Real PHX.HX_coldSide.Q(quantity = "Power", unit = "W") "Total heat flow through the wall (all Nt tubes)";
  protected parameter Real PHX.HX_coldSide.l(quantity = "Length", unit = "m") = PHX.HX_coldSide.L / 9.0 "Length of a single volume";
  protected Real PHX.HX_coldSide.rhobar[1](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_coldSide.rhobar[2](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_coldSide.rhobar[3](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_coldSide.rhobar[4](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_coldSide.rhobar[5](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_coldSide.rhobar[6](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_coldSide.rhobar[7](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_coldSide.rhobar[8](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_coldSide.rhobar[9](quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Fluid average density";
  protected Real PHX.HX_coldSide.vbar[1](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_coldSide.vbar[2](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_coldSide.vbar[3](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_coldSide.vbar[4](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_coldSide.vbar[5](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_coldSide.vbar[6](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_coldSide.vbar[7](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_coldSide.vbar[8](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_coldSide.vbar[9](quantity = "SpecificVolume", unit = "m3/kg", min = 0.0) "Fluid average specific volume";
  protected Real PHX.HX_coldSide.drbdp[1](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_coldSide.drbdp[2](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_coldSide.drbdp[3](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_coldSide.drbdp[4](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_coldSide.drbdp[5](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_coldSide.drbdp[6](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_coldSide.drbdp[7](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_coldSide.drbdp[8](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_coldSide.drbdp[9](unit = "s2/m2") "Derivative of average density by pressure";
  protected Real PHX.HX_coldSide.drbdT1[1](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_coldSide.drbdT1[2](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_coldSide.drbdT1[3](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_coldSide.drbdT1[4](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_coldSide.drbdT1[5](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_coldSide.drbdT1[6](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_coldSide.drbdT1[7](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_coldSide.drbdT1[8](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_coldSide.drbdT1[9](unit = "kg/(m3.K)") "Derivative of average density by left temperature";
  protected Real PHX.HX_coldSide.drbdT2[1](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_coldSide.drbdT2[2](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_coldSide.drbdT2[3](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_coldSide.drbdT2[4](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_coldSide.drbdT2[5](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_coldSide.drbdT2[6](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_coldSide.drbdT2[7](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_coldSide.drbdT2[8](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_coldSide.drbdT2[9](unit = "kg/(m3.K)") "Derivative of average density by right temperature";
  protected Real PHX.HX_coldSide.drbdX1[1,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_coldSide.drbdX1[2,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_coldSide.drbdX1[3,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_coldSide.drbdX1[4,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_coldSide.drbdX1[5,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_coldSide.drbdX1[6,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_coldSide.drbdX1[7,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_coldSide.drbdX1[8,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_coldSide.drbdX1[9,1](unit = "kg/m3") "Derivative of average density by left composition";
  protected Real PHX.HX_coldSide.drbdX2[1,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_coldSide.drbdX2[2,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_coldSide.drbdX2[3,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_coldSide.drbdX2[4,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_coldSide.drbdX2[5,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_coldSide.drbdX2[6,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_coldSide.drbdX2[7,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_coldSide.drbdX2[8,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_coldSide.drbdX2[9,1](unit = "kg/m3") "Derivative of average density by right composition";
  protected Real PHX.HX_coldSide.cvbar[1](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_coldSide.cvbar[2](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_coldSide.cvbar[3](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_coldSide.cvbar[4](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_coldSide.cvbar[5](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_coldSide.cvbar[6](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_coldSide.cvbar[7](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_coldSide.cvbar[8](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_coldSide.cvbar[9](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Average cv";
  protected Real PHX.HX_coldSide.dMdt[1](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_coldSide.dMdt[2](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_coldSide.dMdt[3](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_coldSide.dMdt[4](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_coldSide.dMdt[5](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_coldSide.dMdt[6](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_coldSide.dMdt[7](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_coldSide.dMdt[8](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_coldSide.dMdt[9](quantity = "MassFlowRate", unit = "kg/s") "Derivative of mass in a finite volume";
  protected Real PHX.HX_coldSide.cv[1](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_coldSide.cv[2](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_coldSide.cv[3](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_coldSide.cv[4](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_coldSide.cv[5](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_coldSide.cv[6](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_coldSide.cv[7](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_coldSide.cv[8](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_coldSide.cv[9](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_coldSide.cv[10](quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
  protected Real PHX.HX_coldSide.dddT[1](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_coldSide.dddT[2](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_coldSide.dddT[3](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_coldSide.dddT[4](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_coldSide.dddT[5](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_coldSide.dddT[6](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_coldSide.dddT[7](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_coldSide.dddT[8](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_coldSide.dddT[9](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_coldSide.dddT[10](unit = "kg/(m3.K)") "Derivative of density by temperature";
  protected Real PHX.HX_coldSide.dddp[1](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_coldSide.dddp[2](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_coldSide.dddp[3](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_coldSide.dddp[4](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_coldSide.dddp[5](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_coldSide.dddp[6](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_coldSide.dddp[7](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_coldSide.dddp[8](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_coldSide.dddp[9](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_coldSide.dddp[10](unit = "s2/m2") "Derivative of density by pressure";
  protected Real PHX.HX_coldSide.dddX[1,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_coldSide.dddX[2,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_coldSide.dddX[3,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_coldSide.dddX[4,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_coldSide.dddX[5,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_coldSide.dddX[6,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_coldSide.dddX[7,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_coldSide.dddX[8,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_coldSide.dddX[9,1](unit = "kg/m3") "Derivative of density by composition";
  protected Real PHX.HX_coldSide.dddX[10,1](unit = "kg/m3") "Derivative of density by composition";
  final parameter Integer PHX.metalTubeFV.Nw = 9 "Number of volumes on the wall ports";
  parameter Integer PHX.metalTubeFV.Nt = PHX.Nt "Number of tubes in parallel";
  parameter Real PHX.metalTubeFV.L(quantity = "Length", unit = "m") = PHX.Lhex "Tube length";
  parameter Real PHX.metalTubeFV.rint(quantity = "Length", unit = "m") = PHX.rint "Internal radius (single tube)";
  parameter Real PHX.metalTubeFV.rext(quantity = "Length", unit = "m") = PHX.rext "External radius (single tube)";
  parameter Real PHX.metalTubeFV.rhomcm = PHX.rhomcm "Metal heat capacity per unit volume [J/m^3.K]";
  parameter Real PHX.metalTubeFV.lambda(quantity = "ThermalConductivity", unit = "W/(m.K)") = PHX.lambda "Thermal conductivity";
  final parameter Boolean PHX.metalTubeFV.WallRes = true "Wall thermal resistance accounted for";
  parameter Real PHX.metalTubeFV.Tstartbar(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = PHX.Tstartbar_wall "Avarage temperature";
  parameter Real PHX.metalTubeFV.Tstart1(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = PHX.Tstart1_w "Temperature start value - first volume";
  parameter Real PHX.metalTubeFV.TstartN(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = PHX.TstartN_w "Temperature start value - last volume";
  parameter Real PHX.metalTubeFV.Tvolstart[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = ThermoPower.Functions.linspaceExt(PHX.metalTubeFV.Tstart1, PHX.metalTubeFV.TstartN, 9)[1];
  parameter Real PHX.metalTubeFV.Tvolstart[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = ThermoPower.Functions.linspaceExt(PHX.metalTubeFV.Tstart1, PHX.metalTubeFV.TstartN, 9)[2];
  parameter Real PHX.metalTubeFV.Tvolstart[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = ThermoPower.Functions.linspaceExt(PHX.metalTubeFV.Tstart1, PHX.metalTubeFV.TstartN, 9)[3];
  parameter Real PHX.metalTubeFV.Tvolstart[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = ThermoPower.Functions.linspaceExt(PHX.metalTubeFV.Tstart1, PHX.metalTubeFV.TstartN, 9)[4];
  parameter Real PHX.metalTubeFV.Tvolstart[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = ThermoPower.Functions.linspaceExt(PHX.metalTubeFV.Tstart1, PHX.metalTubeFV.TstartN, 9)[5];
  parameter Real PHX.metalTubeFV.Tvolstart[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = ThermoPower.Functions.linspaceExt(PHX.metalTubeFV.Tstart1, PHX.metalTubeFV.TstartN, 9)[6];
  parameter Real PHX.metalTubeFV.Tvolstart[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = ThermoPower.Functions.linspaceExt(PHX.metalTubeFV.Tstart1, PHX.metalTubeFV.TstartN, 9)[7];
  parameter Real PHX.metalTubeFV.Tvolstart[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = ThermoPower.Functions.linspaceExt(PHX.metalTubeFV.Tstart1, PHX.metalTubeFV.TstartN, 9)[8];
  parameter Real PHX.metalTubeFV.Tvolstart[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = ThermoPower.Functions.linspaceExt(PHX.metalTubeFV.Tstart1, PHX.metalTubeFV.TstartN, 9)[9];
  final parameter enumeration(noInit, fixedState, steadyState, steadyStateNoP, steadyStateNoT, steadyStateNoPT) PHX.metalTubeFV.initOpt = ThermoPower.Choices.Init.Options.fixedState "Initialisation option";
  constant Real PHX.metalTubeFV.pi = 3.141592653589793;
  final parameter Real PHX.metalTubeFV.Am(quantity = "Area", unit = "m2") = (PHX.metalTubeFV.rext ^ 2.0 - PHX.metalTubeFV.rint ^ 2.0) * 3.141592653589793 "Area of the metal tube cross-section";
  final parameter Real PHX.metalTubeFV.Cm(quantity = "HeatCapacity", unit = "J/K") = /*Real*/(PHX.metalTubeFV.Nt) * PHX.metalTubeFV.L * PHX.metalTubeFV.Am * PHX.metalTubeFV.rhomcm "Total heat capacity";
  Real PHX.metalTubeFV.Tvol[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[1], nominal = 300.0) "Volume temperatures";
  Real PHX.metalTubeFV.Tvol[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[2], nominal = 300.0) "Volume temperatures";
  Real PHX.metalTubeFV.Tvol[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[3], nominal = 300.0) "Volume temperatures";
  Real PHX.metalTubeFV.Tvol[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[4], nominal = 300.0) "Volume temperatures";
  Real PHX.metalTubeFV.Tvol[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[5], nominal = 300.0) "Volume temperatures";
  Real PHX.metalTubeFV.Tvol[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[6], nominal = 300.0) "Volume temperatures";
  Real PHX.metalTubeFV.Tvol[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[7], nominal = 300.0) "Volume temperatures";
  Real PHX.metalTubeFV.Tvol[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[8], nominal = 300.0) "Volume temperatures";
  Real PHX.metalTubeFV.Tvol[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[9], nominal = 300.0) "Volume temperatures";
  final parameter Integer PHX.metalTubeFV.int.N = 9 "Number of volumes";
  Real PHX.metalTubeFV.int.T[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[1], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.int.T[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[2], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.int.T[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[3], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.int.T[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[4], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.int.T[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[5], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.int.T[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[6], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.int.T[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[7], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.int.T[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[8], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.int.T[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[9], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.int.Q[1](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.int.Q[2](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.int.Q[3](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.int.Q[4](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.int.Q[5](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.int.Q[6](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.int.Q[7](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.int.Q[8](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.int.Q[9](quantity = "Power", unit = "W") "Heat flow at the volumes";
  final parameter Integer PHX.metalTubeFV.ext.N = 9 "Number of volumes";
  Real PHX.metalTubeFV.ext.T[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[1], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.ext.T[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[2], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.ext.T[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[3], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.ext.T[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[4], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.ext.T[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[5], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.ext.T[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[6], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.ext.T[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[7], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.ext.T[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[8], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.ext.T[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = PHX.metalTubeFV.Tvolstart[9], nominal = 300.0) "Temperature at the volumes";
  Real PHX.metalTubeFV.ext.Q[1](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.ext.Q[2](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.ext.Q[3](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.ext.Q[4](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.ext.Q[5](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.ext.Q[6](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.ext.Q[7](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.ext.Q[8](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.metalTubeFV.ext.Q[9](quantity = "Power", unit = "W") "Heat flow at the volumes";
  final parameter Integer PHX.heatExchangerTopologyFV.Nw = 9 "Number of volumes";
  final parameter Integer PHX.heatExchangerTopologyFV.HET.Nw = 9 "Number of volumes on both sides";
  final parameter Integer PHX.heatExchangerTopologyFV.HET.correspondingVolumes[1] = 1 "Indeces of corresponding volumes";
  final parameter Integer PHX.heatExchangerTopologyFV.HET.correspondingVolumes[2] = 2 "Indeces of corresponding volumes";
  final parameter Integer PHX.heatExchangerTopologyFV.HET.correspondingVolumes[3] = 3 "Indeces of corresponding volumes";
  final parameter Integer PHX.heatExchangerTopologyFV.HET.correspondingVolumes[4] = 4 "Indeces of corresponding volumes";
  final parameter Integer PHX.heatExchangerTopologyFV.HET.correspondingVolumes[5] = 5 "Indeces of corresponding volumes";
  final parameter Integer PHX.heatExchangerTopologyFV.HET.correspondingVolumes[6] = 6 "Indeces of corresponding volumes";
  final parameter Integer PHX.heatExchangerTopologyFV.HET.correspondingVolumes[7] = 7 "Indeces of corresponding volumes";
  final parameter Integer PHX.heatExchangerTopologyFV.HET.correspondingVolumes[8] = 8 "Indeces of corresponding volumes";
  final parameter Integer PHX.heatExchangerTopologyFV.HET.correspondingVolumes[9] = 9 "Indeces of corresponding volumes";
  final parameter Integer PHX.heatExchangerTopologyFV.side1.N = 9 "Number of volumes";
  Real PHX.heatExchangerTopologyFV.side1.T[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.T[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.T[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.T[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.T[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.T[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.T[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.T[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.T[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.Q[1](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.Q[2](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.Q[3](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.Q[4](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.Q[5](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.Q[6](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.Q[7](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.Q[8](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side1.Q[9](quantity = "Power", unit = "W") "Heat flow at the volumes";
  final parameter Integer PHX.heatExchangerTopologyFV.side2.N = 9 "Number of volumes";
  Real PHX.heatExchangerTopologyFV.side2.T[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.T[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.T[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.T[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.T[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.T[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.T[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.T[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.T[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.Q[1](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.Q[2](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.Q[3](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.Q[4](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.Q[5](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.Q[6](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.Q[7](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.Q[8](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real PHX.heatExchangerTopologyFV.side2.Q[9](quantity = "Power", unit = "W") "Heat flow at the volumes";
  Real sourceP_BAin.gas.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, start = sourceP_BAin.p0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real sourceP_BAin.gas.h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real sourceP_BAin.gas.d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real sourceP_BAin.gas.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = sourceP_BAin.T, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real sourceP_BAin.gas.X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real sourceP_BAin.gas.u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real sourceP_BAin.gas.R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real sourceP_BAin.gas.MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real sourceP_BAin.gas.state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real sourceP_BAin.gas.state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean sourceP_BAin.gas.preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean sourceP_BAin.gas.standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real sourceP_BAin.gas.T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(sourceP_BAin.gas.T) "Temperature of medium in [degC]";
  Real sourceP_BAin.gas.p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(sourceP_BAin.gas.p) "Absolute pressure of medium in [bar]";
  parameter Real sourceP_BAin.p0(quantity = "Pressure", unit = "Pa", displayUnit = "bar") = 101325.0 "Nominal pressure";
  final parameter Real sourceP_BAin.R(quantity = "HydraulicResistance", unit = "Pa/(kg/s)") = 0.0 "Hydraulic resistance";
  parameter Real sourceP_BAin.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = 300.0 "Nominal temperature";
  parameter Real sourceP_BAin.Xnom[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, nominal = 0.1) = 1.0 "Nominal gas composition";
  final parameter Boolean sourceP_BAin.allowFlowReversal = true "= true to allow flow reversal, false restricts to design direction";
  final parameter Boolean sourceP_BAin.use_in_p0 = true "Use connector input for the pressure";
  final parameter Boolean sourceP_BAin.use_in_T = true "Use connector input for the temperature";
  final parameter Boolean sourceP_BAin.use_in_X = false "Use connector input for the composition";
  Real sourceP_BAin.flange.m_flow(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 9.999999999999999e+59) "Mass flow rate from the connection point into the component";
  Real sourceP_BAin.flange.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Thermodynamic pressure in the connection point";
  Real sourceP_BAin.flange.h_outflow(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
  Real sourceP_BAin.in_p0;
  Real sourceP_BAin.in_T;
  protected Real sourceP_BAin.in_p0_internal;
  protected Real sourceP_BAin.in_T_internal;
  protected Real sourceP_BAin.in_X_internal[1];
  Real sinkP_RA_PHXout.gas.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, start = sinkP_RA_PHXout.p0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real sinkP_RA_PHXout.gas.h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real sinkP_RA_PHXout.gas.d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real sinkP_RA_PHXout.gas.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = sinkP_RA_PHXout.T, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real sinkP_RA_PHXout.gas.X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real sinkP_RA_PHXout.gas.u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real sinkP_RA_PHXout.gas.R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real sinkP_RA_PHXout.gas.MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real sinkP_RA_PHXout.gas.state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real sinkP_RA_PHXout.gas.state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean sinkP_RA_PHXout.gas.preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean sinkP_RA_PHXout.gas.standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real sinkP_RA_PHXout.gas.T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(sinkP_RA_PHXout.gas.T) "Temperature of medium in [degC]";
  Real sinkP_RA_PHXout.gas.p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(sinkP_RA_PHXout.gas.p) "Absolute pressure of medium in [bar]";
  parameter Real sinkP_RA_PHXout.p0(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = 101325.0 "Nominal pressure";
  parameter Real sinkP_RA_PHXout.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = 300.0 "Nominal temperature";
  parameter Real sinkP_RA_PHXout.Xnom[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, nominal = 0.1) = 1.0 "Nominal gas composition";
  final parameter Real sinkP_RA_PHXout.R(quantity = "HydraulicResistance", unit = "Pa/(kg/s)") = 0.0 "Hydraulic Resistance";
  final parameter Boolean sinkP_RA_PHXout.allowFlowReversal = true "= true to allow flow reversal, false restricts to design direction";
  final parameter Boolean sinkP_RA_PHXout.use_in_p0 = true "Use connector input for the pressure";
  final parameter Boolean sinkP_RA_PHXout.use_in_T = false "Use connector input for the temperature";
  final parameter Boolean sinkP_RA_PHXout.use_in_X = false "Use connector input for the composition";
  Real sinkP_RA_PHXout.flange.m_flow(quantity = "MassFlowRate.Air", unit = "kg/s", min = -9.999999999999999e+59, max = 100000.0) "Mass flow rate from the connection point into the component";
  Real sinkP_RA_PHXout.flange.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Thermodynamic pressure in the connection point";
  Real sinkP_RA_PHXout.flange.h_outflow(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
  Real sinkP_RA_PHXout.in_p0;
  protected Real sinkP_RA_PHXout.in_p0_internal;
  protected Real sinkP_RA_PHXout.in_T_internal;
  protected Real sinkP_RA_PHXout.in_X_internal[1];
  Real sourceMassFlow_RA_PHXin.gas.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, start = sourceMassFlow_RA_PHXin.p0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real sourceMassFlow_RA_PHXin.gas.h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real sourceMassFlow_RA_PHXin.gas.d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real sourceMassFlow_RA_PHXin.gas.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = sourceMassFlow_RA_PHXin.T, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real sourceMassFlow_RA_PHXin.gas.X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real sourceMassFlow_RA_PHXin.gas.u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real sourceMassFlow_RA_PHXin.gas.R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real sourceMassFlow_RA_PHXin.gas.MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real sourceMassFlow_RA_PHXin.gas.state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real sourceMassFlow_RA_PHXin.gas.state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean sourceMassFlow_RA_PHXin.gas.preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean sourceMassFlow_RA_PHXin.gas.standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real sourceMassFlow_RA_PHXin.gas.T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(sourceMassFlow_RA_PHXin.gas.T) "Temperature of medium in [degC]";
  Real sourceMassFlow_RA_PHXin.gas.p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(sourceMassFlow_RA_PHXin.gas.p) "Absolute pressure of medium in [bar]";
  parameter Real sourceMassFlow_RA_PHXin.p0(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = 101325.0 "Nominal pressure";
  parameter Real sourceMassFlow_RA_PHXin.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = 300.0 "Nominal temperature";
  parameter Real sourceMassFlow_RA_PHXin.Xnom[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, nominal = 0.1) = 1.0 "Nominal gas composition";
  parameter Real sourceMassFlow_RA_PHXin.w0(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0) = whex_cold "Nominal mass flowrate";
  final parameter Real sourceMassFlow_RA_PHXin.G(quantity = "HydraulicConductance", unit = "(kg/s)/Pa") = 0.0 "HydraulicConductance";
  final parameter Boolean sourceMassFlow_RA_PHXin.allowFlowReversal = true "= true to allow flow reversal, false restricts to design direction";
  final parameter Boolean sourceMassFlow_RA_PHXin.use_in_w0 = false "Use connector input for the nominal flow rate";
  final parameter Boolean sourceMassFlow_RA_PHXin.use_in_T = true "Use connector input for the temperature";
  final parameter Boolean sourceMassFlow_RA_PHXin.use_in_X = false "Use connector input for the composition";
  Real sourceMassFlow_RA_PHXin.w(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 100000.0) "Nominal mass flow rate";
  Real sourceMassFlow_RA_PHXin.flange.m_flow(quantity = "MassFlowRate.Air", unit = "kg/s", min = -100000.0, max = 9.999999999999999e+59) "Mass flow rate from the connection point into the component";
  Real sourceMassFlow_RA_PHXin.flange.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Thermodynamic pressure in the connection point";
  Real sourceMassFlow_RA_PHXin.flange.h_outflow(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
  Real sourceMassFlow_RA_PHXin.in_T;
  protected Real sourceMassFlow_RA_PHXin.in_w0_internal;
  protected Real sourceMassFlow_RA_PHXin.in_T_internal;
  protected Real sourceMassFlow_RA_PHXin.in_X_internal[1];
  Real sinkP_PACKout.gas.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, start = sinkP_PACKout.p0, nominal = 100000.0, stateSelect = StateSelect.default) "Absolute pressure of medium";
  Real sinkP_PACKout.gas.h(quantity = "SpecificEnergy", unit = "J/kg") "Specific enthalpy of medium";
  Real sinkP_PACKout.gas.d(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0) "Density of medium";
  Real sinkP_PACKout.gas.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = sinkP_PACKout.T, nominal = 500.0, stateSelect = StateSelect.default) "Temperature of medium";
  Real sinkP_PACKout.gas.X[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Real sinkP_PACKout.gas.u(quantity = "SpecificEnergy", unit = "J/kg", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) "Specific internal energy of medium";
  Real sinkP_PACKout.gas.R(quantity = "SpecificHeatCapacity", unit = "J/(kg.K)", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) "Gas constant (of mixture if applicable)";
  Real sinkP_PACKout.gas.MM(quantity = "MolarMass", unit = "kg/mol", min = 0.001, max = 0.25, nominal = 0.032) "Molar mass (of mixture or single fluid)";
  Real sinkP_PACKout.gas.state.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Absolute pressure of medium";
  Real sinkP_PACKout.gas.state.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) "Temperature of medium";
  final parameter Boolean sinkP_PACKout.gas.preferredMediumStates = false "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
  final parameter Boolean sinkP_PACKout.gas.standardOrderComponents = true "If true, and reducedX = true, the last element of X will be computed from the other ones";
  Real sinkP_PACKout.gas.T_degC(quantity = "ThermodynamicTemperature", unit = "degC") = Modelica.SIunits.Conversions.to_degC(sinkP_PACKout.gas.T) "Temperature of medium in [degC]";
  Real sinkP_PACKout.gas.p_bar(quantity = "Pressure", unit = "bar") = Modelica.SIunits.Conversions.to_bar(sinkP_PACKout.gas.p) "Absolute pressure of medium in [bar]";
  parameter Real sinkP_PACKout.p0(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) = 101325.0 "Nominal pressure";
  parameter Real sinkP_PACKout.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) = 300.0 "Nominal temperature";
  parameter Real sinkP_PACKout.Xnom[1](quantity = "MassFraction", unit = "kg/kg", min = 0.0, max = 1.0, nominal = 0.1) = 1.0 "Nominal gas composition";
  final parameter Real sinkP_PACKout.R(quantity = "HydraulicResistance", unit = "Pa/(kg/s)") = 0.0 "Hydraulic Resistance";
  final parameter Boolean sinkP_PACKout.allowFlowReversal = true "= true to allow flow reversal, false restricts to design direction";
  final parameter Boolean sinkP_PACKout.use_in_p0 = false "Use connector input for the pressure";
  final parameter Boolean sinkP_PACKout.use_in_T = false "Use connector input for the temperature";
  final parameter Boolean sinkP_PACKout.use_in_X = false "Use connector input for the composition";
  Real sinkP_PACKout.flange.m_flow(quantity = "MassFlowRate.Air", unit = "kg/s", min = -9.999999999999999e+59, max = 100000.0) "Mass flow rate from the connection point into the component";
  Real sinkP_PACKout.flange.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) "Thermodynamic pressure in the connection point";
  Real sinkP_PACKout.flange.h_outflow(quantity = "SpecificEnergy", unit = "J/kg", min = -10000000000.0, max = 10000000000.0, start = 298609.6803431054, nominal = 100000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
  protected Real sinkP_PACKout.in_p0_internal;
  protected Real sinkP_PACKout.in_T_internal;
  protected Real sinkP_PACKout.in_X_internal[1];
  protected parameter Real J_shaft(quantity = "MomentOfInertia", unit = "kg.m2") = 200.0;
  protected parameter Real w0(quantity = "AngularVelocity", unit = "rad/s") = 523.3;
initial equation
  der(PHX.HX_hotSide.p) = 0.0;
  der(PHX.HX_hotSide.Ttilde[1]) = 0.0;
  der(PHX.HX_hotSide.Ttilde[2]) = 0.0;
  der(PHX.HX_hotSide.Ttilde[3]) = 0.0;
  der(PHX.HX_hotSide.Ttilde[4]) = 0.0;
  der(PHX.HX_hotSide.Ttilde[5]) = 0.0;
  der(PHX.HX_hotSide.Ttilde[6]) = 0.0;
  der(PHX.HX_hotSide.Ttilde[7]) = 0.0;
  der(PHX.HX_hotSide.Ttilde[8]) = 0.0;
  der(PHX.HX_hotSide.Ttilde[9]) = 0.0;
  assert(PHX.HX_hotSide.wnom > 0.0, "Please set a positive value for wnom");
  assert(PHX.HX_hotSide.dpnom > 0.0, "dpnom=0 not valid, it is also used in the homotopy trasformation during the inizialization");
  assert(not (not PHX.HX_hotSide.Cfnom > 0.0), "Cfnom = 0 not valid, please set a positive value");
  der(PHX.HX_coldSide.p) = 0.0;
  der(PHX.HX_coldSide.Ttilde[1]) = 0.0;
  der(PHX.HX_coldSide.Ttilde[2]) = 0.0;
  der(PHX.HX_coldSide.Ttilde[3]) = 0.0;
  der(PHX.HX_coldSide.Ttilde[4]) = 0.0;
  der(PHX.HX_coldSide.Ttilde[5]) = 0.0;
  der(PHX.HX_coldSide.Ttilde[6]) = 0.0;
  der(PHX.HX_coldSide.Ttilde[7]) = 0.0;
  der(PHX.HX_coldSide.Ttilde[8]) = 0.0;
  der(PHX.HX_coldSide.Ttilde[9]) = 0.0;
  assert(PHX.HX_coldSide.wnom > 0.0, "Please set a positive value for wnom");
  assert(PHX.HX_coldSide.dpnom > 0.0, "dpnom=0 not valid, it is also used in the homotopy trasformation during the inizialization");
  assert(not (not PHX.HX_coldSide.Cfnom > 0.0), "Cfnom = 0 not valid, please set a positive value");
  PHX.metalTubeFV.Tvol[1] = PHX.metalTubeFV.Tvolstart[1];
  PHX.metalTubeFV.Tvol[2] = PHX.metalTubeFV.Tvolstart[2];
  PHX.metalTubeFV.Tvol[3] = PHX.metalTubeFV.Tvolstart[3];
  PHX.metalTubeFV.Tvol[4] = PHX.metalTubeFV.Tvolstart[4];
  PHX.metalTubeFV.Tvol[5] = PHX.metalTubeFV.Tvolstart[5];
  PHX.metalTubeFV.Tvol[6] = PHX.metalTubeFV.Tvolstart[6];
  PHX.metalTubeFV.Tvol[7] = PHX.metalTubeFV.Tvolstart[7];
  PHX.metalTubeFV.Tvol[8] = PHX.metalTubeFV.Tvolstart[8];
  PHX.metalTubeFV.Tvol[9] = PHX.metalTubeFV.Tvolstart[9];
equation
  PHX.HX_hotSide.wall.T[1] = PHX.HX_hotSide.heatTransfer.wall.T[1];
  PHX.HX_hotSide.wall.T[2] = PHX.HX_hotSide.heatTransfer.wall.T[2];
  PHX.HX_hotSide.wall.T[3] = PHX.HX_hotSide.heatTransfer.wall.T[3];
  PHX.HX_hotSide.wall.T[4] = PHX.HX_hotSide.heatTransfer.wall.T[4];
  PHX.HX_hotSide.wall.T[5] = PHX.HX_hotSide.heatTransfer.wall.T[5];
  PHX.HX_hotSide.wall.T[6] = PHX.HX_hotSide.heatTransfer.wall.T[6];
  PHX.HX_hotSide.wall.T[7] = PHX.HX_hotSide.heatTransfer.wall.T[7];
  PHX.HX_hotSide.wall.T[8] = PHX.HX_hotSide.heatTransfer.wall.T[8];
  PHX.HX_hotSide.wall.T[9] = PHX.HX_hotSide.heatTransfer.wall.T[9];
  PHX.HX_hotSide.heatTransfer.wall.Q[1] - PHX.HX_hotSide.wall.Q[1] = 0.0;
  PHX.HX_hotSide.heatTransfer.wall.Q[2] - PHX.HX_hotSide.wall.Q[2] = 0.0;
  PHX.HX_hotSide.heatTransfer.wall.Q[3] - PHX.HX_hotSide.wall.Q[3] = 0.0;
  PHX.HX_hotSide.heatTransfer.wall.Q[4] - PHX.HX_hotSide.wall.Q[4] = 0.0;
  PHX.HX_hotSide.heatTransfer.wall.Q[5] - PHX.HX_hotSide.wall.Q[5] = 0.0;
  PHX.HX_hotSide.heatTransfer.wall.Q[6] - PHX.HX_hotSide.wall.Q[6] = 0.0;
  PHX.HX_hotSide.heatTransfer.wall.Q[7] - PHX.HX_hotSide.wall.Q[7] = 0.0;
  PHX.HX_hotSide.heatTransfer.wall.Q[8] - PHX.HX_hotSide.wall.Q[8] = 0.0;
  PHX.HX_hotSide.heatTransfer.wall.Q[9] - PHX.HX_hotSide.wall.Q[9] = 0.0;
  PHX.HX_coldSide.wall.T[1] = PHX.HX_coldSide.heatTransfer.wall.T[1];
  PHX.HX_coldSide.wall.T[2] = PHX.HX_coldSide.heatTransfer.wall.T[2];
  PHX.HX_coldSide.wall.T[3] = PHX.HX_coldSide.heatTransfer.wall.T[3];
  PHX.HX_coldSide.wall.T[4] = PHX.HX_coldSide.heatTransfer.wall.T[4];
  PHX.HX_coldSide.wall.T[5] = PHX.HX_coldSide.heatTransfer.wall.T[5];
  PHX.HX_coldSide.wall.T[6] = PHX.HX_coldSide.heatTransfer.wall.T[6];
  PHX.HX_coldSide.wall.T[7] = PHX.HX_coldSide.heatTransfer.wall.T[7];
  PHX.HX_coldSide.wall.T[8] = PHX.HX_coldSide.heatTransfer.wall.T[8];
  PHX.HX_coldSide.wall.T[9] = PHX.HX_coldSide.heatTransfer.wall.T[9];
  PHX.HX_coldSide.heatTransfer.wall.Q[1] - PHX.HX_coldSide.wall.Q[1] = 0.0;
  PHX.HX_coldSide.heatTransfer.wall.Q[2] - PHX.HX_coldSide.wall.Q[2] = 0.0;
  PHX.HX_coldSide.heatTransfer.wall.Q[3] - PHX.HX_coldSide.wall.Q[3] = 0.0;
  PHX.HX_coldSide.heatTransfer.wall.Q[4] - PHX.HX_coldSide.wall.Q[4] = 0.0;
  PHX.HX_coldSide.heatTransfer.wall.Q[5] - PHX.HX_coldSide.wall.Q[5] = 0.0;
  PHX.HX_coldSide.heatTransfer.wall.Q[6] - PHX.HX_coldSide.wall.Q[6] = 0.0;
  PHX.HX_coldSide.heatTransfer.wall.Q[7] - PHX.HX_coldSide.wall.Q[7] = 0.0;
  PHX.HX_coldSide.heatTransfer.wall.Q[8] - PHX.HX_coldSide.wall.Q[8] = 0.0;
  PHX.HX_coldSide.heatTransfer.wall.Q[9] - PHX.HX_coldSide.wall.Q[9] = 0.0;
  PHX.infl_1.p = PHX.HX_coldSide.infl.p;
  PHX.HX_coldSide.infl.m_flow - PHX.infl_1.m_flow = 0.0;
  PHX.infl_1.h_outflow = PHX.HX_coldSide.infl.h_outflow;
  PHX.HX_coldSide.outfl.p = PHX.outfl_1.p;
  PHX.HX_coldSide.outfl.h_outflow = PHX.outfl_1.h_outflow;
  PHX.infl_2.p = PHX.HX_hotSide.infl.p;
  PHX.HX_hotSide.infl.m_flow - PHX.infl_2.m_flow = 0.0;
  PHX.infl_2.h_outflow = PHX.HX_hotSide.infl.h_outflow;
  PHX.HX_hotSide.outfl.p = PHX.outfl_2.p;
  PHX.HX_hotSide.outfl.h_outflow = PHX.outfl_2.h_outflow;
  PHX.HX_hotSide.wall.T[1] = PHX.metalTubeFV.ext.T[1];
  PHX.HX_hotSide.wall.T[2] = PHX.metalTubeFV.ext.T[2];
  PHX.HX_hotSide.wall.T[3] = PHX.metalTubeFV.ext.T[3];
  PHX.HX_hotSide.wall.T[4] = PHX.metalTubeFV.ext.T[4];
  PHX.HX_hotSide.wall.T[5] = PHX.metalTubeFV.ext.T[5];
  PHX.HX_hotSide.wall.T[6] = PHX.metalTubeFV.ext.T[6];
  PHX.HX_hotSide.wall.T[7] = PHX.metalTubeFV.ext.T[7];
  PHX.HX_hotSide.wall.T[8] = PHX.metalTubeFV.ext.T[8];
  PHX.HX_hotSide.wall.T[9] = PHX.metalTubeFV.ext.T[9];
  PHX.metalTubeFV.int.T[1] = PHX.heatExchangerTopologyFV.side2.T[1];
  PHX.metalTubeFV.int.T[2] = PHX.heatExchangerTopologyFV.side2.T[2];
  PHX.metalTubeFV.int.T[3] = PHX.heatExchangerTopologyFV.side2.T[3];
  PHX.metalTubeFV.int.T[4] = PHX.heatExchangerTopologyFV.side2.T[4];
  PHX.metalTubeFV.int.T[5] = PHX.heatExchangerTopologyFV.side2.T[5];
  PHX.metalTubeFV.int.T[6] = PHX.heatExchangerTopologyFV.side2.T[6];
  PHX.metalTubeFV.int.T[7] = PHX.heatExchangerTopologyFV.side2.T[7];
  PHX.metalTubeFV.int.T[8] = PHX.heatExchangerTopologyFV.side2.T[8];
  PHX.metalTubeFV.int.T[9] = PHX.heatExchangerTopologyFV.side2.T[9];
  PHX.heatExchangerTopologyFV.side1.T[1] = PHX.HX_coldSide.wall.T[1];
  PHX.heatExchangerTopologyFV.side1.T[2] = PHX.HX_coldSide.wall.T[2];
  PHX.heatExchangerTopologyFV.side1.T[3] = PHX.HX_coldSide.wall.T[3];
  PHX.heatExchangerTopologyFV.side1.T[4] = PHX.HX_coldSide.wall.T[4];
  PHX.heatExchangerTopologyFV.side1.T[5] = PHX.HX_coldSide.wall.T[5];
  PHX.heatExchangerTopologyFV.side1.T[6] = PHX.HX_coldSide.wall.T[6];
  PHX.heatExchangerTopologyFV.side1.T[7] = PHX.HX_coldSide.wall.T[7];
  PHX.heatExchangerTopologyFV.side1.T[8] = PHX.HX_coldSide.wall.T[8];
  PHX.heatExchangerTopologyFV.side1.T[9] = PHX.HX_coldSide.wall.T[9];
  sourceP_BAin.in_p0 = sourceP_BAin.in_p0_internal;
  sourceP_BAin.in_T = sourceP_BAin.in_T_internal;
  sinkP_RA_PHXout.in_p0 = sinkP_RA_PHXout.in_p0_internal;
  sourceMassFlow_RA_PHXin.in_T = sourceMassFlow_RA_PHXin.in_T_internal;
  sourceMassFlow_RA_PHXin.flange.p = PHX.infl_1.p;
  sourceP_BAin.flange.p = PHX.infl_2.p;
  PHX.outfl_2.p = compressor.inlet.p;
  PHX.outfl_1.p = sinkP_RA_PHXout.flange.p;
  compressor.outlet.p = sinkP_PACKout.flange.p;
  sinkP_PACKout.flange.m_flow + compressor.outlet.m_flow = 0.0;
  compressor.shaft_a.tau = 0.0;
  compressor.shaft_b.tau = 0.0;
  sinkP_RA_PHXout.flange.m_flow + PHX.outfl_1.m_flow = 0.0;
  PHX.outfl_2.m_flow + compressor.inlet.m_flow = 0.0;
  PHX.HX_hotSide.outfl.m_flow - PHX.outfl_2.m_flow = 0.0;
  PHX.metalTubeFV.ext.Q[1] + PHX.HX_hotSide.wall.Q[1] = 0.0;
  PHX.metalTubeFV.ext.Q[2] + PHX.HX_hotSide.wall.Q[2] = 0.0;
  PHX.metalTubeFV.ext.Q[3] + PHX.HX_hotSide.wall.Q[3] = 0.0;
  PHX.metalTubeFV.ext.Q[4] + PHX.HX_hotSide.wall.Q[4] = 0.0;
  PHX.metalTubeFV.ext.Q[5] + PHX.HX_hotSide.wall.Q[5] = 0.0;
  PHX.metalTubeFV.ext.Q[6] + PHX.HX_hotSide.wall.Q[6] = 0.0;
  PHX.metalTubeFV.ext.Q[7] + PHX.HX_hotSide.wall.Q[7] = 0.0;
  PHX.metalTubeFV.ext.Q[8] + PHX.HX_hotSide.wall.Q[8] = 0.0;
  PHX.metalTubeFV.ext.Q[9] + PHX.HX_hotSide.wall.Q[9] = 0.0;
  PHX.HX_coldSide.outfl.m_flow - PHX.outfl_1.m_flow = 0.0;
  PHX.heatExchangerTopologyFV.side2.Q[1] + PHX.metalTubeFV.int.Q[1] = 0.0;
  PHX.heatExchangerTopologyFV.side2.Q[2] + PHX.metalTubeFV.int.Q[2] = 0.0;
  PHX.heatExchangerTopologyFV.side2.Q[3] + PHX.metalTubeFV.int.Q[3] = 0.0;
  PHX.heatExchangerTopologyFV.side2.Q[4] + PHX.metalTubeFV.int.Q[4] = 0.0;
  PHX.heatExchangerTopologyFV.side2.Q[5] + PHX.metalTubeFV.int.Q[5] = 0.0;
  PHX.heatExchangerTopologyFV.side2.Q[6] + PHX.metalTubeFV.int.Q[6] = 0.0;
  PHX.heatExchangerTopologyFV.side2.Q[7] + PHX.metalTubeFV.int.Q[7] = 0.0;
  PHX.heatExchangerTopologyFV.side2.Q[8] + PHX.metalTubeFV.int.Q[8] = 0.0;
  PHX.heatExchangerTopologyFV.side2.Q[9] + PHX.metalTubeFV.int.Q[9] = 0.0;
  PHX.heatExchangerTopologyFV.side1.Q[1] + PHX.HX_coldSide.wall.Q[1] = 0.0;
  PHX.heatExchangerTopologyFV.side1.Q[2] + PHX.HX_coldSide.wall.Q[2] = 0.0;
  PHX.heatExchangerTopologyFV.side1.Q[3] + PHX.HX_coldSide.wall.Q[3] = 0.0;
  PHX.heatExchangerTopologyFV.side1.Q[4] + PHX.HX_coldSide.wall.Q[4] = 0.0;
  PHX.heatExchangerTopologyFV.side1.Q[5] + PHX.HX_coldSide.wall.Q[5] = 0.0;
  PHX.heatExchangerTopologyFV.side1.Q[6] + PHX.HX_coldSide.wall.Q[6] = 0.0;
  PHX.heatExchangerTopologyFV.side1.Q[7] + PHX.HX_coldSide.wall.Q[7] = 0.0;
  PHX.heatExchangerTopologyFV.side1.Q[8] + PHX.HX_coldSide.wall.Q[8] = 0.0;
  PHX.heatExchangerTopologyFV.side1.Q[9] + PHX.HX_coldSide.wall.Q[9] = 0.0;
  sourceP_BAin.flange.m_flow + PHX.infl_2.m_flow = 0.0;
  sourceMassFlow_RA_PHXin.flange.m_flow + PHX.infl_1.m_flow = 0.0;
  assert(compressor.gas_in.T >= 200.0 and compressor.gas_in.T <= 6000.0, "
  Temperature T (= " + String(compressor.gas_in.T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  compressor.gas_in.MM = 0.0289651159;
  compressor.gas_in.R = 287.0512249529787;
  compressor.gas_in.h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), compressor.gas_in.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  compressor.gas_in.u = compressor.gas_in.h - compressor.gas_in.R * compressor.gas_in.T;
  compressor.gas_in.d = compressor.gas_in.p / (compressor.gas_in.R * compressor.gas_in.T);
  compressor.gas_in.state.T = compressor.gas_in.T;
  compressor.gas_in.state.p = compressor.gas_in.p;
  compressor.gas_in.X[1] = 1.0;
  assert(compressor.gas_in.X[1] >= -1e-05 and compressor.gas_in.X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(compressor.gas_in.X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(compressor.gas_in.p >= 0.0, "Pressure (= " + String(compressor.gas_in.p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(compressor.gas_in.T, 6, 0, true) + " K)");
  assert(compressor.gas_iso.T >= 200.0 and compressor.gas_iso.T <= 6000.0, "
  Temperature T (= " + String(compressor.gas_iso.T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  compressor.gas_iso.MM = 0.0289651159;
  compressor.gas_iso.R = 287.0512249529787;
  compressor.gas_iso.h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), compressor.gas_iso.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  compressor.gas_iso.u = compressor.gas_iso.h - compressor.gas_iso.R * compressor.gas_iso.T;
  compressor.gas_iso.d = compressor.gas_iso.p / (compressor.gas_iso.R * compressor.gas_iso.T);
  compressor.gas_iso.state.T = compressor.gas_iso.T;
  compressor.gas_iso.state.p = compressor.gas_iso.p;
  compressor.gas_iso.X[1] = 1.0;
  assert(compressor.gas_iso.X[1] >= -1e-05 and compressor.gas_iso.X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(compressor.gas_iso.X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(compressor.gas_iso.p >= 0.0, "Pressure (= " + String(compressor.gas_iso.p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(compressor.gas_iso.T, 6, 0, true) + " K)");
  compressor.Eta.y = Modelica.Blocks.Tables.Internal.getTable2DValue(compressor.Eta.tableID, compressor.Eta.u1, compressor.Eta.u2);
  compressor.PressRatio.y = Modelica.Blocks.Tables.Internal.getTable2DValue(compressor.PressRatio.tableID, compressor.PressRatio.u1, compressor.PressRatio.u2);
  compressor.Phic.y = Modelica.Blocks.Tables.Internal.getTable2DValue(compressor.Phic.tableID, compressor.Phic.u1, compressor.Phic.u2);
  compressor.N_T_design = compressor.Ndesign / sqrt(compressor.Tdes_in) "Referred design velocity";
  compressor.N_T = 100.0 * compressor.omega / (sqrt(compressor.gas_in.T) * compressor.N_T_design) "Referred speed definition, as percentage of design velocity";
  compressor.phic = compressor.w * sqrt(compressor.gas_in.T) / compressor.gas_in.p "Flow number definition";
  compressor.Phic.u1 = compressor.beta;
  compressor.Phic.u2 = compressor.N_T;
  compressor.phic = compressor.Phic.y;
  compressor.Eta.u1 = compressor.beta;
  compressor.Eta.u2 = compressor.N_T;
  compressor.eta = compressor.eta_set;
  compressor.PressRatio.u1 = compressor.beta;
  compressor.PressRatio.u2 = compressor.N_T;
  compressor.PR = compressor.PR_set;
  compressor.w = compressor.inlet.m_flow;
  assert(compressor.w >= 0.0, "The compressor model does not support flow reversal");
  compressor.inlet.m_flow + compressor.outlet.m_flow = 0.0 "Mass balance";
  compressor.gas_in.p = compressor.inlet.p;
  compressor.gas_in.h = PHX.outfl_2.h_outflow;
  compressor.outlet.p = compressor.pout;
  compressor.outlet.h_outflow = compressor.hout;
  compressor.inlet.h_outflow = sinkP_PACKout.flange.h_outflow;
  compressor.hout_iso = PL_Lib.Experiments.SimplePack.compressor.Medium.isentropicEnthalpy(compressor.outlet.p, compressor.gas_in.state, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0) "Approximated isentropic enthalpy";
  compressor.hout - compressor.gas_in.h = 1.0 / compressor.eta * (compressor.hout_iso - compressor.gas_in.h);
  compressor.s_in = 0.0;
  compressor.gas_iso.p = 100000.0;
  compressor.gas_iso.T = 300.0;
  compressor.w * (compressor.hout - compressor.gas_in.h) = compressor.tau * compressor.omega * compressor.eta_mech "Energy balance";
  compressor.PR = compressor.pout / compressor.gas_in.p "Pressure ratio";
  compressor.shaft_a.phi = compressor.phi;
  compressor.shaft_b.phi = compressor.phi;
  compressor.shaft_a.tau + compressor.shaft_b.tau = compressor.tau;
  der(compressor.phi) = compressor.omega;
  PHX.HX_hotSide.heatTransfer.w = {PHX.HX_hotSide.w, PHX.HX_hotSide.w, PHX.HX_hotSide.w, PHX.HX_hotSide.w, PHX.HX_hotSide.w, PHX.HX_hotSide.w, PHX.HX_hotSide.w, PHX.HX_hotSide.w, PHX.HX_hotSide.w, PHX.HX_hotSide.w};
  PHX.HX_hotSide.heatTransfer.Qvol = PHX.HX_hotSide.heatTransfer.Qw;
  PHX.HX_hotSide.heatTransfer.wall.T[1] = PHX.HX_hotSide.heatTransfer.T[2] "Ideal infinite heat transfer";
  PHX.HX_hotSide.heatTransfer.wall.T[2] = PHX.HX_hotSide.heatTransfer.T[3] "Ideal infinite heat transfer";
  PHX.HX_hotSide.heatTransfer.wall.T[3] = PHX.HX_hotSide.heatTransfer.T[4] "Ideal infinite heat transfer";
  PHX.HX_hotSide.heatTransfer.wall.T[4] = PHX.HX_hotSide.heatTransfer.T[5] "Ideal infinite heat transfer";
  PHX.HX_hotSide.heatTransfer.wall.T[5] = PHX.HX_hotSide.heatTransfer.T[6] "Ideal infinite heat transfer";
  PHX.HX_hotSide.heatTransfer.wall.T[6] = PHX.HX_hotSide.heatTransfer.T[7] "Ideal infinite heat transfer";
  PHX.HX_hotSide.heatTransfer.wall.T[7] = PHX.HX_hotSide.heatTransfer.T[8] "Ideal infinite heat transfer";
  PHX.HX_hotSide.heatTransfer.wall.T[8] = PHX.HX_hotSide.heatTransfer.T[9] "Ideal infinite heat transfer";
  PHX.HX_hotSide.heatTransfer.wall.T[9] = PHX.HX_hotSide.heatTransfer.T[10] "Ideal infinite heat transfer";
  PHX.HX_hotSide.heatTransfer.T[1] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.temperature(PHX.HX_hotSide.heatTransfer.fluidState[1]);
  PHX.HX_hotSide.heatTransfer.T[2] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.temperature(PHX.HX_hotSide.heatTransfer.fluidState[2]);
  PHX.HX_hotSide.heatTransfer.T[3] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.temperature(PHX.HX_hotSide.heatTransfer.fluidState[3]);
  PHX.HX_hotSide.heatTransfer.T[4] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.temperature(PHX.HX_hotSide.heatTransfer.fluidState[4]);
  PHX.HX_hotSide.heatTransfer.T[5] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.temperature(PHX.HX_hotSide.heatTransfer.fluidState[5]);
  PHX.HX_hotSide.heatTransfer.T[6] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.temperature(PHX.HX_hotSide.heatTransfer.fluidState[6]);
  PHX.HX_hotSide.heatTransfer.T[7] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.temperature(PHX.HX_hotSide.heatTransfer.fluidState[7]);
  PHX.HX_hotSide.heatTransfer.T[8] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.temperature(PHX.HX_hotSide.heatTransfer.fluidState[8]);
  PHX.HX_hotSide.heatTransfer.T[9] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.temperature(PHX.HX_hotSide.heatTransfer.fluidState[9]);
  PHX.HX_hotSide.heatTransfer.T[10] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.heatTransfer.Medium.temperature(PHX.HX_hotSide.heatTransfer.fluidState[10]);
  PHX.HX_hotSide.heatTransfer.Tw[1] = PHX.HX_hotSide.heatTransfer.wall.T[1];
  PHX.HX_hotSide.heatTransfer.Tw[2] = PHX.HX_hotSide.heatTransfer.wall.T[2];
  PHX.HX_hotSide.heatTransfer.Tw[3] = PHX.HX_hotSide.heatTransfer.wall.T[3];
  PHX.HX_hotSide.heatTransfer.Tw[4] = PHX.HX_hotSide.heatTransfer.wall.T[4];
  PHX.HX_hotSide.heatTransfer.Tw[5] = PHX.HX_hotSide.heatTransfer.wall.T[5];
  PHX.HX_hotSide.heatTransfer.Tw[6] = PHX.HX_hotSide.heatTransfer.wall.T[6];
  PHX.HX_hotSide.heatTransfer.Tw[7] = PHX.HX_hotSide.heatTransfer.wall.T[7];
  PHX.HX_hotSide.heatTransfer.Tw[8] = PHX.HX_hotSide.heatTransfer.wall.T[8];
  PHX.HX_hotSide.heatTransfer.Tw[9] = PHX.HX_hotSide.heatTransfer.wall.T[9];
  PHX.HX_hotSide.heatTransfer.Qw[1] = PHX.HX_hotSide.heatTransfer.wall.Q[1];
  PHX.HX_hotSide.heatTransfer.Qw[2] = PHX.HX_hotSide.heatTransfer.wall.Q[2];
  PHX.HX_hotSide.heatTransfer.Qw[3] = PHX.HX_hotSide.heatTransfer.wall.Q[3];
  PHX.HX_hotSide.heatTransfer.Qw[4] = PHX.HX_hotSide.heatTransfer.wall.Q[4];
  PHX.HX_hotSide.heatTransfer.Qw[5] = PHX.HX_hotSide.heatTransfer.wall.Q[5];
  PHX.HX_hotSide.heatTransfer.Qw[6] = PHX.HX_hotSide.heatTransfer.wall.Q[6];
  PHX.HX_hotSide.heatTransfer.Qw[7] = PHX.HX_hotSide.heatTransfer.wall.Q[7];
  PHX.HX_hotSide.heatTransfer.Qw[8] = PHX.HX_hotSide.heatTransfer.wall.Q[8];
  PHX.HX_hotSide.heatTransfer.Qw[9] = PHX.HX_hotSide.heatTransfer.wall.Q[9];
  PHX.HX_hotSide.heatTransfer.Q = PHX.HX_hotSide.heatTransfer.wall.Q[1] + PHX.HX_hotSide.heatTransfer.wall.Q[2] + PHX.HX_hotSide.heatTransfer.wall.Q[3] + PHX.HX_hotSide.heatTransfer.wall.Q[4] + PHX.HX_hotSide.heatTransfer.wall.Q[5] + PHX.HX_hotSide.heatTransfer.wall.Q[6] + PHX.HX_hotSide.heatTransfer.wall.Q[7] + PHX.HX_hotSide.heatTransfer.wall.Q[8] + PHX.HX_hotSide.heatTransfer.wall.Q[9];
  assert(PHX.HX_hotSide.gas[1].T >= 200.0 and PHX.HX_hotSide.gas[1].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_hotSide.gas[1].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_hotSide.gas[1].MM = 0.0289651159;
  PHX.HX_hotSide.gas[1].R = 287.0512249529787;
  PHX.HX_hotSide.gas[1].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_hotSide.gas[1].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_hotSide.gas[1].u = PHX.HX_hotSide.gas[1].h - PHX.HX_hotSide.gas[1].R * PHX.HX_hotSide.gas[1].T;
  PHX.HX_hotSide.gas[1].d = PHX.HX_hotSide.gas[1].p / (PHX.HX_hotSide.gas[1].R * PHX.HX_hotSide.gas[1].T);
  PHX.HX_hotSide.gas[1].state.T = PHX.HX_hotSide.gas[1].T;
  PHX.HX_hotSide.gas[1].state.p = PHX.HX_hotSide.gas[1].p;
  PHX.HX_hotSide.gas[1].X[1] = 1.0;
  assert(PHX.HX_hotSide.gas[1].X[1] >= -1e-05 and PHX.HX_hotSide.gas[1].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_hotSide.gas[1].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_hotSide.gas[1].p >= 0.0, "Pressure (= " + String(PHX.HX_hotSide.gas[1].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_hotSide.gas[1].T, 6, 0, true) + " K)");
  assert(PHX.HX_hotSide.gas[2].T >= 200.0 and PHX.HX_hotSide.gas[2].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_hotSide.gas[2].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_hotSide.gas[2].MM = 0.0289651159;
  PHX.HX_hotSide.gas[2].R = 287.0512249529787;
  PHX.HX_hotSide.gas[2].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_hotSide.gas[2].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_hotSide.gas[2].u = PHX.HX_hotSide.gas[2].h - PHX.HX_hotSide.gas[2].R * PHX.HX_hotSide.gas[2].T;
  PHX.HX_hotSide.gas[2].d = PHX.HX_hotSide.gas[2].p / (PHX.HX_hotSide.gas[2].R * PHX.HX_hotSide.gas[2].T);
  PHX.HX_hotSide.gas[2].state.T = PHX.HX_hotSide.gas[2].T;
  PHX.HX_hotSide.gas[2].state.p = PHX.HX_hotSide.gas[2].p;
  PHX.HX_hotSide.gas[2].X[1] = 1.0;
  assert(PHX.HX_hotSide.gas[2].X[1] >= -1e-05 and PHX.HX_hotSide.gas[2].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_hotSide.gas[2].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_hotSide.gas[2].p >= 0.0, "Pressure (= " + String(PHX.HX_hotSide.gas[2].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_hotSide.gas[2].T, 6, 0, true) + " K)");
  assert(PHX.HX_hotSide.gas[3].T >= 200.0 and PHX.HX_hotSide.gas[3].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_hotSide.gas[3].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_hotSide.gas[3].MM = 0.0289651159;
  PHX.HX_hotSide.gas[3].R = 287.0512249529787;
  PHX.HX_hotSide.gas[3].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_hotSide.gas[3].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_hotSide.gas[3].u = PHX.HX_hotSide.gas[3].h - PHX.HX_hotSide.gas[3].R * PHX.HX_hotSide.gas[3].T;
  PHX.HX_hotSide.gas[3].d = PHX.HX_hotSide.gas[3].p / (PHX.HX_hotSide.gas[3].R * PHX.HX_hotSide.gas[3].T);
  PHX.HX_hotSide.gas[3].state.T = PHX.HX_hotSide.gas[3].T;
  PHX.HX_hotSide.gas[3].state.p = PHX.HX_hotSide.gas[3].p;
  PHX.HX_hotSide.gas[3].X[1] = 1.0;
  assert(PHX.HX_hotSide.gas[3].X[1] >= -1e-05 and PHX.HX_hotSide.gas[3].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_hotSide.gas[3].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_hotSide.gas[3].p >= 0.0, "Pressure (= " + String(PHX.HX_hotSide.gas[3].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_hotSide.gas[3].T, 6, 0, true) + " K)");
  assert(PHX.HX_hotSide.gas[4].T >= 200.0 and PHX.HX_hotSide.gas[4].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_hotSide.gas[4].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_hotSide.gas[4].MM = 0.0289651159;
  PHX.HX_hotSide.gas[4].R = 287.0512249529787;
  PHX.HX_hotSide.gas[4].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_hotSide.gas[4].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_hotSide.gas[4].u = PHX.HX_hotSide.gas[4].h - PHX.HX_hotSide.gas[4].R * PHX.HX_hotSide.gas[4].T;
  PHX.HX_hotSide.gas[4].d = PHX.HX_hotSide.gas[4].p / (PHX.HX_hotSide.gas[4].R * PHX.HX_hotSide.gas[4].T);
  PHX.HX_hotSide.gas[4].state.T = PHX.HX_hotSide.gas[4].T;
  PHX.HX_hotSide.gas[4].state.p = PHX.HX_hotSide.gas[4].p;
  PHX.HX_hotSide.gas[4].X[1] = 1.0;
  assert(PHX.HX_hotSide.gas[4].X[1] >= -1e-05 and PHX.HX_hotSide.gas[4].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_hotSide.gas[4].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_hotSide.gas[4].p >= 0.0, "Pressure (= " + String(PHX.HX_hotSide.gas[4].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_hotSide.gas[4].T, 6, 0, true) + " K)");
  assert(PHX.HX_hotSide.gas[5].T >= 200.0 and PHX.HX_hotSide.gas[5].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_hotSide.gas[5].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_hotSide.gas[5].MM = 0.0289651159;
  PHX.HX_hotSide.gas[5].R = 287.0512249529787;
  PHX.HX_hotSide.gas[5].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_hotSide.gas[5].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_hotSide.gas[5].u = PHX.HX_hotSide.gas[5].h - PHX.HX_hotSide.gas[5].R * PHX.HX_hotSide.gas[5].T;
  PHX.HX_hotSide.gas[5].d = PHX.HX_hotSide.gas[5].p / (PHX.HX_hotSide.gas[5].R * PHX.HX_hotSide.gas[5].T);
  PHX.HX_hotSide.gas[5].state.T = PHX.HX_hotSide.gas[5].T;
  PHX.HX_hotSide.gas[5].state.p = PHX.HX_hotSide.gas[5].p;
  PHX.HX_hotSide.gas[5].X[1] = 1.0;
  assert(PHX.HX_hotSide.gas[5].X[1] >= -1e-05 and PHX.HX_hotSide.gas[5].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_hotSide.gas[5].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_hotSide.gas[5].p >= 0.0, "Pressure (= " + String(PHX.HX_hotSide.gas[5].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_hotSide.gas[5].T, 6, 0, true) + " K)");
  assert(PHX.HX_hotSide.gas[6].T >= 200.0 and PHX.HX_hotSide.gas[6].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_hotSide.gas[6].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_hotSide.gas[6].MM = 0.0289651159;
  PHX.HX_hotSide.gas[6].R = 287.0512249529787;
  PHX.HX_hotSide.gas[6].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_hotSide.gas[6].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_hotSide.gas[6].u = PHX.HX_hotSide.gas[6].h - PHX.HX_hotSide.gas[6].R * PHX.HX_hotSide.gas[6].T;
  PHX.HX_hotSide.gas[6].d = PHX.HX_hotSide.gas[6].p / (PHX.HX_hotSide.gas[6].R * PHX.HX_hotSide.gas[6].T);
  PHX.HX_hotSide.gas[6].state.T = PHX.HX_hotSide.gas[6].T;
  PHX.HX_hotSide.gas[6].state.p = PHX.HX_hotSide.gas[6].p;
  PHX.HX_hotSide.gas[6].X[1] = 1.0;
  assert(PHX.HX_hotSide.gas[6].X[1] >= -1e-05 and PHX.HX_hotSide.gas[6].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_hotSide.gas[6].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_hotSide.gas[6].p >= 0.0, "Pressure (= " + String(PHX.HX_hotSide.gas[6].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_hotSide.gas[6].T, 6, 0, true) + " K)");
  assert(PHX.HX_hotSide.gas[7].T >= 200.0 and PHX.HX_hotSide.gas[7].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_hotSide.gas[7].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_hotSide.gas[7].MM = 0.0289651159;
  PHX.HX_hotSide.gas[7].R = 287.0512249529787;
  PHX.HX_hotSide.gas[7].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_hotSide.gas[7].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_hotSide.gas[7].u = PHX.HX_hotSide.gas[7].h - PHX.HX_hotSide.gas[7].R * PHX.HX_hotSide.gas[7].T;
  PHX.HX_hotSide.gas[7].d = PHX.HX_hotSide.gas[7].p / (PHX.HX_hotSide.gas[7].R * PHX.HX_hotSide.gas[7].T);
  PHX.HX_hotSide.gas[7].state.T = PHX.HX_hotSide.gas[7].T;
  PHX.HX_hotSide.gas[7].state.p = PHX.HX_hotSide.gas[7].p;
  PHX.HX_hotSide.gas[7].X[1] = 1.0;
  assert(PHX.HX_hotSide.gas[7].X[1] >= -1e-05 and PHX.HX_hotSide.gas[7].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_hotSide.gas[7].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_hotSide.gas[7].p >= 0.0, "Pressure (= " + String(PHX.HX_hotSide.gas[7].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_hotSide.gas[7].T, 6, 0, true) + " K)");
  assert(PHX.HX_hotSide.gas[8].T >= 200.0 and PHX.HX_hotSide.gas[8].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_hotSide.gas[8].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_hotSide.gas[8].MM = 0.0289651159;
  PHX.HX_hotSide.gas[8].R = 287.0512249529787;
  PHX.HX_hotSide.gas[8].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_hotSide.gas[8].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_hotSide.gas[8].u = PHX.HX_hotSide.gas[8].h - PHX.HX_hotSide.gas[8].R * PHX.HX_hotSide.gas[8].T;
  PHX.HX_hotSide.gas[8].d = PHX.HX_hotSide.gas[8].p / (PHX.HX_hotSide.gas[8].R * PHX.HX_hotSide.gas[8].T);
  PHX.HX_hotSide.gas[8].state.T = PHX.HX_hotSide.gas[8].T;
  PHX.HX_hotSide.gas[8].state.p = PHX.HX_hotSide.gas[8].p;
  PHX.HX_hotSide.gas[8].X[1] = 1.0;
  assert(PHX.HX_hotSide.gas[8].X[1] >= -1e-05 and PHX.HX_hotSide.gas[8].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_hotSide.gas[8].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_hotSide.gas[8].p >= 0.0, "Pressure (= " + String(PHX.HX_hotSide.gas[8].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_hotSide.gas[8].T, 6, 0, true) + " K)");
  assert(PHX.HX_hotSide.gas[9].T >= 200.0 and PHX.HX_hotSide.gas[9].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_hotSide.gas[9].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_hotSide.gas[9].MM = 0.0289651159;
  PHX.HX_hotSide.gas[9].R = 287.0512249529787;
  PHX.HX_hotSide.gas[9].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_hotSide.gas[9].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_hotSide.gas[9].u = PHX.HX_hotSide.gas[9].h - PHX.HX_hotSide.gas[9].R * PHX.HX_hotSide.gas[9].T;
  PHX.HX_hotSide.gas[9].d = PHX.HX_hotSide.gas[9].p / (PHX.HX_hotSide.gas[9].R * PHX.HX_hotSide.gas[9].T);
  PHX.HX_hotSide.gas[9].state.T = PHX.HX_hotSide.gas[9].T;
  PHX.HX_hotSide.gas[9].state.p = PHX.HX_hotSide.gas[9].p;
  PHX.HX_hotSide.gas[9].X[1] = 1.0;
  assert(PHX.HX_hotSide.gas[9].X[1] >= -1e-05 and PHX.HX_hotSide.gas[9].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_hotSide.gas[9].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_hotSide.gas[9].p >= 0.0, "Pressure (= " + String(PHX.HX_hotSide.gas[9].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_hotSide.gas[9].T, 6, 0, true) + " K)");
  assert(PHX.HX_hotSide.gas[10].T >= 200.0 and PHX.HX_hotSide.gas[10].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_hotSide.gas[10].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_hotSide.gas[10].MM = 0.0289651159;
  PHX.HX_hotSide.gas[10].R = 287.0512249529787;
  PHX.HX_hotSide.gas[10].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_hotSide.gas[10].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_hotSide.gas[10].u = PHX.HX_hotSide.gas[10].h - PHX.HX_hotSide.gas[10].R * PHX.HX_hotSide.gas[10].T;
  PHX.HX_hotSide.gas[10].d = PHX.HX_hotSide.gas[10].p / (PHX.HX_hotSide.gas[10].R * PHX.HX_hotSide.gas[10].T);
  PHX.HX_hotSide.gas[10].state.T = PHX.HX_hotSide.gas[10].T;
  PHX.HX_hotSide.gas[10].state.p = PHX.HX_hotSide.gas[10].p;
  PHX.HX_hotSide.gas[10].X[1] = 1.0;
  assert(PHX.HX_hotSide.gas[10].X[1] >= -1e-05 and PHX.HX_hotSide.gas[10].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_hotSide.gas[10].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_hotSide.gas[10].p >= 0.0, "Pressure (= " + String(PHX.HX_hotSide.gas[10].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_hotSide.gas[10].T, 6, 0, true) + " K)");
  PHX.HX_hotSide.Q_single = {PHX.HX_hotSide.heatTransfer.Qvol[1] / /*Real*/(PHX.HX_hotSide.Nt), PHX.HX_hotSide.heatTransfer.Qvol[2] / /*Real*/(PHX.HX_hotSide.Nt), PHX.HX_hotSide.heatTransfer.Qvol[3] / /*Real*/(PHX.HX_hotSide.Nt), PHX.HX_hotSide.heatTransfer.Qvol[4] / /*Real*/(PHX.HX_hotSide.Nt), PHX.HX_hotSide.heatTransfer.Qvol[5] / /*Real*/(PHX.HX_hotSide.Nt), PHX.HX_hotSide.heatTransfer.Qvol[6] / /*Real*/(PHX.HX_hotSide.Nt), PHX.HX_hotSide.heatTransfer.Qvol[7] / /*Real*/(PHX.HX_hotSide.Nt), PHX.HX_hotSide.heatTransfer.Qvol[8] / /*Real*/(PHX.HX_hotSide.Nt), PHX.HX_hotSide.heatTransfer.Qvol[9] / /*Real*/(PHX.HX_hotSide.Nt)};
  assert(PHX.HX_hotSide.dpnom > 0.0, "dpnom=0 not supported, it is also used in the homotopy trasformation during the inizialization");
  PHX.HX_hotSide.omega_hyd = 4.0 * PHX.HX_hotSide.A / PHX.HX_hotSide.Dhyd;
  PHX.HX_hotSide.Kf = PHX.HX_hotSide.Cfnom * PHX.HX_hotSide.omega_hyd * PHX.HX_hotSide.L / (2.0 * PHX.HX_hotSide.A ^ 3.0) * PHX.HX_hotSide.Kfc;
  PHX.HX_hotSide.Cf = PHX.HX_hotSide.Cfnom * PHX.HX_hotSide.Kfc;
  assert(PHX.HX_hotSide.Kf >= 0.0, "Negative friction coefficient");
  PHX.HX_hotSide.Kfl = PHX.HX_hotSide.wnom / /*Real*/(PHX.HX_hotSide.Nt) * PHX.HX_hotSide.wnf * PHX.HX_hotSide.Kf "Linear friction factor";
  PHX.HX_hotSide.dwdt = 0.0;
  PHX.HX_hotSide.dMdt[1] + PHX.HX_hotSide.dMdt[2] + PHX.HX_hotSide.dMdt[3] + PHX.HX_hotSide.dMdt[4] + PHX.HX_hotSide.dMdt[5] + PHX.HX_hotSide.dMdt[6] + PHX.HX_hotSide.dMdt[7] + PHX.HX_hotSide.dMdt[8] + PHX.HX_hotSide.dMdt[9] = (PHX.HX_hotSide.infl.m_flow + PHX.HX_hotSide.outfl.m_flow) / /*Real*/(PHX.HX_hotSide.Nt) "Mass balance";
  PHX.HX_hotSide.L / PHX.HX_hotSide.A * PHX.HX_hotSide.dwdt + PHX.HX_hotSide.outfl.p - PHX.HX_hotSide.infl.p + PHX.HX_hotSide.Dpfric = 0.0 "Momentum balance";
  PHX.HX_hotSide.Dpfric = homotopy(smooth(1, PHX.HX_hotSide.Kf * PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.squareReg(PHX.HX_hotSide.w, PHX.HX_hotSide.wnom / /*Real*/(PHX.HX_hotSide.Nt) * PHX.HX_hotSide.wnf)) * (PHX.HX_hotSide.vbar[1] + PHX.HX_hotSide.vbar[2] + PHX.HX_hotSide.vbar[3] + PHX.HX_hotSide.vbar[4] + PHX.HX_hotSide.vbar[5] + PHX.HX_hotSide.vbar[6] + PHX.HX_hotSide.vbar[7] + PHX.HX_hotSide.vbar[8] + PHX.HX_hotSide.vbar[9]) / 9.0, PHX.HX_hotSide.dpnom / (PHX.HX_hotSide.wnom / /*Real*/(PHX.HX_hotSide.Nt)) * PHX.HX_hotSide.w) "Pressure drop due to friction";
  PHX.HX_hotSide.A * PHX.HX_hotSide.l * PHX.HX_hotSide.rhobar[1] * PHX.HX_hotSide.cvbar[1] * der(PHX.HX_hotSide.Ttilde[1]) + PHX.HX_hotSide.wbar[1] * (PHX.HX_hotSide.gas[2].h - PHX.HX_hotSide.gas[1].h) = PHX.HX_hotSide.Q_single[1] "Energy balance";
  PHX.HX_hotSide.dMdt[1] = PHX.HX_hotSide.A * PHX.HX_hotSide.l * (PHX.HX_hotSide.drbdp[1] * der(PHX.HX_hotSide.p) + PHX.HX_hotSide.drbdT1[1] * der(PHX.HX_hotSide.gas[1].T) + PHX.HX_hotSide.drbdT2[1] * der(PHX.HX_hotSide.gas[2].T) + vector(PHX.HX_hotSide.drbdX1[1,:]) * vector(der(PHX.HX_hotSide.gas[1].X)) + vector(PHX.HX_hotSide.drbdX2[1,:]) * vector(der(PHX.HX_hotSide.gas[2].X))) "Mass balance";
  PHX.HX_hotSide.rhobar[1] = PHX.HX_hotSide.gas[2].d;
  PHX.HX_hotSide.drbdp[1] = PHX.HX_hotSide.dddp[2];
  PHX.HX_hotSide.drbdT1[1] = 0.0;
  PHX.HX_hotSide.drbdT2[1] = PHX.HX_hotSide.dddT[2];
  PHX.HX_hotSide.drbdX1[1,1] = 0.0;
  PHX.HX_hotSide.drbdX2[1,1] = PHX.HX_hotSide.dddX[2,1];
  PHX.HX_hotSide.vbar[1] = 1.0 / PHX.HX_hotSide.rhobar[1];
  PHX.HX_hotSide.wbar[1] = PHX.HX_hotSide.infl.m_flow / /*Real*/(PHX.HX_hotSide.Nt) - PHX.HX_hotSide.dMdt[1] / 2.0;
  PHX.HX_hotSide.cvbar[1] = (PHX.HX_hotSide.cv[1] + PHX.HX_hotSide.cv[2]) / 2.0;
  PHX.HX_hotSide.A * PHX.HX_hotSide.l * PHX.HX_hotSide.rhobar[2] * PHX.HX_hotSide.cvbar[2] * der(PHX.HX_hotSide.Ttilde[2]) + PHX.HX_hotSide.wbar[2] * (PHX.HX_hotSide.gas[3].h - PHX.HX_hotSide.gas[2].h) = PHX.HX_hotSide.Q_single[2] "Energy balance";
  PHX.HX_hotSide.dMdt[2] = PHX.HX_hotSide.A * PHX.HX_hotSide.l * (PHX.HX_hotSide.drbdp[2] * der(PHX.HX_hotSide.p) + PHX.HX_hotSide.drbdT1[2] * der(PHX.HX_hotSide.gas[2].T) + PHX.HX_hotSide.drbdT2[2] * der(PHX.HX_hotSide.gas[3].T) + vector(PHX.HX_hotSide.drbdX1[2,:]) * vector(der(PHX.HX_hotSide.gas[2].X)) + vector(PHX.HX_hotSide.drbdX2[2,:]) * vector(der(PHX.HX_hotSide.gas[3].X))) "Mass balance";
  PHX.HX_hotSide.rhobar[2] = (PHX.HX_hotSide.gas[2].d + PHX.HX_hotSide.gas[3].d) / 2.0;
  PHX.HX_hotSide.drbdp[2] = (PHX.HX_hotSide.dddp[2] + PHX.HX_hotSide.dddp[3]) / 2.0;
  PHX.HX_hotSide.drbdT1[2] = PHX.HX_hotSide.dddT[2] / 2.0;
  PHX.HX_hotSide.drbdT2[2] = PHX.HX_hotSide.dddT[3] / 2.0;
  PHX.HX_hotSide.drbdX1[2,1] = PHX.HX_hotSide.dddX[2,1] / 2.0;
  PHX.HX_hotSide.drbdX2[2,1] = PHX.HX_hotSide.dddX[3,1] / 2.0;
  PHX.HX_hotSide.vbar[2] = 1.0 / PHX.HX_hotSide.rhobar[2];
  PHX.HX_hotSide.wbar[2] = PHX.HX_hotSide.infl.m_flow / /*Real*/(PHX.HX_hotSide.Nt) - PHX.HX_hotSide.dMdt[1] - PHX.HX_hotSide.dMdt[2] / 2.0;
  PHX.HX_hotSide.cvbar[2] = (PHX.HX_hotSide.cv[2] + PHX.HX_hotSide.cv[3]) / 2.0;
  PHX.HX_hotSide.A * PHX.HX_hotSide.l * PHX.HX_hotSide.rhobar[3] * PHX.HX_hotSide.cvbar[3] * der(PHX.HX_hotSide.Ttilde[3]) + PHX.HX_hotSide.wbar[3] * (PHX.HX_hotSide.gas[4].h - PHX.HX_hotSide.gas[3].h) = PHX.HX_hotSide.Q_single[3] "Energy balance";
  PHX.HX_hotSide.dMdt[3] = PHX.HX_hotSide.A * PHX.HX_hotSide.l * (PHX.HX_hotSide.drbdp[3] * der(PHX.HX_hotSide.p) + PHX.HX_hotSide.drbdT1[3] * der(PHX.HX_hotSide.gas[3].T) + PHX.HX_hotSide.drbdT2[3] * der(PHX.HX_hotSide.gas[4].T) + vector(PHX.HX_hotSide.drbdX1[3,:]) * vector(der(PHX.HX_hotSide.gas[3].X)) + vector(PHX.HX_hotSide.drbdX2[3,:]) * vector(der(PHX.HX_hotSide.gas[4].X))) "Mass balance";
  PHX.HX_hotSide.rhobar[3] = (PHX.HX_hotSide.gas[3].d + PHX.HX_hotSide.gas[4].d) / 2.0;
  PHX.HX_hotSide.drbdp[3] = (PHX.HX_hotSide.dddp[3] + PHX.HX_hotSide.dddp[4]) / 2.0;
  PHX.HX_hotSide.drbdT1[3] = PHX.HX_hotSide.dddT[3] / 2.0;
  PHX.HX_hotSide.drbdT2[3] = PHX.HX_hotSide.dddT[4] / 2.0;
  PHX.HX_hotSide.drbdX1[3,1] = PHX.HX_hotSide.dddX[3,1] / 2.0;
  PHX.HX_hotSide.drbdX2[3,1] = PHX.HX_hotSide.dddX[4,1] / 2.0;
  PHX.HX_hotSide.vbar[3] = 1.0 / PHX.HX_hotSide.rhobar[3];
  PHX.HX_hotSide.wbar[3] = PHX.HX_hotSide.infl.m_flow / /*Real*/(PHX.HX_hotSide.Nt) - (PHX.HX_hotSide.dMdt[1] + PHX.HX_hotSide.dMdt[2]) - PHX.HX_hotSide.dMdt[3] / 2.0;
  PHX.HX_hotSide.cvbar[3] = (PHX.HX_hotSide.cv[3] + PHX.HX_hotSide.cv[4]) / 2.0;
  PHX.HX_hotSide.A * PHX.HX_hotSide.l * PHX.HX_hotSide.rhobar[4] * PHX.HX_hotSide.cvbar[4] * der(PHX.HX_hotSide.Ttilde[4]) + PHX.HX_hotSide.wbar[4] * (PHX.HX_hotSide.gas[5].h - PHX.HX_hotSide.gas[4].h) = PHX.HX_hotSide.Q_single[4] "Energy balance";
  PHX.HX_hotSide.dMdt[4] = PHX.HX_hotSide.A * PHX.HX_hotSide.l * (PHX.HX_hotSide.drbdp[4] * der(PHX.HX_hotSide.p) + PHX.HX_hotSide.drbdT1[4] * der(PHX.HX_hotSide.gas[4].T) + PHX.HX_hotSide.drbdT2[4] * der(PHX.HX_hotSide.gas[5].T) + vector(PHX.HX_hotSide.drbdX1[4,:]) * vector(der(PHX.HX_hotSide.gas[4].X)) + vector(PHX.HX_hotSide.drbdX2[4,:]) * vector(der(PHX.HX_hotSide.gas[5].X))) "Mass balance";
  PHX.HX_hotSide.rhobar[4] = (PHX.HX_hotSide.gas[4].d + PHX.HX_hotSide.gas[5].d) / 2.0;
  PHX.HX_hotSide.drbdp[4] = (PHX.HX_hotSide.dddp[4] + PHX.HX_hotSide.dddp[5]) / 2.0;
  PHX.HX_hotSide.drbdT1[4] = PHX.HX_hotSide.dddT[4] / 2.0;
  PHX.HX_hotSide.drbdT2[4] = PHX.HX_hotSide.dddT[5] / 2.0;
  PHX.HX_hotSide.drbdX1[4,1] = PHX.HX_hotSide.dddX[4,1] / 2.0;
  PHX.HX_hotSide.drbdX2[4,1] = PHX.HX_hotSide.dddX[5,1] / 2.0;
  PHX.HX_hotSide.vbar[4] = 1.0 / PHX.HX_hotSide.rhobar[4];
  PHX.HX_hotSide.wbar[4] = PHX.HX_hotSide.infl.m_flow / /*Real*/(PHX.HX_hotSide.Nt) - (PHX.HX_hotSide.dMdt[1] + PHX.HX_hotSide.dMdt[2] + PHX.HX_hotSide.dMdt[3]) - PHX.HX_hotSide.dMdt[4] / 2.0;
  PHX.HX_hotSide.cvbar[4] = (PHX.HX_hotSide.cv[4] + PHX.HX_hotSide.cv[5]) / 2.0;
  PHX.HX_hotSide.A * PHX.HX_hotSide.l * PHX.HX_hotSide.rhobar[5] * PHX.HX_hotSide.cvbar[5] * der(PHX.HX_hotSide.Ttilde[5]) + PHX.HX_hotSide.wbar[5] * (PHX.HX_hotSide.gas[6].h - PHX.HX_hotSide.gas[5].h) = PHX.HX_hotSide.Q_single[5] "Energy balance";
  PHX.HX_hotSide.dMdt[5] = PHX.HX_hotSide.A * PHX.HX_hotSide.l * (PHX.HX_hotSide.drbdp[5] * der(PHX.HX_hotSide.p) + PHX.HX_hotSide.drbdT1[5] * der(PHX.HX_hotSide.gas[5].T) + PHX.HX_hotSide.drbdT2[5] * der(PHX.HX_hotSide.gas[6].T) + vector(PHX.HX_hotSide.drbdX1[5,:]) * vector(der(PHX.HX_hotSide.gas[5].X)) + vector(PHX.HX_hotSide.drbdX2[5,:]) * vector(der(PHX.HX_hotSide.gas[6].X))) "Mass balance";
  PHX.HX_hotSide.rhobar[5] = (PHX.HX_hotSide.gas[5].d + PHX.HX_hotSide.gas[6].d) / 2.0;
  PHX.HX_hotSide.drbdp[5] = (PHX.HX_hotSide.dddp[5] + PHX.HX_hotSide.dddp[6]) / 2.0;
  PHX.HX_hotSide.drbdT1[5] = PHX.HX_hotSide.dddT[5] / 2.0;
  PHX.HX_hotSide.drbdT2[5] = PHX.HX_hotSide.dddT[6] / 2.0;
  PHX.HX_hotSide.drbdX1[5,1] = PHX.HX_hotSide.dddX[5,1] / 2.0;
  PHX.HX_hotSide.drbdX2[5,1] = PHX.HX_hotSide.dddX[6,1] / 2.0;
  PHX.HX_hotSide.vbar[5] = 1.0 / PHX.HX_hotSide.rhobar[5];
  PHX.HX_hotSide.wbar[5] = PHX.HX_hotSide.infl.m_flow / /*Real*/(PHX.HX_hotSide.Nt) - (PHX.HX_hotSide.dMdt[1] + PHX.HX_hotSide.dMdt[2] + PHX.HX_hotSide.dMdt[3] + PHX.HX_hotSide.dMdt[4]) - PHX.HX_hotSide.dMdt[5] / 2.0;
  PHX.HX_hotSide.cvbar[5] = (PHX.HX_hotSide.cv[5] + PHX.HX_hotSide.cv[6]) / 2.0;
  PHX.HX_hotSide.A * PHX.HX_hotSide.l * PHX.HX_hotSide.rhobar[6] * PHX.HX_hotSide.cvbar[6] * der(PHX.HX_hotSide.Ttilde[6]) + PHX.HX_hotSide.wbar[6] * (PHX.HX_hotSide.gas[7].h - PHX.HX_hotSide.gas[6].h) = PHX.HX_hotSide.Q_single[6] "Energy balance";
  PHX.HX_hotSide.dMdt[6] = PHX.HX_hotSide.A * PHX.HX_hotSide.l * (PHX.HX_hotSide.drbdp[6] * der(PHX.HX_hotSide.p) + PHX.HX_hotSide.drbdT1[6] * der(PHX.HX_hotSide.gas[6].T) + PHX.HX_hotSide.drbdT2[6] * der(PHX.HX_hotSide.gas[7].T) + vector(PHX.HX_hotSide.drbdX1[6,:]) * vector(der(PHX.HX_hotSide.gas[6].X)) + vector(PHX.HX_hotSide.drbdX2[6,:]) * vector(der(PHX.HX_hotSide.gas[7].X))) "Mass balance";
  PHX.HX_hotSide.rhobar[6] = (PHX.HX_hotSide.gas[6].d + PHX.HX_hotSide.gas[7].d) / 2.0;
  PHX.HX_hotSide.drbdp[6] = (PHX.HX_hotSide.dddp[6] + PHX.HX_hotSide.dddp[7]) / 2.0;
  PHX.HX_hotSide.drbdT1[6] = PHX.HX_hotSide.dddT[6] / 2.0;
  PHX.HX_hotSide.drbdT2[6] = PHX.HX_hotSide.dddT[7] / 2.0;
  PHX.HX_hotSide.drbdX1[6,1] = PHX.HX_hotSide.dddX[6,1] / 2.0;
  PHX.HX_hotSide.drbdX2[6,1] = PHX.HX_hotSide.dddX[7,1] / 2.0;
  PHX.HX_hotSide.vbar[6] = 1.0 / PHX.HX_hotSide.rhobar[6];
  PHX.HX_hotSide.wbar[6] = PHX.HX_hotSide.infl.m_flow / /*Real*/(PHX.HX_hotSide.Nt) - (PHX.HX_hotSide.dMdt[1] + PHX.HX_hotSide.dMdt[2] + PHX.HX_hotSide.dMdt[3] + PHX.HX_hotSide.dMdt[4] + PHX.HX_hotSide.dMdt[5]) - PHX.HX_hotSide.dMdt[6] / 2.0;
  PHX.HX_hotSide.cvbar[6] = (PHX.HX_hotSide.cv[6] + PHX.HX_hotSide.cv[7]) / 2.0;
  PHX.HX_hotSide.A * PHX.HX_hotSide.l * PHX.HX_hotSide.rhobar[7] * PHX.HX_hotSide.cvbar[7] * der(PHX.HX_hotSide.Ttilde[7]) + PHX.HX_hotSide.wbar[7] * (PHX.HX_hotSide.gas[8].h - PHX.HX_hotSide.gas[7].h) = PHX.HX_hotSide.Q_single[7] "Energy balance";
  PHX.HX_hotSide.dMdt[7] = PHX.HX_hotSide.A * PHX.HX_hotSide.l * (PHX.HX_hotSide.drbdp[7] * der(PHX.HX_hotSide.p) + PHX.HX_hotSide.drbdT1[7] * der(PHX.HX_hotSide.gas[7].T) + PHX.HX_hotSide.drbdT2[7] * der(PHX.HX_hotSide.gas[8].T) + vector(PHX.HX_hotSide.drbdX1[7,:]) * vector(der(PHX.HX_hotSide.gas[7].X)) + vector(PHX.HX_hotSide.drbdX2[7,:]) * vector(der(PHX.HX_hotSide.gas[8].X))) "Mass balance";
  PHX.HX_hotSide.rhobar[7] = (PHX.HX_hotSide.gas[7].d + PHX.HX_hotSide.gas[8].d) / 2.0;
  PHX.HX_hotSide.drbdp[7] = (PHX.HX_hotSide.dddp[7] + PHX.HX_hotSide.dddp[8]) / 2.0;
  PHX.HX_hotSide.drbdT1[7] = PHX.HX_hotSide.dddT[7] / 2.0;
  PHX.HX_hotSide.drbdT2[7] = PHX.HX_hotSide.dddT[8] / 2.0;
  PHX.HX_hotSide.drbdX1[7,1] = PHX.HX_hotSide.dddX[7,1] / 2.0;
  PHX.HX_hotSide.drbdX2[7,1] = PHX.HX_hotSide.dddX[8,1] / 2.0;
  PHX.HX_hotSide.vbar[7] = 1.0 / PHX.HX_hotSide.rhobar[7];
  PHX.HX_hotSide.wbar[7] = PHX.HX_hotSide.infl.m_flow / /*Real*/(PHX.HX_hotSide.Nt) - (PHX.HX_hotSide.dMdt[1] + PHX.HX_hotSide.dMdt[2] + PHX.HX_hotSide.dMdt[3] + PHX.HX_hotSide.dMdt[4] + PHX.HX_hotSide.dMdt[5] + PHX.HX_hotSide.dMdt[6]) - PHX.HX_hotSide.dMdt[7] / 2.0;
  PHX.HX_hotSide.cvbar[7] = (PHX.HX_hotSide.cv[7] + PHX.HX_hotSide.cv[8]) / 2.0;
  PHX.HX_hotSide.A * PHX.HX_hotSide.l * PHX.HX_hotSide.rhobar[8] * PHX.HX_hotSide.cvbar[8] * der(PHX.HX_hotSide.Ttilde[8]) + PHX.HX_hotSide.wbar[8] * (PHX.HX_hotSide.gas[9].h - PHX.HX_hotSide.gas[8].h) = PHX.HX_hotSide.Q_single[8] "Energy balance";
  PHX.HX_hotSide.dMdt[8] = PHX.HX_hotSide.A * PHX.HX_hotSide.l * (PHX.HX_hotSide.drbdp[8] * der(PHX.HX_hotSide.p) + PHX.HX_hotSide.drbdT1[8] * der(PHX.HX_hotSide.gas[8].T) + PHX.HX_hotSide.drbdT2[8] * der(PHX.HX_hotSide.gas[9].T) + vector(PHX.HX_hotSide.drbdX1[8,:]) * vector(der(PHX.HX_hotSide.gas[8].X)) + vector(PHX.HX_hotSide.drbdX2[8,:]) * vector(der(PHX.HX_hotSide.gas[9].X))) "Mass balance";
  PHX.HX_hotSide.rhobar[8] = (PHX.HX_hotSide.gas[8].d + PHX.HX_hotSide.gas[9].d) / 2.0;
  PHX.HX_hotSide.drbdp[8] = (PHX.HX_hotSide.dddp[8] + PHX.HX_hotSide.dddp[9]) / 2.0;
  PHX.HX_hotSide.drbdT1[8] = PHX.HX_hotSide.dddT[8] / 2.0;
  PHX.HX_hotSide.drbdT2[8] = PHX.HX_hotSide.dddT[9] / 2.0;
  PHX.HX_hotSide.drbdX1[8,1] = PHX.HX_hotSide.dddX[8,1] / 2.0;
  PHX.HX_hotSide.drbdX2[8,1] = PHX.HX_hotSide.dddX[9,1] / 2.0;
  PHX.HX_hotSide.vbar[8] = 1.0 / PHX.HX_hotSide.rhobar[8];
  PHX.HX_hotSide.wbar[8] = PHX.HX_hotSide.infl.m_flow / /*Real*/(PHX.HX_hotSide.Nt) - (PHX.HX_hotSide.dMdt[1] + PHX.HX_hotSide.dMdt[2] + PHX.HX_hotSide.dMdt[3] + PHX.HX_hotSide.dMdt[4] + PHX.HX_hotSide.dMdt[5] + PHX.HX_hotSide.dMdt[6] + PHX.HX_hotSide.dMdt[7]) - PHX.HX_hotSide.dMdt[8] / 2.0;
  PHX.HX_hotSide.cvbar[8] = (PHX.HX_hotSide.cv[8] + PHX.HX_hotSide.cv[9]) / 2.0;
  PHX.HX_hotSide.A * PHX.HX_hotSide.l * PHX.HX_hotSide.rhobar[9] * PHX.HX_hotSide.cvbar[9] * der(PHX.HX_hotSide.Ttilde[9]) + PHX.HX_hotSide.wbar[9] * (PHX.HX_hotSide.gas[10].h - PHX.HX_hotSide.gas[9].h) = PHX.HX_hotSide.Q_single[9] "Energy balance";
  PHX.HX_hotSide.dMdt[9] = PHX.HX_hotSide.A * PHX.HX_hotSide.l * (PHX.HX_hotSide.drbdp[9] * der(PHX.HX_hotSide.p) + PHX.HX_hotSide.drbdT1[9] * der(PHX.HX_hotSide.gas[9].T) + PHX.HX_hotSide.drbdT2[9] * der(PHX.HX_hotSide.gas[10].T) + vector(PHX.HX_hotSide.drbdX1[9,:]) * vector(der(PHX.HX_hotSide.gas[9].X)) + vector(PHX.HX_hotSide.drbdX2[9,:]) * vector(der(PHX.HX_hotSide.gas[10].X))) "Mass balance";
  PHX.HX_hotSide.rhobar[9] = (PHX.HX_hotSide.gas[9].d + PHX.HX_hotSide.gas[10].d) / 2.0;
  PHX.HX_hotSide.drbdp[9] = (PHX.HX_hotSide.dddp[9] + PHX.HX_hotSide.dddp[10]) / 2.0;
  PHX.HX_hotSide.drbdT1[9] = PHX.HX_hotSide.dddT[9] / 2.0;
  PHX.HX_hotSide.drbdT2[9] = PHX.HX_hotSide.dddT[10] / 2.0;
  PHX.HX_hotSide.drbdX1[9,1] = PHX.HX_hotSide.dddX[9,1] / 2.0;
  PHX.HX_hotSide.drbdX2[9,1] = PHX.HX_hotSide.dddX[10,1] / 2.0;
  PHX.HX_hotSide.vbar[9] = 1.0 / PHX.HX_hotSide.rhobar[9];
  PHX.HX_hotSide.wbar[9] = PHX.HX_hotSide.infl.m_flow / /*Real*/(PHX.HX_hotSide.Nt) - (PHX.HX_hotSide.dMdt[1] + PHX.HX_hotSide.dMdt[2] + PHX.HX_hotSide.dMdt[3] + PHX.HX_hotSide.dMdt[4] + PHX.HX_hotSide.dMdt[5] + PHX.HX_hotSide.dMdt[6] + PHX.HX_hotSide.dMdt[7] + PHX.HX_hotSide.dMdt[8]) - PHX.HX_hotSide.dMdt[9] / 2.0;
  PHX.HX_hotSide.cvbar[9] = (PHX.HX_hotSide.cv[9] + PHX.HX_hotSide.cv[10]) / 2.0;
  PHX.HX_hotSide.Q = PHX.HX_hotSide.heatTransfer.Q "Total heat flow through the lateral boundary";
  PHX.HX_hotSide.Xtilde[1,1] = 1.0;
  PHX.HX_hotSide.u[1] = PHX.HX_hotSide.w / (PHX.HX_hotSide.gas[1].d * PHX.HX_hotSide.A) "Gas velocity";
  PHX.HX_hotSide.gas[1].p = PHX.HX_hotSide.p;
  PHX.HX_hotSide.gas[1].T = PHX.HX_hotSide.T[1];
  PHX.HX_hotSide.gas[1].h = PHX.HX_hotSide.h[1];
  PHX.HX_hotSide.u[2] = PHX.HX_hotSide.w / (PHX.HX_hotSide.gas[2].d * PHX.HX_hotSide.A) "Gas velocity";
  PHX.HX_hotSide.gas[2].p = PHX.HX_hotSide.p;
  PHX.HX_hotSide.gas[2].T = PHX.HX_hotSide.T[2];
  PHX.HX_hotSide.gas[2].h = PHX.HX_hotSide.h[2];
  PHX.HX_hotSide.u[3] = PHX.HX_hotSide.w / (PHX.HX_hotSide.gas[3].d * PHX.HX_hotSide.A) "Gas velocity";
  PHX.HX_hotSide.gas[3].p = PHX.HX_hotSide.p;
  PHX.HX_hotSide.gas[3].T = PHX.HX_hotSide.T[3];
  PHX.HX_hotSide.gas[3].h = PHX.HX_hotSide.h[3];
  PHX.HX_hotSide.u[4] = PHX.HX_hotSide.w / (PHX.HX_hotSide.gas[4].d * PHX.HX_hotSide.A) "Gas velocity";
  PHX.HX_hotSide.gas[4].p = PHX.HX_hotSide.p;
  PHX.HX_hotSide.gas[4].T = PHX.HX_hotSide.T[4];
  PHX.HX_hotSide.gas[4].h = PHX.HX_hotSide.h[4];
  PHX.HX_hotSide.u[5] = PHX.HX_hotSide.w / (PHX.HX_hotSide.gas[5].d * PHX.HX_hotSide.A) "Gas velocity";
  PHX.HX_hotSide.gas[5].p = PHX.HX_hotSide.p;
  PHX.HX_hotSide.gas[5].T = PHX.HX_hotSide.T[5];
  PHX.HX_hotSide.gas[5].h = PHX.HX_hotSide.h[5];
  PHX.HX_hotSide.u[6] = PHX.HX_hotSide.w / (PHX.HX_hotSide.gas[6].d * PHX.HX_hotSide.A) "Gas velocity";
  PHX.HX_hotSide.gas[6].p = PHX.HX_hotSide.p;
  PHX.HX_hotSide.gas[6].T = PHX.HX_hotSide.T[6];
  PHX.HX_hotSide.gas[6].h = PHX.HX_hotSide.h[6];
  PHX.HX_hotSide.u[7] = PHX.HX_hotSide.w / (PHX.HX_hotSide.gas[7].d * PHX.HX_hotSide.A) "Gas velocity";
  PHX.HX_hotSide.gas[7].p = PHX.HX_hotSide.p;
  PHX.HX_hotSide.gas[7].T = PHX.HX_hotSide.T[7];
  PHX.HX_hotSide.gas[7].h = PHX.HX_hotSide.h[7];
  PHX.HX_hotSide.u[8] = PHX.HX_hotSide.w / (PHX.HX_hotSide.gas[8].d * PHX.HX_hotSide.A) "Gas velocity";
  PHX.HX_hotSide.gas[8].p = PHX.HX_hotSide.p;
  PHX.HX_hotSide.gas[8].T = PHX.HX_hotSide.T[8];
  PHX.HX_hotSide.gas[8].h = PHX.HX_hotSide.h[8];
  PHX.HX_hotSide.u[9] = PHX.HX_hotSide.w / (PHX.HX_hotSide.gas[9].d * PHX.HX_hotSide.A) "Gas velocity";
  PHX.HX_hotSide.gas[9].p = PHX.HX_hotSide.p;
  PHX.HX_hotSide.gas[9].T = PHX.HX_hotSide.T[9];
  PHX.HX_hotSide.gas[9].h = PHX.HX_hotSide.h[9];
  PHX.HX_hotSide.u[10] = PHX.HX_hotSide.w / (PHX.HX_hotSide.gas[10].d * PHX.HX_hotSide.A) "Gas velocity";
  PHX.HX_hotSide.gas[10].p = PHX.HX_hotSide.p;
  PHX.HX_hotSide.gas[10].T = PHX.HX_hotSide.T[10];
  PHX.HX_hotSide.gas[10].h = PHX.HX_hotSide.h[10];
  PHX.HX_hotSide.cv[1] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.heatCapacity_cv(PHX.HX_hotSide.gas[1].state);
  PHX.HX_hotSide.dddT[1] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derT_p(PHX.HX_hotSide.gas[1].state);
  PHX.HX_hotSide.dddp[1] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derp_T(PHX.HX_hotSide.gas[1].state);
  PHX.HX_hotSide.dddX[1,:] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derX(PHX.HX_hotSide.gas[1].state);
  PHX.HX_hotSide.cv[2] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.heatCapacity_cv(PHX.HX_hotSide.gas[2].state);
  PHX.HX_hotSide.dddT[2] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derT_p(PHX.HX_hotSide.gas[2].state);
  PHX.HX_hotSide.dddp[2] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derp_T(PHX.HX_hotSide.gas[2].state);
  PHX.HX_hotSide.dddX[2,:] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derX(PHX.HX_hotSide.gas[2].state);
  PHX.HX_hotSide.cv[3] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.heatCapacity_cv(PHX.HX_hotSide.gas[3].state);
  PHX.HX_hotSide.dddT[3] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derT_p(PHX.HX_hotSide.gas[3].state);
  PHX.HX_hotSide.dddp[3] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derp_T(PHX.HX_hotSide.gas[3].state);
  PHX.HX_hotSide.dddX[3,:] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derX(PHX.HX_hotSide.gas[3].state);
  PHX.HX_hotSide.cv[4] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.heatCapacity_cv(PHX.HX_hotSide.gas[4].state);
  PHX.HX_hotSide.dddT[4] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derT_p(PHX.HX_hotSide.gas[4].state);
  PHX.HX_hotSide.dddp[4] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derp_T(PHX.HX_hotSide.gas[4].state);
  PHX.HX_hotSide.dddX[4,:] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derX(PHX.HX_hotSide.gas[4].state);
  PHX.HX_hotSide.cv[5] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.heatCapacity_cv(PHX.HX_hotSide.gas[5].state);
  PHX.HX_hotSide.dddT[5] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derT_p(PHX.HX_hotSide.gas[5].state);
  PHX.HX_hotSide.dddp[5] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derp_T(PHX.HX_hotSide.gas[5].state);
  PHX.HX_hotSide.dddX[5,:] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derX(PHX.HX_hotSide.gas[5].state);
  PHX.HX_hotSide.cv[6] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.heatCapacity_cv(PHX.HX_hotSide.gas[6].state);
  PHX.HX_hotSide.dddT[6] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derT_p(PHX.HX_hotSide.gas[6].state);
  PHX.HX_hotSide.dddp[6] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derp_T(PHX.HX_hotSide.gas[6].state);
  PHX.HX_hotSide.dddX[6,:] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derX(PHX.HX_hotSide.gas[6].state);
  PHX.HX_hotSide.cv[7] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.heatCapacity_cv(PHX.HX_hotSide.gas[7].state);
  PHX.HX_hotSide.dddT[7] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derT_p(PHX.HX_hotSide.gas[7].state);
  PHX.HX_hotSide.dddp[7] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derp_T(PHX.HX_hotSide.gas[7].state);
  PHX.HX_hotSide.dddX[7,:] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derX(PHX.HX_hotSide.gas[7].state);
  PHX.HX_hotSide.cv[8] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.heatCapacity_cv(PHX.HX_hotSide.gas[8].state);
  PHX.HX_hotSide.dddT[8] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derT_p(PHX.HX_hotSide.gas[8].state);
  PHX.HX_hotSide.dddp[8] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derp_T(PHX.HX_hotSide.gas[8].state);
  PHX.HX_hotSide.dddX[8,:] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derX(PHX.HX_hotSide.gas[8].state);
  PHX.HX_hotSide.cv[9] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.heatCapacity_cv(PHX.HX_hotSide.gas[9].state);
  PHX.HX_hotSide.dddT[9] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derT_p(PHX.HX_hotSide.gas[9].state);
  PHX.HX_hotSide.dddp[9] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derp_T(PHX.HX_hotSide.gas[9].state);
  PHX.HX_hotSide.dddX[9,:] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derX(PHX.HX_hotSide.gas[9].state);
  PHX.HX_hotSide.cv[10] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.heatCapacity_cv(PHX.HX_hotSide.gas[10].state);
  PHX.HX_hotSide.dddT[10] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derT_p(PHX.HX_hotSide.gas[10].state);
  PHX.HX_hotSide.dddp[10] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derp_T(PHX.HX_hotSide.gas[10].state);
  PHX.HX_hotSide.dddX[10,:] = PL_Lib.Experiments.SimplePack.PHX.HX_hotSide.Medium.density_derX(PHX.HX_hotSide.gas[10].state);
  PHX.HX_hotSide.p = PHX.HX_hotSide.outfl.p;
  PHX.HX_hotSide.w = PHX.HX_hotSide.infl.m_flow / /*Real*/(PHX.HX_hotSide.Nt);
  PHX.HX_hotSide.infl.h_outflow = PHX.HX_hotSide.gas[1].h;
  PHX.HX_hotSide.outfl.h_outflow = PHX.HX_hotSide.gas[10].h;
  PHX.HX_hotSide.gas[1].h = sourceP_BAin.flange.h_outflow;
  PHX.HX_hotSide.gas[2].T = PHX.HX_hotSide.Ttilde[1];
  PHX.HX_hotSide.gas[3].T = PHX.HX_hotSide.Ttilde[2];
  PHX.HX_hotSide.gas[4].T = PHX.HX_hotSide.Ttilde[3];
  PHX.HX_hotSide.gas[5].T = PHX.HX_hotSide.Ttilde[4];
  PHX.HX_hotSide.gas[6].T = PHX.HX_hotSide.Ttilde[5];
  PHX.HX_hotSide.gas[7].T = PHX.HX_hotSide.Ttilde[6];
  PHX.HX_hotSide.gas[8].T = PHX.HX_hotSide.Ttilde[7];
  PHX.HX_hotSide.gas[9].T = PHX.HX_hotSide.Ttilde[8];
  PHX.HX_hotSide.gas[10].T = PHX.HX_hotSide.Ttilde[9];
  PHX.HX_hotSide.Tin = PHX.HX_hotSide.gas[1].T;
  PHX.HX_hotSide.M = (PHX.HX_hotSide.rhobar[1] + PHX.HX_hotSide.rhobar[2] + PHX.HX_hotSide.rhobar[3] + PHX.HX_hotSide.rhobar[4] + PHX.HX_hotSide.rhobar[5] + PHX.HX_hotSide.rhobar[6] + PHX.HX_hotSide.rhobar[7] + PHX.HX_hotSide.rhobar[8] + PHX.HX_hotSide.rhobar[9]) * PHX.HX_hotSide.A * PHX.HX_hotSide.l "Fluid mass (single tube)";
  PHX.HX_hotSide.Mtot = PHX.HX_hotSide.M * /*Real*/(PHX.HX_hotSide.Nt) "Fluid mass (total)";
  PHX.HX_hotSide.Tr = noEvent(PHX.HX_hotSide.M / max(PHX.HX_hotSide.infl.m_flow / /*Real*/(PHX.HX_hotSide.Nt), 1e-15)) "Residence time";
  assert(PHX.HX_hotSide.infl.m_flow > (-PHX.HX_hotSide.wnom * PHX.HX_hotSide.wnm), "Reverse flow not allowed, maybe you connected the component with wrong orientation");
  PHX.HX_coldSide.heatTransfer.w = {PHX.HX_coldSide.w, PHX.HX_coldSide.w, PHX.HX_coldSide.w, PHX.HX_coldSide.w, PHX.HX_coldSide.w, PHX.HX_coldSide.w, PHX.HX_coldSide.w, PHX.HX_coldSide.w, PHX.HX_coldSide.w, PHX.HX_coldSide.w};
  PHX.HX_coldSide.heatTransfer.Qvol = PHX.HX_coldSide.heatTransfer.Qw;
  PHX.HX_coldSide.heatTransfer.wall.T[1] = PHX.HX_coldSide.heatTransfer.T[2] "Ideal infinite heat transfer";
  PHX.HX_coldSide.heatTransfer.wall.T[2] = PHX.HX_coldSide.heatTransfer.T[3] "Ideal infinite heat transfer";
  PHX.HX_coldSide.heatTransfer.wall.T[3] = PHX.HX_coldSide.heatTransfer.T[4] "Ideal infinite heat transfer";
  PHX.HX_coldSide.heatTransfer.wall.T[4] = PHX.HX_coldSide.heatTransfer.T[5] "Ideal infinite heat transfer";
  PHX.HX_coldSide.heatTransfer.wall.T[5] = PHX.HX_coldSide.heatTransfer.T[6] "Ideal infinite heat transfer";
  PHX.HX_coldSide.heatTransfer.wall.T[6] = PHX.HX_coldSide.heatTransfer.T[7] "Ideal infinite heat transfer";
  PHX.HX_coldSide.heatTransfer.wall.T[7] = PHX.HX_coldSide.heatTransfer.T[8] "Ideal infinite heat transfer";
  PHX.HX_coldSide.heatTransfer.wall.T[8] = PHX.HX_coldSide.heatTransfer.T[9] "Ideal infinite heat transfer";
  PHX.HX_coldSide.heatTransfer.wall.T[9] = PHX.HX_coldSide.heatTransfer.T[10] "Ideal infinite heat transfer";
  PHX.HX_coldSide.heatTransfer.T[1] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.temperature(PHX.HX_coldSide.heatTransfer.fluidState[1]);
  PHX.HX_coldSide.heatTransfer.T[2] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.temperature(PHX.HX_coldSide.heatTransfer.fluidState[2]);
  PHX.HX_coldSide.heatTransfer.T[3] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.temperature(PHX.HX_coldSide.heatTransfer.fluidState[3]);
  PHX.HX_coldSide.heatTransfer.T[4] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.temperature(PHX.HX_coldSide.heatTransfer.fluidState[4]);
  PHX.HX_coldSide.heatTransfer.T[5] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.temperature(PHX.HX_coldSide.heatTransfer.fluidState[5]);
  PHX.HX_coldSide.heatTransfer.T[6] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.temperature(PHX.HX_coldSide.heatTransfer.fluidState[6]);
  PHX.HX_coldSide.heatTransfer.T[7] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.temperature(PHX.HX_coldSide.heatTransfer.fluidState[7]);
  PHX.HX_coldSide.heatTransfer.T[8] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.temperature(PHX.HX_coldSide.heatTransfer.fluidState[8]);
  PHX.HX_coldSide.heatTransfer.T[9] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.temperature(PHX.HX_coldSide.heatTransfer.fluidState[9]);
  PHX.HX_coldSide.heatTransfer.T[10] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.heatTransfer.Medium.temperature(PHX.HX_coldSide.heatTransfer.fluidState[10]);
  PHX.HX_coldSide.heatTransfer.Tw[1] = PHX.HX_coldSide.heatTransfer.wall.T[1];
  PHX.HX_coldSide.heatTransfer.Tw[2] = PHX.HX_coldSide.heatTransfer.wall.T[2];
  PHX.HX_coldSide.heatTransfer.Tw[3] = PHX.HX_coldSide.heatTransfer.wall.T[3];
  PHX.HX_coldSide.heatTransfer.Tw[4] = PHX.HX_coldSide.heatTransfer.wall.T[4];
  PHX.HX_coldSide.heatTransfer.Tw[5] = PHX.HX_coldSide.heatTransfer.wall.T[5];
  PHX.HX_coldSide.heatTransfer.Tw[6] = PHX.HX_coldSide.heatTransfer.wall.T[6];
  PHX.HX_coldSide.heatTransfer.Tw[7] = PHX.HX_coldSide.heatTransfer.wall.T[7];
  PHX.HX_coldSide.heatTransfer.Tw[8] = PHX.HX_coldSide.heatTransfer.wall.T[8];
  PHX.HX_coldSide.heatTransfer.Tw[9] = PHX.HX_coldSide.heatTransfer.wall.T[9];
  PHX.HX_coldSide.heatTransfer.Qw[1] = PHX.HX_coldSide.heatTransfer.wall.Q[1];
  PHX.HX_coldSide.heatTransfer.Qw[2] = PHX.HX_coldSide.heatTransfer.wall.Q[2];
  PHX.HX_coldSide.heatTransfer.Qw[3] = PHX.HX_coldSide.heatTransfer.wall.Q[3];
  PHX.HX_coldSide.heatTransfer.Qw[4] = PHX.HX_coldSide.heatTransfer.wall.Q[4];
  PHX.HX_coldSide.heatTransfer.Qw[5] = PHX.HX_coldSide.heatTransfer.wall.Q[5];
  PHX.HX_coldSide.heatTransfer.Qw[6] = PHX.HX_coldSide.heatTransfer.wall.Q[6];
  PHX.HX_coldSide.heatTransfer.Qw[7] = PHX.HX_coldSide.heatTransfer.wall.Q[7];
  PHX.HX_coldSide.heatTransfer.Qw[8] = PHX.HX_coldSide.heatTransfer.wall.Q[8];
  PHX.HX_coldSide.heatTransfer.Qw[9] = PHX.HX_coldSide.heatTransfer.wall.Q[9];
  PHX.HX_coldSide.heatTransfer.Q = PHX.HX_coldSide.heatTransfer.wall.Q[1] + PHX.HX_coldSide.heatTransfer.wall.Q[2] + PHX.HX_coldSide.heatTransfer.wall.Q[3] + PHX.HX_coldSide.heatTransfer.wall.Q[4] + PHX.HX_coldSide.heatTransfer.wall.Q[5] + PHX.HX_coldSide.heatTransfer.wall.Q[6] + PHX.HX_coldSide.heatTransfer.wall.Q[7] + PHX.HX_coldSide.heatTransfer.wall.Q[8] + PHX.HX_coldSide.heatTransfer.wall.Q[9];
  assert(PHX.HX_coldSide.gas[1].T >= 200.0 and PHX.HX_coldSide.gas[1].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_coldSide.gas[1].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_coldSide.gas[1].MM = 0.0289651159;
  PHX.HX_coldSide.gas[1].R = 287.0512249529787;
  PHX.HX_coldSide.gas[1].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_coldSide.gas[1].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_coldSide.gas[1].u = PHX.HX_coldSide.gas[1].h - PHX.HX_coldSide.gas[1].R * PHX.HX_coldSide.gas[1].T;
  PHX.HX_coldSide.gas[1].d = PHX.HX_coldSide.gas[1].p / (PHX.HX_coldSide.gas[1].R * PHX.HX_coldSide.gas[1].T);
  PHX.HX_coldSide.gas[1].state.T = PHX.HX_coldSide.gas[1].T;
  PHX.HX_coldSide.gas[1].state.p = PHX.HX_coldSide.gas[1].p;
  PHX.HX_coldSide.gas[1].X[1] = 1.0;
  assert(PHX.HX_coldSide.gas[1].X[1] >= -1e-05 and PHX.HX_coldSide.gas[1].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_coldSide.gas[1].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_coldSide.gas[1].p >= 0.0, "Pressure (= " + String(PHX.HX_coldSide.gas[1].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_coldSide.gas[1].T, 6, 0, true) + " K)");
  assert(PHX.HX_coldSide.gas[2].T >= 200.0 and PHX.HX_coldSide.gas[2].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_coldSide.gas[2].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_coldSide.gas[2].MM = 0.0289651159;
  PHX.HX_coldSide.gas[2].R = 287.0512249529787;
  PHX.HX_coldSide.gas[2].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_coldSide.gas[2].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_coldSide.gas[2].u = PHX.HX_coldSide.gas[2].h - PHX.HX_coldSide.gas[2].R * PHX.HX_coldSide.gas[2].T;
  PHX.HX_coldSide.gas[2].d = PHX.HX_coldSide.gas[2].p / (PHX.HX_coldSide.gas[2].R * PHX.HX_coldSide.gas[2].T);
  PHX.HX_coldSide.gas[2].state.T = PHX.HX_coldSide.gas[2].T;
  PHX.HX_coldSide.gas[2].state.p = PHX.HX_coldSide.gas[2].p;
  PHX.HX_coldSide.gas[2].X[1] = 1.0;
  assert(PHX.HX_coldSide.gas[2].X[1] >= -1e-05 and PHX.HX_coldSide.gas[2].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_coldSide.gas[2].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_coldSide.gas[2].p >= 0.0, "Pressure (= " + String(PHX.HX_coldSide.gas[2].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_coldSide.gas[2].T, 6, 0, true) + " K)");
  assert(PHX.HX_coldSide.gas[3].T >= 200.0 and PHX.HX_coldSide.gas[3].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_coldSide.gas[3].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_coldSide.gas[3].MM = 0.0289651159;
  PHX.HX_coldSide.gas[3].R = 287.0512249529787;
  PHX.HX_coldSide.gas[3].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_coldSide.gas[3].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_coldSide.gas[3].u = PHX.HX_coldSide.gas[3].h - PHX.HX_coldSide.gas[3].R * PHX.HX_coldSide.gas[3].T;
  PHX.HX_coldSide.gas[3].d = PHX.HX_coldSide.gas[3].p / (PHX.HX_coldSide.gas[3].R * PHX.HX_coldSide.gas[3].T);
  PHX.HX_coldSide.gas[3].state.T = PHX.HX_coldSide.gas[3].T;
  PHX.HX_coldSide.gas[3].state.p = PHX.HX_coldSide.gas[3].p;
  PHX.HX_coldSide.gas[3].X[1] = 1.0;
  assert(PHX.HX_coldSide.gas[3].X[1] >= -1e-05 and PHX.HX_coldSide.gas[3].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_coldSide.gas[3].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_coldSide.gas[3].p >= 0.0, "Pressure (= " + String(PHX.HX_coldSide.gas[3].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_coldSide.gas[3].T, 6, 0, true) + " K)");
  assert(PHX.HX_coldSide.gas[4].T >= 200.0 and PHX.HX_coldSide.gas[4].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_coldSide.gas[4].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_coldSide.gas[4].MM = 0.0289651159;
  PHX.HX_coldSide.gas[4].R = 287.0512249529787;
  PHX.HX_coldSide.gas[4].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_coldSide.gas[4].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_coldSide.gas[4].u = PHX.HX_coldSide.gas[4].h - PHX.HX_coldSide.gas[4].R * PHX.HX_coldSide.gas[4].T;
  PHX.HX_coldSide.gas[4].d = PHX.HX_coldSide.gas[4].p / (PHX.HX_coldSide.gas[4].R * PHX.HX_coldSide.gas[4].T);
  PHX.HX_coldSide.gas[4].state.T = PHX.HX_coldSide.gas[4].T;
  PHX.HX_coldSide.gas[4].state.p = PHX.HX_coldSide.gas[4].p;
  PHX.HX_coldSide.gas[4].X[1] = 1.0;
  assert(PHX.HX_coldSide.gas[4].X[1] >= -1e-05 and PHX.HX_coldSide.gas[4].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_coldSide.gas[4].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_coldSide.gas[4].p >= 0.0, "Pressure (= " + String(PHX.HX_coldSide.gas[4].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_coldSide.gas[4].T, 6, 0, true) + " K)");
  assert(PHX.HX_coldSide.gas[5].T >= 200.0 and PHX.HX_coldSide.gas[5].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_coldSide.gas[5].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_coldSide.gas[5].MM = 0.0289651159;
  PHX.HX_coldSide.gas[5].R = 287.0512249529787;
  PHX.HX_coldSide.gas[5].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_coldSide.gas[5].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_coldSide.gas[5].u = PHX.HX_coldSide.gas[5].h - PHX.HX_coldSide.gas[5].R * PHX.HX_coldSide.gas[5].T;
  PHX.HX_coldSide.gas[5].d = PHX.HX_coldSide.gas[5].p / (PHX.HX_coldSide.gas[5].R * PHX.HX_coldSide.gas[5].T);
  PHX.HX_coldSide.gas[5].state.T = PHX.HX_coldSide.gas[5].T;
  PHX.HX_coldSide.gas[5].state.p = PHX.HX_coldSide.gas[5].p;
  PHX.HX_coldSide.gas[5].X[1] = 1.0;
  assert(PHX.HX_coldSide.gas[5].X[1] >= -1e-05 and PHX.HX_coldSide.gas[5].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_coldSide.gas[5].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_coldSide.gas[5].p >= 0.0, "Pressure (= " + String(PHX.HX_coldSide.gas[5].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_coldSide.gas[5].T, 6, 0, true) + " K)");
  assert(PHX.HX_coldSide.gas[6].T >= 200.0 and PHX.HX_coldSide.gas[6].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_coldSide.gas[6].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_coldSide.gas[6].MM = 0.0289651159;
  PHX.HX_coldSide.gas[6].R = 287.0512249529787;
  PHX.HX_coldSide.gas[6].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_coldSide.gas[6].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_coldSide.gas[6].u = PHX.HX_coldSide.gas[6].h - PHX.HX_coldSide.gas[6].R * PHX.HX_coldSide.gas[6].T;
  PHX.HX_coldSide.gas[6].d = PHX.HX_coldSide.gas[6].p / (PHX.HX_coldSide.gas[6].R * PHX.HX_coldSide.gas[6].T);
  PHX.HX_coldSide.gas[6].state.T = PHX.HX_coldSide.gas[6].T;
  PHX.HX_coldSide.gas[6].state.p = PHX.HX_coldSide.gas[6].p;
  PHX.HX_coldSide.gas[6].X[1] = 1.0;
  assert(PHX.HX_coldSide.gas[6].X[1] >= -1e-05 and PHX.HX_coldSide.gas[6].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_coldSide.gas[6].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_coldSide.gas[6].p >= 0.0, "Pressure (= " + String(PHX.HX_coldSide.gas[6].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_coldSide.gas[6].T, 6, 0, true) + " K)");
  assert(PHX.HX_coldSide.gas[7].T >= 200.0 and PHX.HX_coldSide.gas[7].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_coldSide.gas[7].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_coldSide.gas[7].MM = 0.0289651159;
  PHX.HX_coldSide.gas[7].R = 287.0512249529787;
  PHX.HX_coldSide.gas[7].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_coldSide.gas[7].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_coldSide.gas[7].u = PHX.HX_coldSide.gas[7].h - PHX.HX_coldSide.gas[7].R * PHX.HX_coldSide.gas[7].T;
  PHX.HX_coldSide.gas[7].d = PHX.HX_coldSide.gas[7].p / (PHX.HX_coldSide.gas[7].R * PHX.HX_coldSide.gas[7].T);
  PHX.HX_coldSide.gas[7].state.T = PHX.HX_coldSide.gas[7].T;
  PHX.HX_coldSide.gas[7].state.p = PHX.HX_coldSide.gas[7].p;
  PHX.HX_coldSide.gas[7].X[1] = 1.0;
  assert(PHX.HX_coldSide.gas[7].X[1] >= -1e-05 and PHX.HX_coldSide.gas[7].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_coldSide.gas[7].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_coldSide.gas[7].p >= 0.0, "Pressure (= " + String(PHX.HX_coldSide.gas[7].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_coldSide.gas[7].T, 6, 0, true) + " K)");
  assert(PHX.HX_coldSide.gas[8].T >= 200.0 and PHX.HX_coldSide.gas[8].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_coldSide.gas[8].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_coldSide.gas[8].MM = 0.0289651159;
  PHX.HX_coldSide.gas[8].R = 287.0512249529787;
  PHX.HX_coldSide.gas[8].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_coldSide.gas[8].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_coldSide.gas[8].u = PHX.HX_coldSide.gas[8].h - PHX.HX_coldSide.gas[8].R * PHX.HX_coldSide.gas[8].T;
  PHX.HX_coldSide.gas[8].d = PHX.HX_coldSide.gas[8].p / (PHX.HX_coldSide.gas[8].R * PHX.HX_coldSide.gas[8].T);
  PHX.HX_coldSide.gas[8].state.T = PHX.HX_coldSide.gas[8].T;
  PHX.HX_coldSide.gas[8].state.p = PHX.HX_coldSide.gas[8].p;
  PHX.HX_coldSide.gas[8].X[1] = 1.0;
  assert(PHX.HX_coldSide.gas[8].X[1] >= -1e-05 and PHX.HX_coldSide.gas[8].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_coldSide.gas[8].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_coldSide.gas[8].p >= 0.0, "Pressure (= " + String(PHX.HX_coldSide.gas[8].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_coldSide.gas[8].T, 6, 0, true) + " K)");
  assert(PHX.HX_coldSide.gas[9].T >= 200.0 and PHX.HX_coldSide.gas[9].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_coldSide.gas[9].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_coldSide.gas[9].MM = 0.0289651159;
  PHX.HX_coldSide.gas[9].R = 287.0512249529787;
  PHX.HX_coldSide.gas[9].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_coldSide.gas[9].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_coldSide.gas[9].u = PHX.HX_coldSide.gas[9].h - PHX.HX_coldSide.gas[9].R * PHX.HX_coldSide.gas[9].T;
  PHX.HX_coldSide.gas[9].d = PHX.HX_coldSide.gas[9].p / (PHX.HX_coldSide.gas[9].R * PHX.HX_coldSide.gas[9].T);
  PHX.HX_coldSide.gas[9].state.T = PHX.HX_coldSide.gas[9].T;
  PHX.HX_coldSide.gas[9].state.p = PHX.HX_coldSide.gas[9].p;
  PHX.HX_coldSide.gas[9].X[1] = 1.0;
  assert(PHX.HX_coldSide.gas[9].X[1] >= -1e-05 and PHX.HX_coldSide.gas[9].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_coldSide.gas[9].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_coldSide.gas[9].p >= 0.0, "Pressure (= " + String(PHX.HX_coldSide.gas[9].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_coldSide.gas[9].T, 6, 0, true) + " K)");
  assert(PHX.HX_coldSide.gas[10].T >= 200.0 and PHX.HX_coldSide.gas[10].T <= 6000.0, "
  Temperature T (= " + String(PHX.HX_coldSide.gas[10].T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  PHX.HX_coldSide.gas[10].MM = 0.0289651159;
  PHX.HX_coldSide.gas[10].R = 287.0512249529787;
  PHX.HX_coldSide.gas[10].h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), PHX.HX_coldSide.gas[10].T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  PHX.HX_coldSide.gas[10].u = PHX.HX_coldSide.gas[10].h - PHX.HX_coldSide.gas[10].R * PHX.HX_coldSide.gas[10].T;
  PHX.HX_coldSide.gas[10].d = PHX.HX_coldSide.gas[10].p / (PHX.HX_coldSide.gas[10].R * PHX.HX_coldSide.gas[10].T);
  PHX.HX_coldSide.gas[10].state.T = PHX.HX_coldSide.gas[10].T;
  PHX.HX_coldSide.gas[10].state.p = PHX.HX_coldSide.gas[10].p;
  PHX.HX_coldSide.gas[10].X[1] = 1.0;
  assert(PHX.HX_coldSide.gas[10].X[1] >= -1e-05 and PHX.HX_coldSide.gas[10].X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(PHX.HX_coldSide.gas[10].X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(PHX.HX_coldSide.gas[10].p >= 0.0, "Pressure (= " + String(PHX.HX_coldSide.gas[10].p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(PHX.HX_coldSide.gas[10].T, 6, 0, true) + " K)");
  PHX.HX_coldSide.Q_single = {PHX.HX_coldSide.heatTransfer.Qvol[1] / /*Real*/(PHX.HX_coldSide.Nt), PHX.HX_coldSide.heatTransfer.Qvol[2] / /*Real*/(PHX.HX_coldSide.Nt), PHX.HX_coldSide.heatTransfer.Qvol[3] / /*Real*/(PHX.HX_coldSide.Nt), PHX.HX_coldSide.heatTransfer.Qvol[4] / /*Real*/(PHX.HX_coldSide.Nt), PHX.HX_coldSide.heatTransfer.Qvol[5] / /*Real*/(PHX.HX_coldSide.Nt), PHX.HX_coldSide.heatTransfer.Qvol[6] / /*Real*/(PHX.HX_coldSide.Nt), PHX.HX_coldSide.heatTransfer.Qvol[7] / /*Real*/(PHX.HX_coldSide.Nt), PHX.HX_coldSide.heatTransfer.Qvol[8] / /*Real*/(PHX.HX_coldSide.Nt), PHX.HX_coldSide.heatTransfer.Qvol[9] / /*Real*/(PHX.HX_coldSide.Nt)};
  assert(PHX.HX_coldSide.dpnom > 0.0, "dpnom=0 not supported, it is also used in the homotopy trasformation during the inizialization");
  PHX.HX_coldSide.omega_hyd = 4.0 * PHX.HX_coldSide.A / PHX.HX_coldSide.Dhyd;
  PHX.HX_coldSide.Kf = PHX.HX_coldSide.Cfnom * PHX.HX_coldSide.omega_hyd * PHX.HX_coldSide.L / (2.0 * PHX.HX_coldSide.A ^ 3.0) * PHX.HX_coldSide.Kfc;
  PHX.HX_coldSide.Cf = PHX.HX_coldSide.Cfnom * PHX.HX_coldSide.Kfc;
  assert(PHX.HX_coldSide.Kf >= 0.0, "Negative friction coefficient");
  PHX.HX_coldSide.Kfl = PHX.HX_coldSide.wnom / /*Real*/(PHX.HX_coldSide.Nt) * PHX.HX_coldSide.wnf * PHX.HX_coldSide.Kf "Linear friction factor";
  PHX.HX_coldSide.dwdt = 0.0;
  PHX.HX_coldSide.dMdt[1] + PHX.HX_coldSide.dMdt[2] + PHX.HX_coldSide.dMdt[3] + PHX.HX_coldSide.dMdt[4] + PHX.HX_coldSide.dMdt[5] + PHX.HX_coldSide.dMdt[6] + PHX.HX_coldSide.dMdt[7] + PHX.HX_coldSide.dMdt[8] + PHX.HX_coldSide.dMdt[9] = (PHX.HX_coldSide.infl.m_flow + PHX.HX_coldSide.outfl.m_flow) / /*Real*/(PHX.HX_coldSide.Nt) "Mass balance";
  PHX.HX_coldSide.L / PHX.HX_coldSide.A * PHX.HX_coldSide.dwdt + PHX.HX_coldSide.outfl.p - PHX.HX_coldSide.infl.p + PHX.HX_coldSide.Dpfric = 0.0 "Momentum balance";
  PHX.HX_coldSide.Dpfric = homotopy(smooth(1, PHX.HX_coldSide.Kf * PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.squareReg(PHX.HX_coldSide.w, PHX.HX_coldSide.wnom / /*Real*/(PHX.HX_coldSide.Nt) * PHX.HX_coldSide.wnf)) * (PHX.HX_coldSide.vbar[1] + PHX.HX_coldSide.vbar[2] + PHX.HX_coldSide.vbar[3] + PHX.HX_coldSide.vbar[4] + PHX.HX_coldSide.vbar[5] + PHX.HX_coldSide.vbar[6] + PHX.HX_coldSide.vbar[7] + PHX.HX_coldSide.vbar[8] + PHX.HX_coldSide.vbar[9]) / 9.0, PHX.HX_coldSide.dpnom / (PHX.HX_coldSide.wnom / /*Real*/(PHX.HX_coldSide.Nt)) * PHX.HX_coldSide.w) "Pressure drop due to friction";
  PHX.HX_coldSide.A * PHX.HX_coldSide.l * PHX.HX_coldSide.rhobar[1] * PHX.HX_coldSide.cvbar[1] * der(PHX.HX_coldSide.Ttilde[1]) + PHX.HX_coldSide.wbar[1] * (PHX.HX_coldSide.gas[2].h - PHX.HX_coldSide.gas[1].h) = PHX.HX_coldSide.Q_single[1] "Energy balance";
  PHX.HX_coldSide.dMdt[1] = PHX.HX_coldSide.A * PHX.HX_coldSide.l * (PHX.HX_coldSide.drbdp[1] * der(PHX.HX_coldSide.p) + PHX.HX_coldSide.drbdT1[1] * der(PHX.HX_coldSide.gas[1].T) + PHX.HX_coldSide.drbdT2[1] * der(PHX.HX_coldSide.gas[2].T) + vector(PHX.HX_coldSide.drbdX1[1,:]) * vector(der(PHX.HX_coldSide.gas[1].X)) + vector(PHX.HX_coldSide.drbdX2[1,:]) * vector(der(PHX.HX_coldSide.gas[2].X))) "Mass balance";
  PHX.HX_coldSide.rhobar[1] = PHX.HX_coldSide.gas[2].d;
  PHX.HX_coldSide.drbdp[1] = PHX.HX_coldSide.dddp[2];
  PHX.HX_coldSide.drbdT1[1] = 0.0;
  PHX.HX_coldSide.drbdT2[1] = PHX.HX_coldSide.dddT[2];
  PHX.HX_coldSide.drbdX1[1,1] = 0.0;
  PHX.HX_coldSide.drbdX2[1,1] = PHX.HX_coldSide.dddX[2,1];
  PHX.HX_coldSide.vbar[1] = 1.0 / PHX.HX_coldSide.rhobar[1];
  PHX.HX_coldSide.wbar[1] = PHX.HX_coldSide.infl.m_flow / /*Real*/(PHX.HX_coldSide.Nt) - PHX.HX_coldSide.dMdt[1] / 2.0;
  PHX.HX_coldSide.cvbar[1] = (PHX.HX_coldSide.cv[1] + PHX.HX_coldSide.cv[2]) / 2.0;
  PHX.HX_coldSide.A * PHX.HX_coldSide.l * PHX.HX_coldSide.rhobar[2] * PHX.HX_coldSide.cvbar[2] * der(PHX.HX_coldSide.Ttilde[2]) + PHX.HX_coldSide.wbar[2] * (PHX.HX_coldSide.gas[3].h - PHX.HX_coldSide.gas[2].h) = PHX.HX_coldSide.Q_single[2] "Energy balance";
  PHX.HX_coldSide.dMdt[2] = PHX.HX_coldSide.A * PHX.HX_coldSide.l * (PHX.HX_coldSide.drbdp[2] * der(PHX.HX_coldSide.p) + PHX.HX_coldSide.drbdT1[2] * der(PHX.HX_coldSide.gas[2].T) + PHX.HX_coldSide.drbdT2[2] * der(PHX.HX_coldSide.gas[3].T) + vector(PHX.HX_coldSide.drbdX1[2,:]) * vector(der(PHX.HX_coldSide.gas[2].X)) + vector(PHX.HX_coldSide.drbdX2[2,:]) * vector(der(PHX.HX_coldSide.gas[3].X))) "Mass balance";
  PHX.HX_coldSide.rhobar[2] = (PHX.HX_coldSide.gas[2].d + PHX.HX_coldSide.gas[3].d) / 2.0;
  PHX.HX_coldSide.drbdp[2] = (PHX.HX_coldSide.dddp[2] + PHX.HX_coldSide.dddp[3]) / 2.0;
  PHX.HX_coldSide.drbdT1[2] = PHX.HX_coldSide.dddT[2] / 2.0;
  PHX.HX_coldSide.drbdT2[2] = PHX.HX_coldSide.dddT[3] / 2.0;
  PHX.HX_coldSide.drbdX1[2,1] = PHX.HX_coldSide.dddX[2,1] / 2.0;
  PHX.HX_coldSide.drbdX2[2,1] = PHX.HX_coldSide.dddX[3,1] / 2.0;
  PHX.HX_coldSide.vbar[2] = 1.0 / PHX.HX_coldSide.rhobar[2];
  PHX.HX_coldSide.wbar[2] = PHX.HX_coldSide.infl.m_flow / /*Real*/(PHX.HX_coldSide.Nt) - PHX.HX_coldSide.dMdt[1] - PHX.HX_coldSide.dMdt[2] / 2.0;
  PHX.HX_coldSide.cvbar[2] = (PHX.HX_coldSide.cv[2] + PHX.HX_coldSide.cv[3]) / 2.0;
  PHX.HX_coldSide.A * PHX.HX_coldSide.l * PHX.HX_coldSide.rhobar[3] * PHX.HX_coldSide.cvbar[3] * der(PHX.HX_coldSide.Ttilde[3]) + PHX.HX_coldSide.wbar[3] * (PHX.HX_coldSide.gas[4].h - PHX.HX_coldSide.gas[3].h) = PHX.HX_coldSide.Q_single[3] "Energy balance";
  PHX.HX_coldSide.dMdt[3] = PHX.HX_coldSide.A * PHX.HX_coldSide.l * (PHX.HX_coldSide.drbdp[3] * der(PHX.HX_coldSide.p) + PHX.HX_coldSide.drbdT1[3] * der(PHX.HX_coldSide.gas[3].T) + PHX.HX_coldSide.drbdT2[3] * der(PHX.HX_coldSide.gas[4].T) + vector(PHX.HX_coldSide.drbdX1[3,:]) * vector(der(PHX.HX_coldSide.gas[3].X)) + vector(PHX.HX_coldSide.drbdX2[3,:]) * vector(der(PHX.HX_coldSide.gas[4].X))) "Mass balance";
  PHX.HX_coldSide.rhobar[3] = (PHX.HX_coldSide.gas[3].d + PHX.HX_coldSide.gas[4].d) / 2.0;
  PHX.HX_coldSide.drbdp[3] = (PHX.HX_coldSide.dddp[3] + PHX.HX_coldSide.dddp[4]) / 2.0;
  PHX.HX_coldSide.drbdT1[3] = PHX.HX_coldSide.dddT[3] / 2.0;
  PHX.HX_coldSide.drbdT2[3] = PHX.HX_coldSide.dddT[4] / 2.0;
  PHX.HX_coldSide.drbdX1[3,1] = PHX.HX_coldSide.dddX[3,1] / 2.0;
  PHX.HX_coldSide.drbdX2[3,1] = PHX.HX_coldSide.dddX[4,1] / 2.0;
  PHX.HX_coldSide.vbar[3] = 1.0 / PHX.HX_coldSide.rhobar[3];
  PHX.HX_coldSide.wbar[3] = PHX.HX_coldSide.infl.m_flow / /*Real*/(PHX.HX_coldSide.Nt) - (PHX.HX_coldSide.dMdt[1] + PHX.HX_coldSide.dMdt[2]) - PHX.HX_coldSide.dMdt[3] / 2.0;
  PHX.HX_coldSide.cvbar[3] = (PHX.HX_coldSide.cv[3] + PHX.HX_coldSide.cv[4]) / 2.0;
  PHX.HX_coldSide.A * PHX.HX_coldSide.l * PHX.HX_coldSide.rhobar[4] * PHX.HX_coldSide.cvbar[4] * der(PHX.HX_coldSide.Ttilde[4]) + PHX.HX_coldSide.wbar[4] * (PHX.HX_coldSide.gas[5].h - PHX.HX_coldSide.gas[4].h) = PHX.HX_coldSide.Q_single[4] "Energy balance";
  PHX.HX_coldSide.dMdt[4] = PHX.HX_coldSide.A * PHX.HX_coldSide.l * (PHX.HX_coldSide.drbdp[4] * der(PHX.HX_coldSide.p) + PHX.HX_coldSide.drbdT1[4] * der(PHX.HX_coldSide.gas[4].T) + PHX.HX_coldSide.drbdT2[4] * der(PHX.HX_coldSide.gas[5].T) + vector(PHX.HX_coldSide.drbdX1[4,:]) * vector(der(PHX.HX_coldSide.gas[4].X)) + vector(PHX.HX_coldSide.drbdX2[4,:]) * vector(der(PHX.HX_coldSide.gas[5].X))) "Mass balance";
  PHX.HX_coldSide.rhobar[4] = (PHX.HX_coldSide.gas[4].d + PHX.HX_coldSide.gas[5].d) / 2.0;
  PHX.HX_coldSide.drbdp[4] = (PHX.HX_coldSide.dddp[4] + PHX.HX_coldSide.dddp[5]) / 2.0;
  PHX.HX_coldSide.drbdT1[4] = PHX.HX_coldSide.dddT[4] / 2.0;
  PHX.HX_coldSide.drbdT2[4] = PHX.HX_coldSide.dddT[5] / 2.0;
  PHX.HX_coldSide.drbdX1[4,1] = PHX.HX_coldSide.dddX[4,1] / 2.0;
  PHX.HX_coldSide.drbdX2[4,1] = PHX.HX_coldSide.dddX[5,1] / 2.0;
  PHX.HX_coldSide.vbar[4] = 1.0 / PHX.HX_coldSide.rhobar[4];
  PHX.HX_coldSide.wbar[4] = PHX.HX_coldSide.infl.m_flow / /*Real*/(PHX.HX_coldSide.Nt) - (PHX.HX_coldSide.dMdt[1] + PHX.HX_coldSide.dMdt[2] + PHX.HX_coldSide.dMdt[3]) - PHX.HX_coldSide.dMdt[4] / 2.0;
  PHX.HX_coldSide.cvbar[4] = (PHX.HX_coldSide.cv[4] + PHX.HX_coldSide.cv[5]) / 2.0;
  PHX.HX_coldSide.A * PHX.HX_coldSide.l * PHX.HX_coldSide.rhobar[5] * PHX.HX_coldSide.cvbar[5] * der(PHX.HX_coldSide.Ttilde[5]) + PHX.HX_coldSide.wbar[5] * (PHX.HX_coldSide.gas[6].h - PHX.HX_coldSide.gas[5].h) = PHX.HX_coldSide.Q_single[5] "Energy balance";
  PHX.HX_coldSide.dMdt[5] = PHX.HX_coldSide.A * PHX.HX_coldSide.l * (PHX.HX_coldSide.drbdp[5] * der(PHX.HX_coldSide.p) + PHX.HX_coldSide.drbdT1[5] * der(PHX.HX_coldSide.gas[5].T) + PHX.HX_coldSide.drbdT2[5] * der(PHX.HX_coldSide.gas[6].T) + vector(PHX.HX_coldSide.drbdX1[5,:]) * vector(der(PHX.HX_coldSide.gas[5].X)) + vector(PHX.HX_coldSide.drbdX2[5,:]) * vector(der(PHX.HX_coldSide.gas[6].X))) "Mass balance";
  PHX.HX_coldSide.rhobar[5] = (PHX.HX_coldSide.gas[5].d + PHX.HX_coldSide.gas[6].d) / 2.0;
  PHX.HX_coldSide.drbdp[5] = (PHX.HX_coldSide.dddp[5] + PHX.HX_coldSide.dddp[6]) / 2.0;
  PHX.HX_coldSide.drbdT1[5] = PHX.HX_coldSide.dddT[5] / 2.0;
  PHX.HX_coldSide.drbdT2[5] = PHX.HX_coldSide.dddT[6] / 2.0;
  PHX.HX_coldSide.drbdX1[5,1] = PHX.HX_coldSide.dddX[5,1] / 2.0;
  PHX.HX_coldSide.drbdX2[5,1] = PHX.HX_coldSide.dddX[6,1] / 2.0;
  PHX.HX_coldSide.vbar[5] = 1.0 / PHX.HX_coldSide.rhobar[5];
  PHX.HX_coldSide.wbar[5] = PHX.HX_coldSide.infl.m_flow / /*Real*/(PHX.HX_coldSide.Nt) - (PHX.HX_coldSide.dMdt[1] + PHX.HX_coldSide.dMdt[2] + PHX.HX_coldSide.dMdt[3] + PHX.HX_coldSide.dMdt[4]) - PHX.HX_coldSide.dMdt[5] / 2.0;
  PHX.HX_coldSide.cvbar[5] = (PHX.HX_coldSide.cv[5] + PHX.HX_coldSide.cv[6]) / 2.0;
  PHX.HX_coldSide.A * PHX.HX_coldSide.l * PHX.HX_coldSide.rhobar[6] * PHX.HX_coldSide.cvbar[6] * der(PHX.HX_coldSide.Ttilde[6]) + PHX.HX_coldSide.wbar[6] * (PHX.HX_coldSide.gas[7].h - PHX.HX_coldSide.gas[6].h) = PHX.HX_coldSide.Q_single[6] "Energy balance";
  PHX.HX_coldSide.dMdt[6] = PHX.HX_coldSide.A * PHX.HX_coldSide.l * (PHX.HX_coldSide.drbdp[6] * der(PHX.HX_coldSide.p) + PHX.HX_coldSide.drbdT1[6] * der(PHX.HX_coldSide.gas[6].T) + PHX.HX_coldSide.drbdT2[6] * der(PHX.HX_coldSide.gas[7].T) + vector(PHX.HX_coldSide.drbdX1[6,:]) * vector(der(PHX.HX_coldSide.gas[6].X)) + vector(PHX.HX_coldSide.drbdX2[6,:]) * vector(der(PHX.HX_coldSide.gas[7].X))) "Mass balance";
  PHX.HX_coldSide.rhobar[6] = (PHX.HX_coldSide.gas[6].d + PHX.HX_coldSide.gas[7].d) / 2.0;
  PHX.HX_coldSide.drbdp[6] = (PHX.HX_coldSide.dddp[6] + PHX.HX_coldSide.dddp[7]) / 2.0;
  PHX.HX_coldSide.drbdT1[6] = PHX.HX_coldSide.dddT[6] / 2.0;
  PHX.HX_coldSide.drbdT2[6] = PHX.HX_coldSide.dddT[7] / 2.0;
  PHX.HX_coldSide.drbdX1[6,1] = PHX.HX_coldSide.dddX[6,1] / 2.0;
  PHX.HX_coldSide.drbdX2[6,1] = PHX.HX_coldSide.dddX[7,1] / 2.0;
  PHX.HX_coldSide.vbar[6] = 1.0 / PHX.HX_coldSide.rhobar[6];
  PHX.HX_coldSide.wbar[6] = PHX.HX_coldSide.infl.m_flow / /*Real*/(PHX.HX_coldSide.Nt) - (PHX.HX_coldSide.dMdt[1] + PHX.HX_coldSide.dMdt[2] + PHX.HX_coldSide.dMdt[3] + PHX.HX_coldSide.dMdt[4] + PHX.HX_coldSide.dMdt[5]) - PHX.HX_coldSide.dMdt[6] / 2.0;
  PHX.HX_coldSide.cvbar[6] = (PHX.HX_coldSide.cv[6] + PHX.HX_coldSide.cv[7]) / 2.0;
  PHX.HX_coldSide.A * PHX.HX_coldSide.l * PHX.HX_coldSide.rhobar[7] * PHX.HX_coldSide.cvbar[7] * der(PHX.HX_coldSide.Ttilde[7]) + PHX.HX_coldSide.wbar[7] * (PHX.HX_coldSide.gas[8].h - PHX.HX_coldSide.gas[7].h) = PHX.HX_coldSide.Q_single[7] "Energy balance";
  PHX.HX_coldSide.dMdt[7] = PHX.HX_coldSide.A * PHX.HX_coldSide.l * (PHX.HX_coldSide.drbdp[7] * der(PHX.HX_coldSide.p) + PHX.HX_coldSide.drbdT1[7] * der(PHX.HX_coldSide.gas[7].T) + PHX.HX_coldSide.drbdT2[7] * der(PHX.HX_coldSide.gas[8].T) + vector(PHX.HX_coldSide.drbdX1[7,:]) * vector(der(PHX.HX_coldSide.gas[7].X)) + vector(PHX.HX_coldSide.drbdX2[7,:]) * vector(der(PHX.HX_coldSide.gas[8].X))) "Mass balance";
  PHX.HX_coldSide.rhobar[7] = (PHX.HX_coldSide.gas[7].d + PHX.HX_coldSide.gas[8].d) / 2.0;
  PHX.HX_coldSide.drbdp[7] = (PHX.HX_coldSide.dddp[7] + PHX.HX_coldSide.dddp[8]) / 2.0;
  PHX.HX_coldSide.drbdT1[7] = PHX.HX_coldSide.dddT[7] / 2.0;
  PHX.HX_coldSide.drbdT2[7] = PHX.HX_coldSide.dddT[8] / 2.0;
  PHX.HX_coldSide.drbdX1[7,1] = PHX.HX_coldSide.dddX[7,1] / 2.0;
  PHX.HX_coldSide.drbdX2[7,1] = PHX.HX_coldSide.dddX[8,1] / 2.0;
  PHX.HX_coldSide.vbar[7] = 1.0 / PHX.HX_coldSide.rhobar[7];
  PHX.HX_coldSide.wbar[7] = PHX.HX_coldSide.infl.m_flow / /*Real*/(PHX.HX_coldSide.Nt) - (PHX.HX_coldSide.dMdt[1] + PHX.HX_coldSide.dMdt[2] + PHX.HX_coldSide.dMdt[3] + PHX.HX_coldSide.dMdt[4] + PHX.HX_coldSide.dMdt[5] + PHX.HX_coldSide.dMdt[6]) - PHX.HX_coldSide.dMdt[7] / 2.0;
  PHX.HX_coldSide.cvbar[7] = (PHX.HX_coldSide.cv[7] + PHX.HX_coldSide.cv[8]) / 2.0;
  PHX.HX_coldSide.A * PHX.HX_coldSide.l * PHX.HX_coldSide.rhobar[8] * PHX.HX_coldSide.cvbar[8] * der(PHX.HX_coldSide.Ttilde[8]) + PHX.HX_coldSide.wbar[8] * (PHX.HX_coldSide.gas[9].h - PHX.HX_coldSide.gas[8].h) = PHX.HX_coldSide.Q_single[8] "Energy balance";
  PHX.HX_coldSide.dMdt[8] = PHX.HX_coldSide.A * PHX.HX_coldSide.l * (PHX.HX_coldSide.drbdp[8] * der(PHX.HX_coldSide.p) + PHX.HX_coldSide.drbdT1[8] * der(PHX.HX_coldSide.gas[8].T) + PHX.HX_coldSide.drbdT2[8] * der(PHX.HX_coldSide.gas[9].T) + vector(PHX.HX_coldSide.drbdX1[8,:]) * vector(der(PHX.HX_coldSide.gas[8].X)) + vector(PHX.HX_coldSide.drbdX2[8,:]) * vector(der(PHX.HX_coldSide.gas[9].X))) "Mass balance";
  PHX.HX_coldSide.rhobar[8] = (PHX.HX_coldSide.gas[8].d + PHX.HX_coldSide.gas[9].d) / 2.0;
  PHX.HX_coldSide.drbdp[8] = (PHX.HX_coldSide.dddp[8] + PHX.HX_coldSide.dddp[9]) / 2.0;
  PHX.HX_coldSide.drbdT1[8] = PHX.HX_coldSide.dddT[8] / 2.0;
  PHX.HX_coldSide.drbdT2[8] = PHX.HX_coldSide.dddT[9] / 2.0;
  PHX.HX_coldSide.drbdX1[8,1] = PHX.HX_coldSide.dddX[8,1] / 2.0;
  PHX.HX_coldSide.drbdX2[8,1] = PHX.HX_coldSide.dddX[9,1] / 2.0;
  PHX.HX_coldSide.vbar[8] = 1.0 / PHX.HX_coldSide.rhobar[8];
  PHX.HX_coldSide.wbar[8] = PHX.HX_coldSide.infl.m_flow / /*Real*/(PHX.HX_coldSide.Nt) - (PHX.HX_coldSide.dMdt[1] + PHX.HX_coldSide.dMdt[2] + PHX.HX_coldSide.dMdt[3] + PHX.HX_coldSide.dMdt[4] + PHX.HX_coldSide.dMdt[5] + PHX.HX_coldSide.dMdt[6] + PHX.HX_coldSide.dMdt[7]) - PHX.HX_coldSide.dMdt[8] / 2.0;
  PHX.HX_coldSide.cvbar[8] = (PHX.HX_coldSide.cv[8] + PHX.HX_coldSide.cv[9]) / 2.0;
  PHX.HX_coldSide.A * PHX.HX_coldSide.l * PHX.HX_coldSide.rhobar[9] * PHX.HX_coldSide.cvbar[9] * der(PHX.HX_coldSide.Ttilde[9]) + PHX.HX_coldSide.wbar[9] * (PHX.HX_coldSide.gas[10].h - PHX.HX_coldSide.gas[9].h) = PHX.HX_coldSide.Q_single[9] "Energy balance";
  PHX.HX_coldSide.dMdt[9] = PHX.HX_coldSide.A * PHX.HX_coldSide.l * (PHX.HX_coldSide.drbdp[9] * der(PHX.HX_coldSide.p) + PHX.HX_coldSide.drbdT1[9] * der(PHX.HX_coldSide.gas[9].T) + PHX.HX_coldSide.drbdT2[9] * der(PHX.HX_coldSide.gas[10].T) + vector(PHX.HX_coldSide.drbdX1[9,:]) * vector(der(PHX.HX_coldSide.gas[9].X)) + vector(PHX.HX_coldSide.drbdX2[9,:]) * vector(der(PHX.HX_coldSide.gas[10].X))) "Mass balance";
  PHX.HX_coldSide.rhobar[9] = (PHX.HX_coldSide.gas[9].d + PHX.HX_coldSide.gas[10].d) / 2.0;
  PHX.HX_coldSide.drbdp[9] = (PHX.HX_coldSide.dddp[9] + PHX.HX_coldSide.dddp[10]) / 2.0;
  PHX.HX_coldSide.drbdT1[9] = PHX.HX_coldSide.dddT[9] / 2.0;
  PHX.HX_coldSide.drbdT2[9] = PHX.HX_coldSide.dddT[10] / 2.0;
  PHX.HX_coldSide.drbdX1[9,1] = PHX.HX_coldSide.dddX[9,1] / 2.0;
  PHX.HX_coldSide.drbdX2[9,1] = PHX.HX_coldSide.dddX[10,1] / 2.0;
  PHX.HX_coldSide.vbar[9] = 1.0 / PHX.HX_coldSide.rhobar[9];
  PHX.HX_coldSide.wbar[9] = PHX.HX_coldSide.infl.m_flow / /*Real*/(PHX.HX_coldSide.Nt) - (PHX.HX_coldSide.dMdt[1] + PHX.HX_coldSide.dMdt[2] + PHX.HX_coldSide.dMdt[3] + PHX.HX_coldSide.dMdt[4] + PHX.HX_coldSide.dMdt[5] + PHX.HX_coldSide.dMdt[6] + PHX.HX_coldSide.dMdt[7] + PHX.HX_coldSide.dMdt[8]) - PHX.HX_coldSide.dMdt[9] / 2.0;
  PHX.HX_coldSide.cvbar[9] = (PHX.HX_coldSide.cv[9] + PHX.HX_coldSide.cv[10]) / 2.0;
  PHX.HX_coldSide.Q = PHX.HX_coldSide.heatTransfer.Q "Total heat flow through the lateral boundary";
  PHX.HX_coldSide.Xtilde[1,1] = 1.0;
  PHX.HX_coldSide.u[1] = PHX.HX_coldSide.w / (PHX.HX_coldSide.gas[1].d * PHX.HX_coldSide.A) "Gas velocity";
  PHX.HX_coldSide.gas[1].p = PHX.HX_coldSide.p;
  PHX.HX_coldSide.gas[1].T = PHX.HX_coldSide.T[1];
  PHX.HX_coldSide.gas[1].h = PHX.HX_coldSide.h[1];
  PHX.HX_coldSide.u[2] = PHX.HX_coldSide.w / (PHX.HX_coldSide.gas[2].d * PHX.HX_coldSide.A) "Gas velocity";
  PHX.HX_coldSide.gas[2].p = PHX.HX_coldSide.p;
  PHX.HX_coldSide.gas[2].T = PHX.HX_coldSide.T[2];
  PHX.HX_coldSide.gas[2].h = PHX.HX_coldSide.h[2];
  PHX.HX_coldSide.u[3] = PHX.HX_coldSide.w / (PHX.HX_coldSide.gas[3].d * PHX.HX_coldSide.A) "Gas velocity";
  PHX.HX_coldSide.gas[3].p = PHX.HX_coldSide.p;
  PHX.HX_coldSide.gas[3].T = PHX.HX_coldSide.T[3];
  PHX.HX_coldSide.gas[3].h = PHX.HX_coldSide.h[3];
  PHX.HX_coldSide.u[4] = PHX.HX_coldSide.w / (PHX.HX_coldSide.gas[4].d * PHX.HX_coldSide.A) "Gas velocity";
  PHX.HX_coldSide.gas[4].p = PHX.HX_coldSide.p;
  PHX.HX_coldSide.gas[4].T = PHX.HX_coldSide.T[4];
  PHX.HX_coldSide.gas[4].h = PHX.HX_coldSide.h[4];
  PHX.HX_coldSide.u[5] = PHX.HX_coldSide.w / (PHX.HX_coldSide.gas[5].d * PHX.HX_coldSide.A) "Gas velocity";
  PHX.HX_coldSide.gas[5].p = PHX.HX_coldSide.p;
  PHX.HX_coldSide.gas[5].T = PHX.HX_coldSide.T[5];
  PHX.HX_coldSide.gas[5].h = PHX.HX_coldSide.h[5];
  PHX.HX_coldSide.u[6] = PHX.HX_coldSide.w / (PHX.HX_coldSide.gas[6].d * PHX.HX_coldSide.A) "Gas velocity";
  PHX.HX_coldSide.gas[6].p = PHX.HX_coldSide.p;
  PHX.HX_coldSide.gas[6].T = PHX.HX_coldSide.T[6];
  PHX.HX_coldSide.gas[6].h = PHX.HX_coldSide.h[6];
  PHX.HX_coldSide.u[7] = PHX.HX_coldSide.w / (PHX.HX_coldSide.gas[7].d * PHX.HX_coldSide.A) "Gas velocity";
  PHX.HX_coldSide.gas[7].p = PHX.HX_coldSide.p;
  PHX.HX_coldSide.gas[7].T = PHX.HX_coldSide.T[7];
  PHX.HX_coldSide.gas[7].h = PHX.HX_coldSide.h[7];
  PHX.HX_coldSide.u[8] = PHX.HX_coldSide.w / (PHX.HX_coldSide.gas[8].d * PHX.HX_coldSide.A) "Gas velocity";
  PHX.HX_coldSide.gas[8].p = PHX.HX_coldSide.p;
  PHX.HX_coldSide.gas[8].T = PHX.HX_coldSide.T[8];
  PHX.HX_coldSide.gas[8].h = PHX.HX_coldSide.h[8];
  PHX.HX_coldSide.u[9] = PHX.HX_coldSide.w / (PHX.HX_coldSide.gas[9].d * PHX.HX_coldSide.A) "Gas velocity";
  PHX.HX_coldSide.gas[9].p = PHX.HX_coldSide.p;
  PHX.HX_coldSide.gas[9].T = PHX.HX_coldSide.T[9];
  PHX.HX_coldSide.gas[9].h = PHX.HX_coldSide.h[9];
  PHX.HX_coldSide.u[10] = PHX.HX_coldSide.w / (PHX.HX_coldSide.gas[10].d * PHX.HX_coldSide.A) "Gas velocity";
  PHX.HX_coldSide.gas[10].p = PHX.HX_coldSide.p;
  PHX.HX_coldSide.gas[10].T = PHX.HX_coldSide.T[10];
  PHX.HX_coldSide.gas[10].h = PHX.HX_coldSide.h[10];
  PHX.HX_coldSide.cv[1] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.heatCapacity_cv(PHX.HX_coldSide.gas[1].state);
  PHX.HX_coldSide.dddT[1] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derT_p(PHX.HX_coldSide.gas[1].state);
  PHX.HX_coldSide.dddp[1] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derp_T(PHX.HX_coldSide.gas[1].state);
  PHX.HX_coldSide.dddX[1,:] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derX(PHX.HX_coldSide.gas[1].state);
  PHX.HX_coldSide.cv[2] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.heatCapacity_cv(PHX.HX_coldSide.gas[2].state);
  PHX.HX_coldSide.dddT[2] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derT_p(PHX.HX_coldSide.gas[2].state);
  PHX.HX_coldSide.dddp[2] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derp_T(PHX.HX_coldSide.gas[2].state);
  PHX.HX_coldSide.dddX[2,:] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derX(PHX.HX_coldSide.gas[2].state);
  PHX.HX_coldSide.cv[3] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.heatCapacity_cv(PHX.HX_coldSide.gas[3].state);
  PHX.HX_coldSide.dddT[3] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derT_p(PHX.HX_coldSide.gas[3].state);
  PHX.HX_coldSide.dddp[3] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derp_T(PHX.HX_coldSide.gas[3].state);
  PHX.HX_coldSide.dddX[3,:] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derX(PHX.HX_coldSide.gas[3].state);
  PHX.HX_coldSide.cv[4] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.heatCapacity_cv(PHX.HX_coldSide.gas[4].state);
  PHX.HX_coldSide.dddT[4] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derT_p(PHX.HX_coldSide.gas[4].state);
  PHX.HX_coldSide.dddp[4] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derp_T(PHX.HX_coldSide.gas[4].state);
  PHX.HX_coldSide.dddX[4,:] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derX(PHX.HX_coldSide.gas[4].state);
  PHX.HX_coldSide.cv[5] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.heatCapacity_cv(PHX.HX_coldSide.gas[5].state);
  PHX.HX_coldSide.dddT[5] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derT_p(PHX.HX_coldSide.gas[5].state);
  PHX.HX_coldSide.dddp[5] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derp_T(PHX.HX_coldSide.gas[5].state);
  PHX.HX_coldSide.dddX[5,:] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derX(PHX.HX_coldSide.gas[5].state);
  PHX.HX_coldSide.cv[6] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.heatCapacity_cv(PHX.HX_coldSide.gas[6].state);
  PHX.HX_coldSide.dddT[6] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derT_p(PHX.HX_coldSide.gas[6].state);
  PHX.HX_coldSide.dddp[6] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derp_T(PHX.HX_coldSide.gas[6].state);
  PHX.HX_coldSide.dddX[6,:] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derX(PHX.HX_coldSide.gas[6].state);
  PHX.HX_coldSide.cv[7] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.heatCapacity_cv(PHX.HX_coldSide.gas[7].state);
  PHX.HX_coldSide.dddT[7] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derT_p(PHX.HX_coldSide.gas[7].state);
  PHX.HX_coldSide.dddp[7] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derp_T(PHX.HX_coldSide.gas[7].state);
  PHX.HX_coldSide.dddX[7,:] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derX(PHX.HX_coldSide.gas[7].state);
  PHX.HX_coldSide.cv[8] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.heatCapacity_cv(PHX.HX_coldSide.gas[8].state);
  PHX.HX_coldSide.dddT[8] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derT_p(PHX.HX_coldSide.gas[8].state);
  PHX.HX_coldSide.dddp[8] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derp_T(PHX.HX_coldSide.gas[8].state);
  PHX.HX_coldSide.dddX[8,:] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derX(PHX.HX_coldSide.gas[8].state);
  PHX.HX_coldSide.cv[9] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.heatCapacity_cv(PHX.HX_coldSide.gas[9].state);
  PHX.HX_coldSide.dddT[9] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derT_p(PHX.HX_coldSide.gas[9].state);
  PHX.HX_coldSide.dddp[9] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derp_T(PHX.HX_coldSide.gas[9].state);
  PHX.HX_coldSide.dddX[9,:] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derX(PHX.HX_coldSide.gas[9].state);
  PHX.HX_coldSide.cv[10] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.heatCapacity_cv(PHX.HX_coldSide.gas[10].state);
  PHX.HX_coldSide.dddT[10] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derT_p(PHX.HX_coldSide.gas[10].state);
  PHX.HX_coldSide.dddp[10] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derp_T(PHX.HX_coldSide.gas[10].state);
  PHX.HX_coldSide.dddX[10,:] = PL_Lib.Experiments.SimplePack.PHX.HX_coldSide.Medium.density_derX(PHX.HX_coldSide.gas[10].state);
  PHX.HX_coldSide.p = PHX.HX_coldSide.outfl.p;
  PHX.HX_coldSide.w = PHX.HX_coldSide.infl.m_flow / /*Real*/(PHX.HX_coldSide.Nt);
  PHX.HX_coldSide.infl.h_outflow = PHX.HX_coldSide.gas[1].h;
  PHX.HX_coldSide.outfl.h_outflow = PHX.HX_coldSide.gas[10].h;
  PHX.HX_coldSide.gas[1].h = sourceMassFlow_RA_PHXin.flange.h_outflow;
  PHX.HX_coldSide.gas[2].T = PHX.HX_coldSide.Ttilde[1];
  PHX.HX_coldSide.gas[3].T = PHX.HX_coldSide.Ttilde[2];
  PHX.HX_coldSide.gas[4].T = PHX.HX_coldSide.Ttilde[3];
  PHX.HX_coldSide.gas[5].T = PHX.HX_coldSide.Ttilde[4];
  PHX.HX_coldSide.gas[6].T = PHX.HX_coldSide.Ttilde[5];
  PHX.HX_coldSide.gas[7].T = PHX.HX_coldSide.Ttilde[6];
  PHX.HX_coldSide.gas[8].T = PHX.HX_coldSide.Ttilde[7];
  PHX.HX_coldSide.gas[9].T = PHX.HX_coldSide.Ttilde[8];
  PHX.HX_coldSide.gas[10].T = PHX.HX_coldSide.Ttilde[9];
  PHX.HX_coldSide.Tin = PHX.HX_coldSide.gas[1].T;
  PHX.HX_coldSide.M = (PHX.HX_coldSide.rhobar[1] + PHX.HX_coldSide.rhobar[2] + PHX.HX_coldSide.rhobar[3] + PHX.HX_coldSide.rhobar[4] + PHX.HX_coldSide.rhobar[5] + PHX.HX_coldSide.rhobar[6] + PHX.HX_coldSide.rhobar[7] + PHX.HX_coldSide.rhobar[8] + PHX.HX_coldSide.rhobar[9]) * PHX.HX_coldSide.A * PHX.HX_coldSide.l "Fluid mass (single tube)";
  PHX.HX_coldSide.Mtot = PHX.HX_coldSide.M * /*Real*/(PHX.HX_coldSide.Nt) "Fluid mass (total)";
  PHX.HX_coldSide.Tr = noEvent(PHX.HX_coldSide.M / max(PHX.HX_coldSide.infl.m_flow / /*Real*/(PHX.HX_coldSide.Nt), 1e-15)) "Residence time";
  assert(PHX.HX_coldSide.infl.m_flow > (-PHX.HX_coldSide.wnom * PHX.HX_coldSide.wnm), "Reverse flow not allowed, maybe you connected the component with wrong orientation");
  assert(PHX.metalTubeFV.rext > PHX.metalTubeFV.rint, "External radius must be greater than internal radius");
  PHX.metalTubeFV.L / 9.0 * /*Real*/(PHX.metalTubeFV.Nt) * PHX.metalTubeFV.rhomcm * PHX.metalTubeFV.Am * der(PHX.metalTubeFV.Tvol[1]) = PHX.metalTubeFV.int.Q[1] + PHX.metalTubeFV.ext.Q[1] "Energy balance";
  PHX.metalTubeFV.L / 9.0 * /*Real*/(PHX.metalTubeFV.Nt) * PHX.metalTubeFV.rhomcm * PHX.metalTubeFV.Am * der(PHX.metalTubeFV.Tvol[2]) = PHX.metalTubeFV.int.Q[2] + PHX.metalTubeFV.ext.Q[2] "Energy balance";
  PHX.metalTubeFV.L / 9.0 * /*Real*/(PHX.metalTubeFV.Nt) * PHX.metalTubeFV.rhomcm * PHX.metalTubeFV.Am * der(PHX.metalTubeFV.Tvol[3]) = PHX.metalTubeFV.int.Q[3] + PHX.metalTubeFV.ext.Q[3] "Energy balance";
  PHX.metalTubeFV.L / 9.0 * /*Real*/(PHX.metalTubeFV.Nt) * PHX.metalTubeFV.rhomcm * PHX.metalTubeFV.Am * der(PHX.metalTubeFV.Tvol[4]) = PHX.metalTubeFV.int.Q[4] + PHX.metalTubeFV.ext.Q[4] "Energy balance";
  PHX.metalTubeFV.L / 9.0 * /*Real*/(PHX.metalTubeFV.Nt) * PHX.metalTubeFV.rhomcm * PHX.metalTubeFV.Am * der(PHX.metalTubeFV.Tvol[5]) = PHX.metalTubeFV.int.Q[5] + PHX.metalTubeFV.ext.Q[5] "Energy balance";
  PHX.metalTubeFV.L / 9.0 * /*Real*/(PHX.metalTubeFV.Nt) * PHX.metalTubeFV.rhomcm * PHX.metalTubeFV.Am * der(PHX.metalTubeFV.Tvol[6]) = PHX.metalTubeFV.int.Q[6] + PHX.metalTubeFV.ext.Q[6] "Energy balance";
  PHX.metalTubeFV.L / 9.0 * /*Real*/(PHX.metalTubeFV.Nt) * PHX.metalTubeFV.rhomcm * PHX.metalTubeFV.Am * der(PHX.metalTubeFV.Tvol[7]) = PHX.metalTubeFV.int.Q[7] + PHX.metalTubeFV.ext.Q[7] "Energy balance";
  PHX.metalTubeFV.L / 9.0 * /*Real*/(PHX.metalTubeFV.Nt) * PHX.metalTubeFV.rhomcm * PHX.metalTubeFV.Am * der(PHX.metalTubeFV.Tvol[8]) = PHX.metalTubeFV.int.Q[8] + PHX.metalTubeFV.ext.Q[8] "Energy balance";
  PHX.metalTubeFV.L / 9.0 * /*Real*/(PHX.metalTubeFV.Nt) * PHX.metalTubeFV.rhomcm * PHX.metalTubeFV.Am * der(PHX.metalTubeFV.Tvol[9]) = PHX.metalTubeFV.int.Q[9] + PHX.metalTubeFV.ext.Q[9] "Energy balance";
  PHX.metalTubeFV.int.Q[1] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.int.T[1] - PHX.metalTubeFV.Tvol[1]) / log((PHX.metalTubeFV.rint + PHX.metalTubeFV.rext) / (2.0 * PHX.metalTubeFV.rint)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the internal half-thickness";
  PHX.metalTubeFV.int.Q[2] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.int.T[2] - PHX.metalTubeFV.Tvol[2]) / log((PHX.metalTubeFV.rint + PHX.metalTubeFV.rext) / (2.0 * PHX.metalTubeFV.rint)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the internal half-thickness";
  PHX.metalTubeFV.int.Q[3] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.int.T[3] - PHX.metalTubeFV.Tvol[3]) / log((PHX.metalTubeFV.rint + PHX.metalTubeFV.rext) / (2.0 * PHX.metalTubeFV.rint)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the internal half-thickness";
  PHX.metalTubeFV.int.Q[4] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.int.T[4] - PHX.metalTubeFV.Tvol[4]) / log((PHX.metalTubeFV.rint + PHX.metalTubeFV.rext) / (2.0 * PHX.metalTubeFV.rint)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the internal half-thickness";
  PHX.metalTubeFV.int.Q[5] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.int.T[5] - PHX.metalTubeFV.Tvol[5]) / log((PHX.metalTubeFV.rint + PHX.metalTubeFV.rext) / (2.0 * PHX.metalTubeFV.rint)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the internal half-thickness";
  PHX.metalTubeFV.int.Q[6] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.int.T[6] - PHX.metalTubeFV.Tvol[6]) / log((PHX.metalTubeFV.rint + PHX.metalTubeFV.rext) / (2.0 * PHX.metalTubeFV.rint)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the internal half-thickness";
  PHX.metalTubeFV.int.Q[7] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.int.T[7] - PHX.metalTubeFV.Tvol[7]) / log((PHX.metalTubeFV.rint + PHX.metalTubeFV.rext) / (2.0 * PHX.metalTubeFV.rint)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the internal half-thickness";
  PHX.metalTubeFV.int.Q[8] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.int.T[8] - PHX.metalTubeFV.Tvol[8]) / log((PHX.metalTubeFV.rint + PHX.metalTubeFV.rext) / (2.0 * PHX.metalTubeFV.rint)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the internal half-thickness";
  PHX.metalTubeFV.int.Q[9] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.int.T[9] - PHX.metalTubeFV.Tvol[9]) / log((PHX.metalTubeFV.rint + PHX.metalTubeFV.rext) / (2.0 * PHX.metalTubeFV.rint)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the internal half-thickness";
  PHX.metalTubeFV.ext.Q[1] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.ext.T[1] - PHX.metalTubeFV.Tvol[1]) / log(2.0 * PHX.metalTubeFV.rext / (PHX.metalTubeFV.rint + PHX.metalTubeFV.rext)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the external half-thickness";
  PHX.metalTubeFV.ext.Q[2] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.ext.T[2] - PHX.metalTubeFV.Tvol[2]) / log(2.0 * PHX.metalTubeFV.rext / (PHX.metalTubeFV.rint + PHX.metalTubeFV.rext)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the external half-thickness";
  PHX.metalTubeFV.ext.Q[3] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.ext.T[3] - PHX.metalTubeFV.Tvol[3]) / log(2.0 * PHX.metalTubeFV.rext / (PHX.metalTubeFV.rint + PHX.metalTubeFV.rext)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the external half-thickness";
  PHX.metalTubeFV.ext.Q[4] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.ext.T[4] - PHX.metalTubeFV.Tvol[4]) / log(2.0 * PHX.metalTubeFV.rext / (PHX.metalTubeFV.rint + PHX.metalTubeFV.rext)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the external half-thickness";
  PHX.metalTubeFV.ext.Q[5] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.ext.T[5] - PHX.metalTubeFV.Tvol[5]) / log(2.0 * PHX.metalTubeFV.rext / (PHX.metalTubeFV.rint + PHX.metalTubeFV.rext)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the external half-thickness";
  PHX.metalTubeFV.ext.Q[6] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.ext.T[6] - PHX.metalTubeFV.Tvol[6]) / log(2.0 * PHX.metalTubeFV.rext / (PHX.metalTubeFV.rint + PHX.metalTubeFV.rext)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the external half-thickness";
  PHX.metalTubeFV.ext.Q[7] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.ext.T[7] - PHX.metalTubeFV.Tvol[7]) / log(2.0 * PHX.metalTubeFV.rext / (PHX.metalTubeFV.rint + PHX.metalTubeFV.rext)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the external half-thickness";
  PHX.metalTubeFV.ext.Q[8] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.ext.T[8] - PHX.metalTubeFV.Tvol[8]) / log(2.0 * PHX.metalTubeFV.rext / (PHX.metalTubeFV.rint + PHX.metalTubeFV.rext)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the external half-thickness";
  PHX.metalTubeFV.ext.Q[9] = PHX.metalTubeFV.lambda * 6.283185307179586 * PHX.metalTubeFV.L / 9.0 * (PHX.metalTubeFV.ext.T[9] - PHX.metalTubeFV.Tvol[9]) / log(2.0 * PHX.metalTubeFV.rext / (PHX.metalTubeFV.rint + PHX.metalTubeFV.rext)) * /*Real*/(PHX.metalTubeFV.Nt) "Heat conduction through the external half-thickness";
  PHX.heatExchangerTopologyFV.side2.T[1] = PHX.heatExchangerTopologyFV.side1.T[1];
  PHX.heatExchangerTopologyFV.side2.Q[1] + PHX.heatExchangerTopologyFV.side1.Q[1] = 0.0;
  PHX.heatExchangerTopologyFV.side2.T[2] = PHX.heatExchangerTopologyFV.side1.T[2];
  PHX.heatExchangerTopologyFV.side2.Q[2] + PHX.heatExchangerTopologyFV.side1.Q[2] = 0.0;
  PHX.heatExchangerTopologyFV.side2.T[3] = PHX.heatExchangerTopologyFV.side1.T[3];
  PHX.heatExchangerTopologyFV.side2.Q[3] + PHX.heatExchangerTopologyFV.side1.Q[3] = 0.0;
  PHX.heatExchangerTopologyFV.side2.T[4] = PHX.heatExchangerTopologyFV.side1.T[4];
  PHX.heatExchangerTopologyFV.side2.Q[4] + PHX.heatExchangerTopologyFV.side1.Q[4] = 0.0;
  PHX.heatExchangerTopologyFV.side2.T[5] = PHX.heatExchangerTopologyFV.side1.T[5];
  PHX.heatExchangerTopologyFV.side2.Q[5] + PHX.heatExchangerTopologyFV.side1.Q[5] = 0.0;
  PHX.heatExchangerTopologyFV.side2.T[6] = PHX.heatExchangerTopologyFV.side1.T[6];
  PHX.heatExchangerTopologyFV.side2.Q[6] + PHX.heatExchangerTopologyFV.side1.Q[6] = 0.0;
  PHX.heatExchangerTopologyFV.side2.T[7] = PHX.heatExchangerTopologyFV.side1.T[7];
  PHX.heatExchangerTopologyFV.side2.Q[7] + PHX.heatExchangerTopologyFV.side1.Q[7] = 0.0;
  PHX.heatExchangerTopologyFV.side2.T[8] = PHX.heatExchangerTopologyFV.side1.T[8];
  PHX.heatExchangerTopologyFV.side2.Q[8] + PHX.heatExchangerTopologyFV.side1.Q[8] = 0.0;
  PHX.heatExchangerTopologyFV.side2.T[9] = PHX.heatExchangerTopologyFV.side1.T[9];
  PHX.heatExchangerTopologyFV.side2.Q[9] + PHX.heatExchangerTopologyFV.side1.Q[9] = 0.0;
  assert(sourceP_BAin.gas.T >= 200.0 and sourceP_BAin.gas.T <= 6000.0, "
  Temperature T (= " + String(sourceP_BAin.gas.T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  sourceP_BAin.gas.MM = 0.0289651159;
  sourceP_BAin.gas.R = 287.0512249529787;
  sourceP_BAin.gas.h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), sourceP_BAin.gas.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  sourceP_BAin.gas.u = sourceP_BAin.gas.h - sourceP_BAin.gas.R * sourceP_BAin.gas.T;
  sourceP_BAin.gas.d = sourceP_BAin.gas.p / (sourceP_BAin.gas.R * sourceP_BAin.gas.T);
  sourceP_BAin.gas.state.T = sourceP_BAin.gas.T;
  sourceP_BAin.gas.state.p = sourceP_BAin.gas.p;
  sourceP_BAin.gas.X[1] = 1.0;
  assert(sourceP_BAin.gas.X[1] >= -1e-05 and sourceP_BAin.gas.X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(sourceP_BAin.gas.X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(sourceP_BAin.gas.p >= 0.0, "Pressure (= " + String(sourceP_BAin.gas.p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(sourceP_BAin.gas.T, 6, 0, true) + " K)");
  sourceP_BAin.flange.p = sourceP_BAin.gas.p;
  sourceP_BAin.gas.p = sourceP_BAin.in_p0_internal;
  sourceP_BAin.gas.T = sourceP_BAin.in_T_internal;
  sourceP_BAin.in_X_internal[1] = sourceP_BAin.Xnom[1] "Composition set by parameter";
  sourceP_BAin.flange.h_outflow = sourceP_BAin.gas.h;
  assert(sinkP_RA_PHXout.gas.T >= 200.0 and sinkP_RA_PHXout.gas.T <= 6000.0, "
  Temperature T (= " + String(sinkP_RA_PHXout.gas.T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  sinkP_RA_PHXout.gas.MM = 0.0289651159;
  sinkP_RA_PHXout.gas.R = 287.0512249529787;
  sinkP_RA_PHXout.gas.h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), sinkP_RA_PHXout.gas.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  sinkP_RA_PHXout.gas.u = sinkP_RA_PHXout.gas.h - sinkP_RA_PHXout.gas.R * sinkP_RA_PHXout.gas.T;
  sinkP_RA_PHXout.gas.d = sinkP_RA_PHXout.gas.p / (sinkP_RA_PHXout.gas.R * sinkP_RA_PHXout.gas.T);
  sinkP_RA_PHXout.gas.state.T = sinkP_RA_PHXout.gas.T;
  sinkP_RA_PHXout.gas.state.p = sinkP_RA_PHXout.gas.p;
  sinkP_RA_PHXout.gas.X[1] = 1.0;
  assert(sinkP_RA_PHXout.gas.X[1] >= -1e-05 and sinkP_RA_PHXout.gas.X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(sinkP_RA_PHXout.gas.X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(sinkP_RA_PHXout.gas.p >= 0.0, "Pressure (= " + String(sinkP_RA_PHXout.gas.p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(sinkP_RA_PHXout.gas.T, 6, 0, true) + " K)");
  sinkP_RA_PHXout.flange.p = sinkP_RA_PHXout.gas.p;
  sinkP_RA_PHXout.gas.p = sinkP_RA_PHXout.in_p0_internal;
  sinkP_RA_PHXout.gas.T = sinkP_RA_PHXout.in_T_internal;
  sinkP_RA_PHXout.in_T_internal = sinkP_RA_PHXout.T "Temperature set by parameter";
  sinkP_RA_PHXout.in_X_internal[1] = sinkP_RA_PHXout.Xnom[1] "Composition set by parameter";
  sinkP_RA_PHXout.flange.h_outflow = sinkP_RA_PHXout.gas.h;
  assert(sourceMassFlow_RA_PHXin.gas.T >= 200.0 and sourceMassFlow_RA_PHXin.gas.T <= 6000.0, "
  Temperature T (= " + String(sourceMassFlow_RA_PHXin.gas.T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  sourceMassFlow_RA_PHXin.gas.MM = 0.0289651159;
  sourceMassFlow_RA_PHXin.gas.R = 287.0512249529787;
  sourceMassFlow_RA_PHXin.gas.h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), sourceMassFlow_RA_PHXin.gas.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  sourceMassFlow_RA_PHXin.gas.u = sourceMassFlow_RA_PHXin.gas.h - sourceMassFlow_RA_PHXin.gas.R * sourceMassFlow_RA_PHXin.gas.T;
  sourceMassFlow_RA_PHXin.gas.d = sourceMassFlow_RA_PHXin.gas.p / (sourceMassFlow_RA_PHXin.gas.R * sourceMassFlow_RA_PHXin.gas.T);
  sourceMassFlow_RA_PHXin.gas.state.T = sourceMassFlow_RA_PHXin.gas.T;
  sourceMassFlow_RA_PHXin.gas.state.p = sourceMassFlow_RA_PHXin.gas.p;
  sourceMassFlow_RA_PHXin.gas.X[1] = 1.0;
  assert(sourceMassFlow_RA_PHXin.gas.X[1] >= -1e-05 and sourceMassFlow_RA_PHXin.gas.X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(sourceMassFlow_RA_PHXin.gas.X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(sourceMassFlow_RA_PHXin.gas.p >= 0.0, "Pressure (= " + String(sourceMassFlow_RA_PHXin.gas.p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(sourceMassFlow_RA_PHXin.gas.T, 6, 0, true) + " K)");
  sourceMassFlow_RA_PHXin.flange.m_flow = -sourceMassFlow_RA_PHXin.w;
  sourceMassFlow_RA_PHXin.w = sourceMassFlow_RA_PHXin.in_w0_internal;
  sourceMassFlow_RA_PHXin.in_w0_internal = sourceMassFlow_RA_PHXin.w0 "Flow rate set by parameter";
  sourceMassFlow_RA_PHXin.gas.T = sourceMassFlow_RA_PHXin.in_T_internal;
  sourceMassFlow_RA_PHXin.in_X_internal[1] = sourceMassFlow_RA_PHXin.Xnom[1] "Composition set by parameter";
  sourceMassFlow_RA_PHXin.flange.p = sourceMassFlow_RA_PHXin.gas.p;
  sourceMassFlow_RA_PHXin.flange.h_outflow = sourceMassFlow_RA_PHXin.gas.h;
  assert(sinkP_PACKout.gas.T >= 200.0 and sinkP_PACKout.gas.T <= 6000.0, "
  Temperature T (= " + String(sinkP_PACKout.gas.T, 6, 0, true) + " K) is not in the allowed range
  200 K <= T <= 6000 K required from medium model \"" + "Air" + "\".
  ");
  sinkP_PACKout.gas.MM = 0.0289651159;
  sinkP_PACKout.gas.R = 287.0512249529787;
  sinkP_PACKout.gas.h = Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord("Air", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), sinkP_PACKout.gas.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
  sinkP_PACKout.gas.u = sinkP_PACKout.gas.h - sinkP_PACKout.gas.R * sinkP_PACKout.gas.T;
  sinkP_PACKout.gas.d = sinkP_PACKout.gas.p / (sinkP_PACKout.gas.R * sinkP_PACKout.gas.T);
  sinkP_PACKout.gas.state.T = sinkP_PACKout.gas.T;
  sinkP_PACKout.gas.state.p = sinkP_PACKout.gas.p;
  sinkP_PACKout.gas.X[1] = 1.0;
  assert(sinkP_PACKout.gas.X[1] >= -1e-05 and sinkP_PACKout.gas.X[1] <= 1.00001, "Mass fraction X[" + String(1, 0, true) + "] = " + String(sinkP_PACKout.gas.X[1], 6, 0, true) + "of substance " + "Air" + "
  of medium " + "Air" + " is not in the range 0..1");
  assert(sinkP_PACKout.gas.p >= 0.0, "Pressure (= " + String(sinkP_PACKout.gas.p, 6, 0, true) + " Pa) of medium \"" + "Air" + "\" is negative
  (Temperature = " + String(sinkP_PACKout.gas.T, 6, 0, true) + " K)");
  sinkP_PACKout.flange.p = sinkP_PACKout.gas.p;
  sinkP_PACKout.gas.p = sinkP_PACKout.in_p0_internal;
  sinkP_PACKout.in_p0_internal = sinkP_PACKout.p0 "Pressure set by parameter";
  sinkP_PACKout.gas.T = sinkP_PACKout.in_T_internal;
  sinkP_PACKout.in_T_internal = sinkP_PACKout.T "Temperature set by parameter";
  sinkP_PACKout.in_X_internal[1] = sinkP_PACKout.Xnom[1] "Composition set by parameter";
  sinkP_PACKout.flange.h_outflow = sinkP_PACKout.gas.h;
end PL_Lib.Experiments.SimplePack;
